using DeliveryOrdersWebApi.DAL;
using DeliveryOrdersWebApi.Model;
using ImageMagick;
using LeSDataMain;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Security.Policy;
using System.Text;
using System.Xml.Linq;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace DeliveryOrdersWebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class WMSController : Controller
    {
        IConfiguration configuration;
        private readonly DeliveryOrderDbContext _dbContext;

        public WMSController(DeliveryOrderDbContext dbContext)
        {
            CommonFunction.setLog("before - ");
            _dbContext = dbContext;
            var configBuilder = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("AppSettings.json", optional: true, reloadOnChange: true);
            configuration = configBuilder.Build();
            CommonFunction.setLog("after -");
        }

        [HttpPost]
        [Route("Login_WMS")]
        public IActionResult Login_WMS(Login_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {

            try
            {
                HttpContext.Response.Headers.Add("Access-Control-Allow-Origin", "*");
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Login_WMS with Login_Data : ");
                CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {

                    if (_data == null && _data.UserId == "")
                    {
                        return BadRequest("UserId is blank");
                    }
                    if (_data == null && _data.password == "")
                    {
                        return BadRequest("password is blank");
                    }
                    string sPassword = GlobalTools.EncodePassword(_data.password);
                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERCODE == _data.UserId && x.EX_PASSWORD == sPassword);
                    if (_UserData != null && convert.ToInt(_UserData.EX_USERID) > 0)
                    {
                        CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Login successfully");
                        var SiteId = GetLinkedSites(_UserData);
                        WMS_Login_View _modal = new WMS_Login_View();
                        _modal.external_User = _UserData;
                        _modal.Mast_Company = _dbContext.Mast_Company.Where(x => x.COMPANYID == _UserData.COMPANYID).ToList();

                        if (_UserData.DASHBOARD_ACCESS == 1)
                        {
                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have successfully Login to WMS Handheld");
                            CommonFunction.SetAudit("Login_WMS", "Updated", "", "User : " + _UserData.EX_USERNAME + " have successfully Login to WMS Handheld", "");
                            return Ok(_modal);
                        }
                        else
                        {
                            throw new Exception("WMS Access for User  : " + _data.UserId + " is denied.");
                        }

                    }
                    else
                    {
                        return NotFound("Unable to Login using Userid : " + _data.UserId);
                    }
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Login_WMS with Login_Data for UserCode : " + _data.UserId + " ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Login_WMS", "Error", "", "Error on Login_WMS with Login_Data for UserCode : " + _data.UserId + " ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Login_WMS stopped successfully.");
            }
        }

        private string GetLinkedSites(SM_EXTERNAL_USERS User)
        {
            string LinkedSites = string.Empty;
            try
            {
                if (User != null && User.EX_USERID != null & User.EX_USERID > 0)
                {

                    var AllSites = _dbContext.USER_SITE_LINK.Where(x => x.EX_USERID == User.EX_USERID).Select(x => x.SITEID);
                    var SITES = AllSites;
                    LinkedSites = JsonConvert.SerializeObject(SITES);

                }
            }
            catch (Exception ex)
            {
                ViewBag.Message = "Login Failed! Please contact support";
                //HttpContext.Session.SetString("LOGIN_FAIL_MESSAGE", "Login Failed! Please contact support");
                CommonFunction.setLog("Error in getting linked Sites For User - " + ex.Message);
                CommonFunction.SetAudit("GetLinkedSites", "Error", "", "Error in getting linked Sites For User - " + ex.Message, "");
            }

            return LinkedSites;
        }

        #region Inbound Order

        [HttpPost]
        [Route("Inbound_List_WMS")]
        public IActionResult Inbound_List_WMS(Inbound_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_List_Filter _modal = new Inbound_List_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Inbound_List_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Inbound List");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                _modal.Mast_Site = LstSites;
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                _modal.Mast_ORDER_CODE = _dbContext.Mast_ORDER_CODE.Select(x => new Mast_ORDER_CODE
                                {
                                    order_code_id = x.order_code_id,
                                    description = x.order_code + " - " + x.description,
                                    order_code = x.order_code
                                }).ToList();
                                _modal.Customers = _dbContext.Customers.Where(x => x.Customer_Type.ToUpper() == "CUSTOMER").Select(x => new CustomersFilter
                                {
                                    Customer_ID = x.Customer_ID,
                                    Customer_Name = x.Customer_Code + " - " + x.Customer_Name
                                }).ToList();
                                Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                                List<V_INTERNAL_ORDER_LINE> lstdata = (List<V_INTERNAL_ORDER_LINE>)_dbContext.V_INTERNAL_ORDER_LINE.Where(a => a.ITEM_STATUS == _status.statusid && (a.QTY_REC == null || (a.QTY > a.QTY_REC)) && lstUserSite.Contains((int)a.siteid)).ToList();

                                //List<CUSTOMERS_PART_LINK> lstCustPartsLink = (List<CUSTOMERS_PART_LINK>)_dbContext.CUSTOMERS_PART_LINK.ToList();

                                //var leftJoinQuery = from inbound in lstInbound
                                //                    join custParts in lstCustPartsLink
                                //                    on inbound.customerid equals custParts.Customer_ID
                                //                    into matchingcustParts
                                //                    from cInboundParts in matchingcustParts.Where(x => x.SalesPartId == inbound.SALESPARTID).DefaultIfEmpty()
                                //                    select new V_Internal_ORDER_LINE_Customer_Parts
                                //                    {
                                //                        INTERNALLINEID = inbound.INTERNALLINEID,
                                //                        ORDERID = inbound.ORDERID,
                                //                        LINENO = inbound.LINENO,
                                //                        RELEASENO = inbound.RELEASENO,
                                //                        PARTNO = inbound.PARTNO,
                                //                        PARTNAME = inbound.PARTNAME,
                                //                        UOM = inbound.UOM,
                                //                        QTY = inbound.QTY,
                                //                        QTY_REC = inbound.QTY_REC,
                                //                        ITEM_STATUS = inbound.ITEM_STATUS,
                                //                        SALESPARTID = inbound.SALESPARTID,
                                //                        statusid = inbound.statusid,
                                //                        STATUS_TEXT = inbound.STATUS_TEXT,
                                //                        ORDER_CODE_ID = inbound.ORDER_CODE_ID,
                                //                        order_code = inbound.order_code,
                                //                        Description = inbound.Description,
                                //                        site_code = inbound.site_code,
                                //                        internal_order_no = inbound.internal_order_no,
                                //                        siteid = inbound.siteid,
                                //                        customerid = inbound.customerid,
                                //                        customer_name = inbound.customer_name,
                                //                        CUST_PART_NO = cInboundParts != null ? cInboundParts.CUST_PART_NO : "",
                                //                        CUST_PART_DESC = cInboundParts != null ? cInboundParts.CUST_PART_DESC : "",
                                //                        BARCODE_IDENTIFICATION = cInboundParts != null ? cInboundParts.BARCODE_IDENTIFICATION : ""
                                //                    };
                                // List<V_Internal_ORDER_LINE_Customer_Parts> lstdata = (List<V_Internal_ORDER_LINE_Customer_Parts>)leftJoinQuery.ToList();

                                if (lstdata.Count() > 0)
                                {
                                    if (convert.ToInt(_data.SiteId) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.siteid == _data.SiteId).ToList();
                                    }
                                    if (convert.ToInt(_data.customerid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.customerid == _data.customerid).ToList();
                                    }
                                    if (convert.ToInt(_data.SALESPARTID) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.SALESPARTID == _data.SALESPARTID).ToList();
                                    }
                                    if (convert.ToInt(_data.order_code_id) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.ORDER_CODE_ID == _data.order_code_id).ToList();
                                    }
                                    if (convert.ToString(_data.CUST_PART_NO).Trim() != "")
                                    {
                                        List<V_INTERNAL_ORDER_LINE> barcodeIdntfy = new List<V_INTERNAL_ORDER_LINE>();
                                        barcodeIdntfy = lstdata.Where(x => convert.ToString(x.CUST_PART_NO).Trim() != null && convert.ToString(x.CUST_PART_NO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.CUST_PART_NO).Trim()) == true).ToList();
                                        if (barcodeIdntfy.Count() == 0)
                                        {
                                            barcodeIdntfy = lstdata.Where(x => convert.ToString(x.PARTNO).Trim() != null && convert.ToString(x.PARTNO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.PARTNO).Trim()) == true).ToList();
                                        }
                                        lstdata = barcodeIdntfy;
                                    }
                                    if (convert.ToString(_data.OrderNo).Trim() != "")
                                    {
                                        lstdata = lstdata.Where(x => convert.ToString(x.internal_order_no).Trim() == convert.ToString(_data.OrderNo).Trim()).ToList();
                                    }
                                }

                                List<Internal_Order_WMS> _LstInternalOrders = lstdata.Select(x => new Internal_Order_WMS
                                {
                                    internalorderid = x.ORDERID,
                                    internal_order_no = x.internal_order_no,
                                    order_code_id = x.ORDER_CODE_ID,
                                    order_code = x.order_code,
                                    description = x.Description,
                                    customerid = x.customerid,
                                    customer_name = x.customer_name,
                                    siteid = x.siteid,
                                    site_name = x.site_code

                                }).Distinct(new TargetClassComparer()).ToList();
                                _modal.INTERNAL_ORDERS = _LstInternalOrders;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Inbound_List_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Inbound_List_WMS", "Error", "", "Error on Inbound_List_WMS ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Inbound_List_WMS stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Inbound_Order_Items_WMS")]
        public IActionResult Inbound_Order_Items_WMS(Inbound_Order_Item _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_Item_Filter _modal = new Inbound_Item_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Inbound_Order_Items_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (convert.ToInt(_data.order_id) == 0)
                            {
                                return NotFound("Unable to get Order Details : " + _data.order_id);
                            }
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Inbound_Order_Items_WMS for Order Details : " + _data.order_id);

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                //List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                //_modal.Mast_Site = LstSites;
                                //_modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                //_modal.Mast_ORDER_CODE = _dbContext.Mast_ORDER_CODE.ToList();
                                //_modal.Customers = _dbContext.Customers.Where(x => x.Customer_Type.ToUpper() == "CUSTOMER").Select(x => new CustomersFilter
                                //{
                                //    Customer_ID = x.Customer_ID,
                                //    Customer_Name = x.Customer_Name,
                                //    Customer_Code = x.Customer_Code
                                //}).ToList();
                                Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                                List<V_INTERNAL_ORDER_LINE> lstdata = (List<V_INTERNAL_ORDER_LINE>)_dbContext.V_INTERNAL_ORDER_LINE.Where(a => a.ITEM_STATUS == _status.statusid && (a.QTY_REC == null || (a.QTY > a.QTY_REC)) && lstUserSite.Contains((int)a.siteid)).ToList();

                                if (lstdata.Count() > 0)
                                {
                                    if (convert.ToInt(_data.order_id) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.ORDERID == _data.order_id).ToList();
                                    }
                                    if (convert.ToString(_data.CUST_PART_NO).Trim() != "")
                                    {
                                        List<V_INTERNAL_ORDER_LINE> barcodeIdntfy = new List<V_INTERNAL_ORDER_LINE>();
                                        barcodeIdntfy = lstdata.Where(x => convert.ToString(x.CUST_PART_NO).Trim() != null && convert.ToString(x.CUST_PART_NO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.CUST_PART_NO).Trim()) == true).ToList();
                                        if (barcodeIdntfy.Count() == 0)
                                        {
                                            barcodeIdntfy = lstdata.Where(x => convert.ToString(x.PARTNO).Trim() != null && convert.ToString(x.PARTNO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.PARTNO).Trim()) == true).ToList();
                                        }
                                        lstdata = barcodeIdntfy;
                                    }
                                }
                                _modal.INTERNAL_ORDER_LINES = lstdata;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Inbound_Order_Items_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Inbound_Order_Items_WMS", "Error", "", "Error on Inbound_Order_Items_WMS ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Inbound_Order_Items_WMS stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Inbound_Details_WMS")]
        public IActionResult Inbound_Details_WMS(Inbound_Details_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_Line_Details _modal = new Inbound_Line_Details();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Inbound_Details_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                _modal = Get_Inbound_Details(_data);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Inbound_Details_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Inbound_Details_WMS", "Error", "", "Error on Inbound_Details_WMS ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Inbound_Details_WMS stopped successfully.");
            }
        }

        private Inbound_Line_Details Get_Inbound_Details(Inbound_Details_Data _data)
        {
            Inbound_Line_Details _modal = new Inbound_Line_Details();
            string _dataValueStr = JsonConvert.SerializeObject(_data);
            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
            {
                throw new Exception("Unable to get Userdata for Userid : " + _data.UserId);
            }
            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
            executionStrategy.Execute(() =>
            {
                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                {
                    MAST_SALES_PARTS_LOCATION _arrivalLocation = null;
                    var SiteId = GetLinkedSites(_UserData);
                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                    List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                    _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                    _modal.Mast_Stock_type = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                    {
                        STOCK_TYPEID = x.STOCK_TYPEID,
                        STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                    }).ToList();
                    Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                    V_INTERNAL_ORDER_LINE Inbound_Item_Details = (V_INTERNAL_ORDER_LINE)_dbContext.V_INTERNAL_ORDER_LINE.Find(_data.internallineid);
                    INTERNAL_ORDER_LINE Item_Details = (INTERNAL_ORDER_LINE)_dbContext.INTERNAL_ORDER_LINE.Find(_data.internallineid);
                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == Inbound_Item_Details.siteid && x.SiteConfig_ParamId == 1013);
                    if (siteConfig != null)
                    {
                        _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                        _modal.Arrival_Location = _arrivalLocation;
                    }

                    INTERNAL_ORDER_LINE Item_DetailsExt = Item_Details;

                    try
                    {
                        if (Item_Details.Locked_UserID != null && Item_Details.Locked_UserID == _data.UserId)
                        {
                            Item_Details.Locked_UserID = _data.UserId;
                            Item_Details.Locked_Time = DateTime.Now;
                        }
                        else
                        {
                            if (Item_Details.Locked_UserID == null)
                            {
                                Item_Details.Locked_UserID = _data.UserId;
                                Item_Details.Locked_Time = DateTime.Now;
                            }
                            else
                            {
                                if (Item_Details.Locked_Time != null && ((DateTime.Now - convert.ToDateTime(Item_Details.Locked_Time)).TotalMinutes >= 30))
                                {
                                    Item_Details.Locked_UserID = _data.UserId;
                                    Item_Details.Locked_Time = DateTime.Now;
                                }
                                else
                                {
                                    SM_EXTERNAL_USERS _LockUserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == Item_Details.Locked_UserID);
                                    throw new Exception("Item No : " + Item_Details.LINENO + " for Order No : " + Inbound_Item_Details.internal_order_no + " is Blocked by User : " + _LockUserData.EX_USERCODE);
                                }
                            }
                        }
                        _dbContext.INTERNAL_ORDER_LINE.Update(Item_Details);
                        _dbContext.SaveChanges();
                        dbContextTransaction.Commit();
                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Locked the Inbound Order No : " + Inbound_Item_Details.order_code + " and Part No : " + Item_Details.PARTNO + " for Register Inbound Receipts form Inbound Order.");
                        CommonFunction.SetAudit("Get_Inbound_Details", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Locked Inbound Order No : " + Inbound_Item_Details.order_code + " and Part No : " + Item_Details.PARTNO + " for Register Inbound Receipts form Inbound Order.", "");

                    }
                    catch (Exception ex)
                    {
                        dbContextTransaction.Rollback();
                        throw ex;
                    }
                    _modal.V_INTERNAL_ORDER_LINE_Details = Inbound_Item_Details;
                }
            });
            return _modal;
        }

        [HttpPost]
        [Route("Remove_Lock_Transaction")]
        public IActionResult Remove_Lock_Transaction(Inbound_Details_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Remove_Lock_Transaction");
                CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                    V_INTERNAL_ORDER_LINE Inbound_Item_Details = (V_INTERNAL_ORDER_LINE)_dbContext.V_INTERNAL_ORDER_LINE.Find(_data.internallineid);
                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                    executionStrategy.Execute(() =>
                    {
                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                        {
                            try
                            {
                                INTERNAL_ORDER_LINE _linedata = _dbContext.INTERNAL_ORDER_LINE.Find(_data.internallineid);
                                if (_linedata != null)
                                {
                                    if (_linedata.Locked_UserID != null && _linedata.Locked_UserID == _data.UserId)
                                    {
                                        _linedata.Locked_UserID = null;
                                        _linedata.Locked_Time = null;
                                    }
                                    else
                                    {
                                        if (_linedata.Locked_UserID == null)
                                        {
                                            _linedata.Locked_UserID = null;
                                            _linedata.Locked_Time = null;
                                        }
                                        else
                                        {
                                            if (_linedata.Locked_Time != null && ((DateTime.Now - convert.ToDateTime(_linedata.Locked_Time)).TotalMinutes >= 30))
                                            {
                                                _linedata.Locked_UserID = null;
                                                _linedata.Locked_Time = null;
                                            }
                                            else
                                            {
                                                SM_EXTERNAL_USERS _LockUserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _linedata.Locked_UserID);
                                                throw new Exception("Item No : " + _linedata.LINENO + " for Order No : " + Inbound_Item_Details.internal_order_no + " is Blocked by User : " + _LockUserData.EX_USERCODE);
                                            }
                                        }
                                    }
                                    _linedata.UPDATED_DATE = DateTime.Now;
                                    _dbContext.INTERNAL_ORDER_LINE.Update(_linedata);
                                    _dbContext.SaveChanges();
                                    dbContextTransaction.Commit();
                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Remove Lock for Inbound Order No : " + Inbound_Item_Details.order_code + " and Part No : " + Inbound_Item_Details.PARTNO + " for Register Inbound Receipts form Inbound Order");
                                    CommonFunction.SetAudit("Remove_Lock_Transaction", "Updated", "", "User : " + _UserData.EX_USERNAME + "have Remove Lock for Inbound Order No : " + Inbound_Item_Details.order_code + " and Part No : " + Inbound_Item_Details.PARTNO + " for Register Inbound Receipts form Inbound Order", "");

                                }
                            }
                            catch (Exception ex)
                            {
                                dbContextTransaction.Rollback();
                                throw ex;
                            }
                        }
                    });
                    return Ok($"Remove Lock for UserID : " + _UserData.EX_USERCODE + " successfull for Order No : " + Inbound_Item_Details.internal_order_no + " and Line No : " + Inbound_Item_Details.LINENO + "");
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error Remove_Lock_Transaction - " + ex.Message);
                CommonFunction.SetAudit("Remove_Lock_Transaction", "Error", "", "Error Remove_Lock_Transaction - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_Lock_Transaction stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Update_Inbound_Stock")]
        public IActionResult Update_Inbound_Stock(Update_Inbound_Stock_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_Line_Details _modal = new Inbound_Line_Details();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Update_Inbound_Stock");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {

                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Update_Inbound_Stock for InterOrderLineId : " + _data.internallineid);

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                _modal.Mast_Stock_type = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                                {
                                    STOCK_TYPEID = x.STOCK_TYPEID,
                                    STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                                }).ToList();
                                Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                                V_INTERNAL_ORDER_LINE Inbound_Item_Details = (V_INTERNAL_ORDER_LINE)_dbContext.V_INTERNAL_ORDER_LINE.Find(_data.internallineid);
                                INTERNAL_ORDERS InternalOrder = _dbContext.INTERNAL_ORDERS.Find(Inbound_Item_Details.ORDERID);

                                INTERNAL_ORDER_LINE _linedata = _dbContext.INTERNAL_ORDER_LINE.Find(Inbound_Item_Details.INTERNALLINEID);
                                List<PartInventoryStockDetails> _stockdetaillist = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.internallineid == Inbound_Item_Details.INTERNALLINEID).ToList();

                                List<MAST_SALES_PARTS_LOCATION> _lstPartLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.ToList();
                                List<Mast_STOCK_TYPE> _lstStockType = _dbContext.Mast_STOCK_TYPE.ToList();

                                List<PartInventoryStockDetails> _lstPART_INVENTORY_STOCK_DETAILS = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == Inbound_Item_Details.SALESPARTID && a.SITEID == Inbound_Item_Details.siteid && a.customerid == Inbound_Item_Details.customerid).ToList();
                                List<PartInventoryStock> _lstPART_INVENTORY_STOCK = _dbContext.PART_INVENTORY_STOCK.Where(a => a.SalesPartId == Inbound_Item_Details.SALESPARTID && a.SITEID == Inbound_Item_Details.siteid && a.customerid == Inbound_Item_Details.customerid).ToList();

                                salesparts _partDetails = _dbContext.SALES_PARTS.Find(Inbound_Item_Details.SALESPARTID);

                                if (_linedata.Locked_UserID != null && _linedata.Locked_UserID == _data.UserId)
                                {
                                    _linedata.Locked_UserID = _data.UserId;
                                    _linedata.Locked_Time = DateTime.Now;
                                }
                                else
                                {
                                    if (_linedata.Locked_UserID == null)
                                    {
                                        _linedata.Locked_UserID = _data.UserId;
                                        _linedata.Locked_Time = DateTime.Now;
                                    }
                                    else
                                    {
                                        if (_linedata.Locked_Time != null && ((DateTime.Now - convert.ToDateTime(_linedata.Locked_Time)).TotalMinutes >= 30))
                                        {
                                            _linedata.Locked_UserID = _data.UserId;
                                            _linedata.Locked_Time = DateTime.Now;
                                        }
                                        else
                                        {
                                            SM_EXTERNAL_USERS _LockUserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _linedata.Locked_UserID);
                                            throw new Exception("Item No : " + _linedata.LINENO + " for Order No : " + Inbound_Item_Details.internal_order_no + " is Blocked by User : " + _LockUserData.EX_USERCODE);
                                        }
                                    }
                                }

                                bool receive_with_serials = false, receive_with_expiry_date = false, receive_with_lots = false;
                                if (convert.ToInt(Inbound_Item_Details.receive_with_serials) == 1)
                                {
                                    receive_with_serials = true;
                                }
                                if (convert.ToInt(Inbound_Item_Details.expiry_date_required) == 1)
                                {
                                    receive_with_expiry_date = true;
                                }
                                if (convert.ToInt(Inbound_Item_Details.receive_with_lots) == 1)
                                {
                                    receive_with_lots = true;
                                }
                                double SumReceivedQty = convert.ToFloat(_data.items.Sum(a => a.recvqty));
                                double ReceivedQty = (SumReceivedQty + convert.ToFloat(Inbound_Item_Details.QTY_REC));
                                if (convert.ToFloat(Inbound_Item_Details.QTY) < convert.ToFloat(ReceivedQty)) throw new Exception("Cannot receive more than ordered quantity");

                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                executionStrategy.Execute(() =>
                                {
                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            if (Inbound_Item_Details != null)
                                            {
                                                if (_data.items.Count() > 0)
                                                {
                                                    if (receive_with_serials)
                                                    {
                                                        for (int i = 0; i < _data.items.Count(); i++)
                                                        {
                                                            string serialnum = "";
                                                            Inbound_Stock_Items inbound_Stock_Items = _data.items[i];
                                                            PartInventoryStockDetails _detail = new PartInventoryStockDetails();

                                                            if (inbound_Stock_Items.recvqty > 0)
                                                            {
                                                                if (inbound_Stock_Items.serialno != null && inbound_Stock_Items.serialno.Trim() != "")
                                                                {
                                                                    if (inbound_Stock_Items.serialno.Contains("*"))
                                                                    {
                                                                        string spartNum = inbound_Stock_Items.serialno.Split('*')[0].Trim();

                                                                        _detail.SERIAL = inbound_Stock_Items.serialno.Split('*')[1].Trim();
                                                                        serialnum = inbound_Stock_Items.serialno.Split('*')[1].Trim();
                                                                        PartInventoryStockDetails _stockdetail1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SERIAL.ToUpper() == serialnum.ToUpper() && a.SalesPartId == _linedata.SALESPARTID && a.customerid == Inbound_Item_Details.customerid).FirstOrDefault();
                                                                        if (_stockdetail1 != null && convert.ToString(_stockdetail1.SERIAL) != "") throw new Exception("Serial No. " + serialnum + " is already in use.");
                                                                    }
                                                                    else
                                                                    {
                                                                        _detail.SERIAL = inbound_Stock_Items.serialno.Trim();
                                                                        serialnum = inbound_Stock_Items.serialno.Trim();
                                                                        PartInventoryStockDetails _stockdetail1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SERIAL.ToUpper() == serialnum.ToUpper() && a.SalesPartId == _linedata.SALESPARTID && a.customerid == Inbound_Item_Details.customerid).FirstOrDefault();
                                                                        if (_stockdetail1 != null && convert.ToString(_stockdetail1.SERIAL) != "") throw new Exception("Serial No. " + serialnum + " is already in use.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get serialno for item no " + (i + 1));
                                                                }

                                                                if (receive_with_expiry_date)
                                                                {
                                                                    if (inbound_Stock_Items.expireDate != null && convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy") != DateTime.MinValue)
                                                                    {
                                                                        _detail.EXPIRY_DATE = convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy");
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Unable to get expire date for item no " + (i + 1));
                                                                    }
                                                                }

                                                                if (receive_with_lots)
                                                                {
                                                                    if (inbound_Stock_Items.batchno != null && inbound_Stock_Items.batchno != "")
                                                                    {
                                                                        _detail.BATCH = inbound_Stock_Items.batchno.Trim();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Unable to get batch no for item no " + (i + 1));
                                                                    }
                                                                }

                                                                if (inbound_Stock_Items.receivedDate != null && convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm") != DateTime.MinValue)
                                                                {
                                                                    _detail.LOGDATE = convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm");
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get received date for item no " + (i + 1));
                                                                }

                                                                if (inbound_Stock_Items.marking != null && inbound_Stock_Items.marking.Trim() != "")
                                                                {
                                                                    _detail.marking = inbound_Stock_Items.marking.Trim();
                                                                }
                                                                else
                                                                {
                                                                    //throw new Exception("Unable to get marking for item no " + (i + 1));
                                                                    _detail.marking = "";
                                                                }

                                                                if (inbound_Stock_Items.locationcode != null && inbound_Stock_Items.locationcode.Trim() != "")
                                                                {
                                                                    MAST_SALES_PARTS_LOCATION location = _lstPartLoaction.FirstOrDefault(x => inbound_Stock_Items.locationcode.Contains(x.PARTLOCATION_CODE));
                                                                    if (location != null)
                                                                    {
                                                                        _detail.PARTLOCATIONID = location.PARTLOCATIONID;
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Unable to get arriving location  for item no " + (i + 1));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get arriving location code for item no " + (i + 1));
                                                                }

                                                                if (inbound_Stock_Items.stocktypeid != null && convert.ToInt(inbound_Stock_Items.stocktypeid) > 0)
                                                                {
                                                                    Mast_STOCK_TYPE stype = _lstStockType.FirstOrDefault(x => x.STOCK_TYPEID == inbound_Stock_Items.stocktypeid);
                                                                    if (stype != null)
                                                                    {
                                                                        _detail.stock_typeid = stype.STOCK_TYPEID;
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Unable to get stock type  for item no " + (i + 1));
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get stock type  for item no " + (i + 1));
                                                                }



                                                                PartInventoryStockDetails _stockdetail = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SERIAL.ToUpper() == serialnum.ToUpper() && a.SalesPartId == Inbound_Item_Details.SALESPARTID).FirstOrDefault();
                                                                if (_stockdetail != null && convert.ToString(_stockdetail.SERIAL) != "") throw new Exception("Serial No. " + _detail.SERIAL + " is already in use for this Part");
                                                                _detail.CREATED_DATE = DateTime.Now;
                                                                _detail.UPDATED_DATE = DateTime.Now;
                                                                if (inbound_Stock_Items.expireDate != null && convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy") != DateTime.MinValue)
                                                                {
                                                                    _detail.EXPIRY_DATE = convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy");
                                                                }
                                                                if (inbound_Stock_Items.receivedDate != null && convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm") != DateTime.MinValue)
                                                                {
                                                                    _detail.LOGDATE = DateTime.Now;
                                                                    _detail.DATE_IN = convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm");
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get received date");
                                                                }
                                                                _detail.QUANTITY = inbound_Stock_Items.recvqty;
                                                                _detail.OrderId = Inbound_Item_Details.ORDERID;
                                                                _detail.UOM = Inbound_Item_Details.UOM;
                                                                _detail.SalesPartId = Inbound_Item_Details.SALESPARTID;
                                                                _detail.SITEID = Inbound_Item_Details.siteid;
                                                                _detail.internallineid = Inbound_Item_Details.INTERNALLINEID;
                                                                _detail.customerid = Inbound_Item_Details.customerid;
                                                                _detail.M3 = (Inbound_Item_Details.m3 * convert.ToFloat(_detail.QUANTITY));
                                                                _detail.weight = _partDetails.weight;
                                                                _detail.dimension = convert.ToFloat(_partDetails.height) * convert.ToFloat(_partDetails.width) * convert.ToFloat(_partDetails.length);
                                                                if (_detail.grn_exported != 2)
                                                                {
                                                                    _detail.grn_exported = 1;
                                                                }
                                                                _dbContext.PART_INVENTORY_STOCK_DETAILS.Add(_detail);
                                                                int Updates = _dbContext.SaveChanges();
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Inbound_Stock_Items inbound_Stock_Items = _data.items[0];
                                                        PartInventoryStockDetails _detail1 = new PartInventoryStockDetails();
                                                        if (inbound_Stock_Items.recvqty > 0)
                                                        {
                                                            if (convert.ToString(inbound_Stock_Items.locationcode).Trim() == "")
                                                            {
                                                                throw new Exception("Please fill in arriving location.");
                                                            }
                                                            else
                                                            {
                                                                MAST_SALES_PARTS_LOCATION location = _lstPartLoaction.FirstOrDefault(x => inbound_Stock_Items.locationcode.Contains(x.PARTLOCATION_CODE));
                                                                if (location != null)
                                                                {
                                                                    _detail1.PARTLOCATIONID = location.PARTLOCATIONID;
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Please fill in arriving location.");
                                                                }
                                                            }

                                                            if (convert.ToInt(Inbound_Item_Details.expiry_date_required) == 1 && inbound_Stock_Items.expireDate == null) throw new Exception("Expiry date is required for this part. Please fill in Expiry Date.");
                                                            if (convert.ToInt(Inbound_Item_Details.receive_with_lots) == 1 && convert.ToString(inbound_Stock_Items.batchno) == "") throw new Exception("Batch/Lot No. is required for this part. Please fill in Lot/Batch.");
                                                            if (convert.ToInt(inbound_Stock_Items.stocktypeid) == 0)
                                                            {
                                                                throw new Exception("Please fill in Stock Type.");
                                                            }
                                                            else
                                                            {
                                                                Mast_STOCK_TYPE stype = _lstStockType.FirstOrDefault(x => x.STOCK_TYPEID == inbound_Stock_Items.stocktypeid);
                                                                if (stype != null)
                                                                {
                                                                    _detail1.stock_typeid = stype.STOCK_TYPEID;
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Please fill in Stock Type.");
                                                                }
                                                            }

                                                            double _remQty = convert.ToFloat(inbound_Stock_Items.recvqty);
                                                            _detail1.LOGDATE = DateTime.Now;
                                                            if (receive_with_lots)
                                                            {
                                                                if (inbound_Stock_Items.batchno != null && inbound_Stock_Items.batchno != "")
                                                                {
                                                                    _detail1.BATCH = convert.ToString(inbound_Stock_Items.batchno);
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get batch no");
                                                                }
                                                            }

                                                            if (inbound_Stock_Items.marking != null && inbound_Stock_Items.marking != "")
                                                            {
                                                                _detail1.marking = convert.ToString(inbound_Stock_Items.marking);
                                                            }
                                                            else
                                                            {
                                                                _detail1.marking = "";
                                                                //throw new Exception("Unable to get marking");
                                                            }

                                                            if (receive_with_expiry_date)
                                                            {
                                                                if (inbound_Stock_Items.expireDate != null && convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy") != DateTime.MinValue)
                                                                {
                                                                    _detail1.EXPIRY_DATE = convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy");
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get expire date");
                                                                }
                                                            }

                                                            if (inbound_Stock_Items.receivedDate != null && convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm") != DateTime.MinValue)
                                                            {
                                                                _detail1.LOGDATE = DateTime.Now;
                                                                _detail1.DATE_IN = convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm");
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("Unable to get received date");
                                                            }
                                                            while (_remQty > 0)
                                                            {
                                                                PartInventoryStockDetails _detail = new PartInventoryStockDetails();
                                                                _detail.SalesPartId = Inbound_Item_Details.SALESPARTID;
                                                                _detail.LOGDATE = _detail1.LOGDATE;
                                                                _detail.QUANTITY = 1;
                                                                _detail.UOM = Inbound_Item_Details.UOM;
                                                                _detail.PARTLOCATIONID = _detail1.PARTLOCATIONID;
                                                                _detail.CREATED_DATE = DateTime.Now;
                                                                _detail.UPDATED_DATE = DateTime.Now;
                                                                _detail.SITEID = Inbound_Item_Details.siteid;
                                                                _detail.OrderId = Inbound_Item_Details.ORDERID;
                                                                _detail.DATE_IN = _detail1.DATE_IN;
                                                                _detail.EXPIRY_DATE = _detail1.EXPIRY_DATE;
                                                                _detail.SERIAL = _detail1.SERIAL;
                                                                _detail.BATCH = _detail1.BATCH;
                                                                _detail.marking = _detail1.marking;

                                                                _detail.internallineid = Inbound_Item_Details.INTERNALLINEID;
                                                                _detail.customerid = InternalOrder.CUSTOMERID;
                                                                _detail.stock_typeid = _detail1.stock_typeid;
                                                                _detail.M3 = Inbound_Item_Details.m3;
                                                                _detail.weight = _partDetails.weight;
                                                                _detail.dimension = convert.ToFloat(_partDetails.height) * convert.ToFloat(_partDetails.width) * convert.ToFloat(_partDetails.length);
                                                                if (_detail.grn_exported != 2)
                                                                {
                                                                    _detail.grn_exported = 1;
                                                                }

                                                                _dbContext.PART_INVENTORY_STOCK_DETAILS.Add(_detail);
                                                                int Updates = _dbContext.SaveChanges();
                                                                _remQty = _remQty - 1;

                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Recieved items cannot be zero.");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to received items.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Error on Update_Inbound_Stock as unable to get INTERNAL_ORDER_LINE_Details for InterOrderLineId : " + _data.internallineid);
                                            }
                                            UpdatePartStock(_lstPartLoaction, Inbound_Item_Details, convert.ToInt(InternalOrder.CUSTOMERID));
                                            UpdateInboundReceivedQty(_linedata);
                                            dbContextTransaction.Commit();

                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Register Inbound Receipts for Inbound Order No : " + InternalOrder.INTERNAL_ORDER_NO + " and Part No : " + _linedata.PARTNO + " form Inbound Order.");
                                            CommonFunction.SetAudit("Update_Inbound_Stock_Inbulk", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Register Inbound Receipts for Inbound Order No : " + InternalOrder.INTERNAL_ORDER_NO + " and Part No : " + _linedata.PARTNO + " form Inbound Order.", "");

                                        }
                                        catch (Exception ex)
                                        {
                                            dbContextTransaction.Rollback();
                                            throw ex;
                                        }
                                    }
                                });
                                Inbound_Details_Data _data1 = new Inbound_Details_Data();
                                _data1.UserId = _data.UserId;
                                _data1.internallineid = _data.internallineid;
                                _modal = Get_Inbound_Details(_data1);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Update_Inbound_Stock ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Update_Inbound_Stock", "Error", "", "Error Update_Inbound_Stock - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Update_Inbound_Stock stopped successfully.");
            }
        }

        private void UpdateInboundReceivedQty(INTERNAL_ORDER_LINE _linedata)
        {
            INTERNAL_ORDER_LINE _linedata1 = _linedata;
            // INTERNAL_ORDER_LINE _linedata = _dbContext.INTERNAL_ORDER_LINE.Find(V_INTERNAL_ORDER_LINE.INTERNALLINEID);
            List<PartInventoryStockDetails> _stockdetaillist1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.internallineid == _linedata.INTERNALLINEID).ToList();
            if (_stockdetaillist1 != null && _stockdetaillist1.Count > 0)
            {
                var Rec_Qty = _stockdetaillist1.Sum(a => convert.ToFloat(a.QUANTITY));
                _linedata.QTY_REC = Rec_Qty;
                _linedata.UPDATED_DATE = DateTime.Now;
                //_dbContext.INTERNAL_ORDER_LINE.Update(_linedata);
                _dbContext.Entry(_linedata1).CurrentValues.SetValues(_linedata);
                _dbContext.SaveChanges();
            }
            else
            {
                throw new Exception("Unable to get Parts stock details.");
            }
        }

        private void UpdatePartStock(List<MAST_SALES_PARTS_LOCATION> _location, V_INTERNAL_ORDER_LINE V_INTERNAL_ORDER_LINE, int Customerid)
        {
            // List<MAST_SALES_PARTS_LOCATION> _location = _dbContext.MAST_SALES_PARTS_LOCATION.ToList();
            List<PartInventoryStockDetails> _lstPART_INVENTORY_STOCK_DETAILS = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == V_INTERNAL_ORDER_LINE.SALESPARTID && a.SITEID == V_INTERNAL_ORDER_LINE.siteid && a.DATE_OUT == null && a.customerid == Customerid).ToList();
            foreach (MAST_SALES_PARTS_LOCATION location in _location)
            {
                var inventorylist = _lstPART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == V_INTERNAL_ORDER_LINE.SALESPARTID && a.SITEID == V_INTERNAL_ORDER_LINE.siteid && a.PARTLOCATIONID == location.PARTLOCATIONID && a.DATE_OUT == null && a.customerid == Customerid).ToList();
                if (inventorylist != null)
                {
                    var locationstock = inventorylist.Sum(a => convert.ToFloat(a.QUANTITY));
                    if (convert.ToFloat(locationstock) > 0)
                    {
                        List<PartInventoryStock> _lststock = _dbContext.PART_INVENTORY_STOCK.Where(a => a.SalesPartId == V_INTERNAL_ORDER_LINE.SALESPARTID && a.SITEID == V_INTERNAL_ORDER_LINE.siteid && a.PARTLOCATIONID == location.PARTLOCATIONID && a.customerid == Customerid).ToList();
                        PartInventoryStock _stock;
                        PartInventoryStock _stock1 = null;
                        if (_lststock == null || (_lststock != null && _lststock.Count == 0))
                        {
                            _stock = new PartInventoryStock();
                            _stock.CREATED_DATE = DateTime.Now;
                            _stock.UPDATED_DATE = DateTime.Now;
                        }
                        else
                        {
                            _stock = _lststock[0];
                            _stock1 = _lststock[0];
                            _stock.UPDATED_DATE = DateTime.Now;
                        }
                        _stock.QTY_IN_HAND = convert.ToFloat(locationstock);
                        double _m3 = convert.ToFloat(V_INTERNAL_ORDER_LINE.m3 == null ? 0 : V_INTERNAL_ORDER_LINE.m3);
                        _stock.M3 = convert.ToFloat(_stock.QTY_IN_HAND * _m3);
                        _stock.SalesPartId = V_INTERNAL_ORDER_LINE.SALESPARTID;
                        _stock.SITEID = V_INTERNAL_ORDER_LINE.siteid;
                        _stock.PARTLOCATIONID = location.PARTLOCATIONID;
                        _stock.customerid = Customerid;
                        int changes = -1;
                        if (_stock.PARTSTOCKID == 0)
                        {
                            _dbContext.PART_INVENTORY_STOCK.Add(_stock);
                        }
                        else
                        {
                            _dbContext.Entry(_stock1).CurrentValues.SetValues(_stock);
                        }
                        changes = _dbContext.SaveChanges();
                        if (changes <= 0) { throw new Exception("Unable to update stock for location " + location.PARTLOCATION_CODE + "-" + location.PARTLOCATION_DESCR); }
                    }
                }
            }
        }

        #endregion

        #region Inbound Order BulkEntries

        [HttpPost]
        [Route("Inbound_List_WMS_InBulk")]
        public IActionResult Inbound_List_WMS_InBulk(Inbound_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_List_Filter _modal = new Inbound_List_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Inbound_List_WMS_InBulk");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Inbound List");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                _modal.Mast_Site = LstSites;
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                _modal.Mast_ORDER_CODE = _dbContext.Mast_ORDER_CODE.Select(x => new Mast_ORDER_CODE
                                {
                                    order_code_id = x.order_code_id,
                                    description = x.order_code + " - " + x.description,
                                    order_code = x.order_code
                                }).ToList();
                                _modal.Customers = _dbContext.Customers.Where(x => x.Customer_Type.ToUpper() == "CUSTOMER").Select(x => new CustomersFilter
                                {
                                    Customer_ID = x.Customer_ID,
                                    Customer_Name = x.Customer_Code + " - " + x.Customer_Name
                                }).ToList();
                                Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                                List<V_INTERNAL_ORDER_LINE> lstdata = (List<V_INTERNAL_ORDER_LINE>)_dbContext.V_INTERNAL_ORDER_LINE.Where(a => a.ITEM_STATUS == _status.statusid && (a.QTY_REC == null || (a.QTY > a.QTY_REC)) && lstUserSite.Contains((int)a.siteid)).ToList();

                                //List<CUSTOMERS_PART_LINK> lstCustPartsLink = (List<CUSTOMERS_PART_LINK>)_dbContext.CUSTOMERS_PART_LINK.ToList();

                                //var leftJoinQuery = from inbound in lstInbound
                                //                    join custParts in lstCustPartsLink
                                //                    on inbound.customerid equals custParts.Customer_ID
                                //                    into matchingcustParts
                                //                    from cInboundParts in matchingcustParts.Where(x => x.SalesPartId == inbound.SALESPARTID).DefaultIfEmpty()
                                //                    select new V_Internal_ORDER_LINE_Customer_Parts
                                //                    {
                                //                        INTERNALLINEID = inbound.INTERNALLINEID,
                                //                        ORDERID = inbound.ORDERID,
                                //                        LINENO = inbound.LINENO,
                                //                        RELEASENO = inbound.RELEASENO,
                                //                        PARTNO = inbound.PARTNO,
                                //                        PARTNAME = inbound.PARTNAME,
                                //                        UOM = inbound.UOM,
                                //                        QTY = inbound.QTY,
                                //                        QTY_REC = inbound.QTY_REC,
                                //                        ITEM_STATUS = inbound.ITEM_STATUS,
                                //                        SALESPARTID = inbound.SALESPARTID,
                                //                        statusid = inbound.statusid,
                                //                        STATUS_TEXT = inbound.STATUS_TEXT,
                                //                        ORDER_CODE_ID = inbound.ORDER_CODE_ID,
                                //                        order_code = inbound.order_code,
                                //                        Description = inbound.Description,
                                //                        site_code = inbound.site_code,
                                //                        internal_order_no = inbound.internal_order_no,
                                //                        siteid = inbound.siteid,
                                //                        customerid = inbound.customerid,
                                //                        customer_name = inbound.customer_name,
                                //                        CUST_PART_NO = cInboundParts != null ? cInboundParts.CUST_PART_NO : "",
                                //                        CUST_PART_DESC = cInboundParts != null ? cInboundParts.CUST_PART_DESC : "",
                                //                        BARCODE_IDENTIFICATION = cInboundParts != null ? cInboundParts.BARCODE_IDENTIFICATION : ""
                                //                    };
                                // List<V_Internal_ORDER_LINE_Customer_Parts> lstdata = (List<V_Internal_ORDER_LINE_Customer_Parts>)leftJoinQuery.ToList();

                                if (lstdata.Count() > 0)
                                {
                                    if (convert.ToInt(_data.SiteId) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.siteid == _data.SiteId).ToList();
                                    }
                                    if (convert.ToInt(_data.customerid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.customerid == _data.customerid).ToList();
                                    }
                                    if (convert.ToInt(_data.SALESPARTID) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.SALESPARTID == _data.SALESPARTID).ToList();
                                    }
                                    if (convert.ToInt(_data.order_code_id) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.ORDER_CODE_ID == _data.order_code_id).ToList();
                                    }
                                    if (convert.ToString(_data.CUST_PART_NO).Trim() != "")
                                    {
                                        List<V_INTERNAL_ORDER_LINE> barcodeIdntfy = new List<V_INTERNAL_ORDER_LINE>();
                                        barcodeIdntfy = lstdata.Where(x => convert.ToString(x.CUST_PART_NO).Trim() != null && convert.ToString(x.CUST_PART_NO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.CUST_PART_NO).Trim()) == true).ToList();
                                        if (barcodeIdntfy.Count() == 0)
                                        {
                                            barcodeIdntfy = lstdata.Where(x => convert.ToString(x.PARTNO).Trim() != null && convert.ToString(x.PARTNO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.PARTNO).Trim()) == true).ToList();
                                        }
                                        lstdata = barcodeIdntfy;
                                    }
                                    if (convert.ToString(_data.OrderNo).Trim() != "")
                                    {
                                        lstdata = lstdata.Where(x => convert.ToString(x.internal_order_no).Trim() == convert.ToString(_data.OrderNo).Trim()).ToList();
                                    }
                                }

                                List<Internal_Order_WMS> _LstInternalOrders = lstdata.Select(x => new Internal_Order_WMS
                                {
                                    internalorderid = x.ORDERID,
                                    internal_order_no = x.internal_order_no,
                                    order_code_id = x.ORDER_CODE_ID,
                                    order_code = x.order_code,
                                    description = x.Description,
                                    customerid = x.customerid,
                                    customer_name = x.customer_name,
                                    siteid = x.siteid,
                                    site_name = x.site_code

                                }).Distinct(new TargetClassComparer()).ToList();
                                _modal.INTERNAL_ORDERS = _LstInternalOrders;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Inbound_Order_Items_WMS_InBulk ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Inbound_Order_Items_WMS_InBulk", "Error", "", "Error Inbound_Order_Items_WMS_InBulk - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Inbound_Order_Items_WMS_InBulk stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Inbound_Order_Items_WMS_InBulk")]
        public IActionResult Inbound_Order_Items_WMS_InBulk(Inbound_Order_Item _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_Item_Filter _modal = new Inbound_Item_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Inbound_Order_Items_WMS_InBulk");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (convert.ToInt(_data.order_id) == 0)
                            {
                                return NotFound("Unable to get Order Details : " + _data.order_id);
                            }
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Inbound_Order_Items_WMS for Order Details : " + _data.order_id);

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                //List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                //_modal.Mast_Site = LstSites;
                                //_modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                //_modal.Mast_ORDER_CODE = _dbContext.Mast_ORDER_CODE.ToList();
                                //_modal.Customers = _dbContext.Customers.Where(x => x.Customer_Type.ToUpper() == "CUSTOMER").Select(x => new CustomersFilter
                                //{
                                //    Customer_ID = x.Customer_ID,
                                //    Customer_Name = x.Customer_Name,
                                //    Customer_Code = x.Customer_Code
                                //}).ToList();
                                Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                                List<V_INTERNAL_ORDER_LINE> lstdata = (List<V_INTERNAL_ORDER_LINE>)_dbContext.V_INTERNAL_ORDER_LINE.Where(a => a.ITEM_STATUS == _status.statusid && (a.QTY_REC == null || (a.QTY > a.QTY_REC)) && lstUserSite.Contains((int)a.siteid)).ToList();

                                if (lstdata.Count() > 0)
                                {
                                    if (convert.ToInt(_data.order_id) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.ORDERID == _data.order_id).ToList();
                                    }
                                    if (convert.ToString(_data.CUST_PART_NO).Trim() != "")
                                    {
                                        List<V_INTERNAL_ORDER_LINE> barcodeIdntfy = new List<V_INTERNAL_ORDER_LINE>();
                                        barcodeIdntfy = lstdata.Where(x => convert.ToString(x.CUST_PART_NO).Trim() != null && convert.ToString(x.CUST_PART_NO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.CUST_PART_NO).Trim()) == true).ToList();
                                        if (barcodeIdntfy.Count() == 0)
                                        {
                                            barcodeIdntfy = lstdata.Where(x => convert.ToString(x.PARTNO).Trim() != null && convert.ToString(x.PARTNO).Trim() != "" && _data.CUST_PART_NO.Trim().Contains(convert.ToString(x.PARTNO).Trim()) == true).ToList();
                                        }
                                        lstdata = barcodeIdntfy;
                                    }
                                }
                                _modal.INTERNAL_ORDER_LINES = lstdata;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Inbound_Order_Items_WMS_InBulk ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Inbound_Order_Items_WMS_InBulk", "Error", "", "Error Inbound_Order_Items_WMS_InBulk - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Inbound_Order_Items_WMS_InBulk stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Inbound_Details_WMS_InBulk")]
        public IActionResult Inbound_Details_WMS_InBulk(Inbound_Details_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_Line_Details _modal = new Inbound_Line_Details();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Inbound_Details_WMS_InBulk");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                _modal = Get_Inbound_Details_InBulk(_data);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Inbound_Details_WMS_InBulk ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Inbound_Details_WMS_InBulk", "Error", "", "Error Inbound_Details_WMS_InBulk - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Inbound_Details_WMS_InBulk stopped successfully.");
            }
        }

        private Inbound_Line_Details Get_Inbound_Details_InBulk(Inbound_Details_Data _data)
        {
            Inbound_Line_Details _modal = new Inbound_Line_Details();
            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
            {
                throw new Exception("Unable to get Userdata for Userid : " + _data.UserId);
            }
            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
            executionStrategy.Execute(() =>
            {
                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                {
                    MAST_SALES_PARTS_LOCATION _arrivalLocation = null;
                    var SiteId = GetLinkedSites(_UserData);
                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                    List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                    _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                    _modal.Mast_Stock_type = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                    {
                        STOCK_TYPEID = x.STOCK_TYPEID,
                        STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                    }).ToList();
                    Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                    V_INTERNAL_ORDER_LINE Inbound_Item_Details = (V_INTERNAL_ORDER_LINE)_dbContext.V_INTERNAL_ORDER_LINE.Find(_data.internallineid);
                    INTERNAL_ORDER_LINE Item_Details = (INTERNAL_ORDER_LINE)_dbContext.INTERNAL_ORDER_LINE.Find(_data.internallineid);
                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == Inbound_Item_Details.siteid && x.SiteConfig_ParamId == 1013);
                    if (siteConfig != null)
                    {
                        _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                        _modal.Arrival_Location = _arrivalLocation;
                    }

                    INTERNAL_ORDER_LINE Item_DetailsExt = Item_Details;

                    try
                    {
                        if (Item_Details.Locked_UserID != null && Item_Details.Locked_UserID == _data.UserId)
                        {
                            Item_Details.Locked_UserID = _data.UserId;
                            Item_Details.Locked_Time = DateTime.Now;
                        }
                        else
                        {
                            if (Item_Details.Locked_UserID == null)
                            {
                                Item_Details.Locked_UserID = _data.UserId;
                                Item_Details.Locked_Time = DateTime.Now;
                            }
                            else
                            {
                                if (Item_Details.Locked_Time != null && ((DateTime.Now - convert.ToDateTime(Item_Details.Locked_Time)).TotalMinutes >= 30))
                                {
                                    Item_Details.Locked_UserID = _data.UserId;
                                    Item_Details.Locked_Time = DateTime.Now;
                                }
                                else
                                {
                                    SM_EXTERNAL_USERS _LockUserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == Item_Details.Locked_UserID);
                                    throw new Exception("Item No : " + Item_Details.LINENO + " for Order No : " + Inbound_Item_Details.internal_order_no + " is Blocked by User : " + _LockUserData.EX_USERCODE);
                                }
                            }
                        }
                        _dbContext.INTERNAL_ORDER_LINE.Update(Item_Details);
                        _dbContext.SaveChanges();
                        dbContextTransaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        dbContextTransaction.Rollback();
                        throw ex; ;
                    }
                    _modal.V_INTERNAL_ORDER_LINE_Details = Inbound_Item_Details;
                }
            });
            return _modal;
        }

        [HttpPost]
        [Route("Update_Inbound_Stock_Inbulk")]
        public IActionResult Update_Inbound_Stock_Inbulk(Update_Inbound_Stock_Data_Inbulk _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Inbound_Line_Details _modal = new Inbound_Line_Details();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Update_Inbound_Stock_Inbulk");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {

                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Update_Inbound_Stock_Inbulk for InterOrderLineId : " + _data.internallineid);

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                _modal.Mast_Stock_type = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                                {
                                    STOCK_TYPEID = x.STOCK_TYPEID,
                                    STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                                }).ToList();
                                Mast_STATUSES _status = _dbContext.mast_statuses.Where(a => a.status_desc.ToLower() == "released").FirstOrDefault();
                                V_INTERNAL_ORDER_LINE Inbound_Item_Details = (V_INTERNAL_ORDER_LINE)_dbContext.V_INTERNAL_ORDER_LINE.Find(_data.internallineid);
                                INTERNAL_ORDERS InternalOrder = _dbContext.INTERNAL_ORDERS.Find(Inbound_Item_Details.ORDERID);

                                INTERNAL_ORDER_LINE _linedata = _dbContext.INTERNAL_ORDER_LINE.Find(Inbound_Item_Details.INTERNALLINEID);
                                List<PartInventoryStockDetails> _stockdetaillist = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.internallineid == Inbound_Item_Details.INTERNALLINEID).ToList();

                                List<MAST_SALES_PARTS_LOCATION> _lstPartLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.ToList();
                                List<Mast_STOCK_TYPE> _lstStockType = _dbContext.Mast_STOCK_TYPE.ToList();

                                List<PartInventoryStockDetails> _lstPART_INVENTORY_STOCK_DETAILS = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == Inbound_Item_Details.SALESPARTID && a.SITEID == Inbound_Item_Details.siteid && a.customerid == Inbound_Item_Details.customerid).ToList();
                                List<PartInventoryStock> _lstPART_INVENTORY_STOCK = _dbContext.PART_INVENTORY_STOCK.Where(a => a.SalesPartId == Inbound_Item_Details.SALESPARTID && a.SITEID == Inbound_Item_Details.siteid && a.customerid == Inbound_Item_Details.customerid).ToList();

                                salesparts _partDetails = _dbContext.SALES_PARTS.Find(Inbound_Item_Details.SALESPARTID);

                                if (_linedata.Locked_UserID != null && _linedata.Locked_UserID == _data.UserId)
                                {
                                    _linedata.Locked_UserID = _data.UserId;
                                    _linedata.Locked_Time = DateTime.Now;
                                }
                                else
                                {
                                    if (_linedata.Locked_UserID == null)
                                    {
                                        _linedata.Locked_UserID = _data.UserId;
                                        _linedata.Locked_Time = DateTime.Now;
                                    }
                                    else
                                    {
                                        if (_linedata.Locked_Time != null && ((DateTime.Now - convert.ToDateTime(_linedata.Locked_Time)).TotalMinutes >= 30))
                                        {
                                            _linedata.Locked_UserID = _data.UserId;
                                            _linedata.Locked_Time = DateTime.Now;
                                        }
                                        else
                                        {
                                            SM_EXTERNAL_USERS _LockUserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _linedata.Locked_UserID);
                                            throw new Exception("Item No : " + _linedata.LINENO + " for Order No : " + Inbound_Item_Details.internal_order_no + " is Blocked by User : " + _LockUserData.EX_USERCODE);
                                        }
                                    }
                                }

                                bool receive_with_serials = false, receive_with_expiry_date = false, receive_with_lots = false;
                                if (convert.ToInt(Inbound_Item_Details.receive_with_serials) == 1)
                                {
                                    receive_with_serials = true;
                                }
                                if (convert.ToInt(Inbound_Item_Details.expiry_date_required) == 1)
                                {
                                    receive_with_expiry_date = true;
                                }
                                if (convert.ToInt(Inbound_Item_Details.receive_with_lots) == 1)
                                {
                                    receive_with_lots = true;
                                }
                                double SumReceivedQty = convert.ToFloat(_data.items.Sum(a => a.recvqty));
                                double ReceivedQty = (SumReceivedQty + convert.ToFloat(Inbound_Item_Details.QTY_REC));
                                if (convert.ToFloat(Inbound_Item_Details.QTY) < convert.ToFloat(ReceivedQty)) throw new Exception("Cannot receive more than ordered quantity");

                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                executionStrategy.Execute(() =>
                                {
                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            if (Inbound_Item_Details != null)
                                            {
                                                if (_data.items.Count() > 0)
                                                {
                                                    if (receive_with_serials)
                                                    {
                                                        Inbound_Stock_Items_Inbulk inbound_Stock_Items = _data.items[0];
                                                        PartInventoryStockDetails _detail1 = new PartInventoryStockDetails();
                                                        if (inbound_Stock_Items.recvqty > 0)
                                                        {
                                                            if (convert.ToString(inbound_Stock_Items.locationcode).Trim() == "")
                                                            {
                                                                throw new Exception("Please provide arriving location.");
                                                            }
                                                            else
                                                            {
                                                                MAST_SALES_PARTS_LOCATION location = _lstPartLoaction.FirstOrDefault(x => inbound_Stock_Items.locationcode.Contains(x.PARTLOCATION_CODE));
                                                                if (location != null)
                                                                {
                                                                    _detail1.PARTLOCATIONID = location.PARTLOCATIONID;
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Please provide arriving location.");
                                                                }
                                                            }

                                                            //if (convert.ToInt(Inbound_Item_Details.expiry_date_required) == 1 && inbound_Stock_Items.expireDate == null) throw new Exception("Expiry date is required for this part. Please fill in Expiry Date.");
                                                            //if (convert.ToInt(Inbound_Item_Details.receive_with_lots) == 1 && convert.ToString(inbound_Stock_Items.batchno) == "") throw new Exception("Batch/Lot No. is required for this part. Please fill in Lot/Batch.");
                                                            //if (convert.ToInt(inbound_Stock_Items.stocktypeid) == 0)
                                                            //{
                                                            //    throw new Exception("Please fill in Stock Type.");
                                                            //}
                                                            //else
                                                            //{
                                                            //    Mast_STOCK_TYPE stype = _lstStockType.FirstOrDefault(x => x.STOCK_TYPEID == inbound_Stock_Items.stocktypeid);
                                                            //    if (stype != null)
                                                            //    {
                                                            //        _detail1.stock_typeid = stype.STOCK_TYPEID;
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        throw new Exception("Please fill in Stock Type.");
                                                            //    }
                                                            //}

                                                            double _remQty = convert.ToFloat(inbound_Stock_Items.recvqty);
                                                            _detail1.LOGDATE = DateTime.Now;
                                                            //if (receive_with_lots)
                                                            //{
                                                            //    if (inbound_Stock_Items.batchno != null && inbound_Stock_Items.batchno != "")
                                                            //    {
                                                            //        _detail1.BATCH = convert.ToString(inbound_Stock_Items.batchno);
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        throw new Exception("Unable to get batch no");
                                                            //    }
                                                            //}

                                                            //if (inbound_Stock_Items.marking != null && inbound_Stock_Items.marking != "")
                                                            //{
                                                            //    _detail1.marking = convert.ToString(inbound_Stock_Items.marking);
                                                            //}
                                                            //else
                                                            //{
                                                            //    throw new Exception("Unable to get marking");
                                                            //}

                                                            //if (receive_with_expiry_date)
                                                            //{
                                                            //    if (inbound_Stock_Items.expireDate != null && convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy") != DateTime.MinValue)
                                                            //    {
                                                            //        _detail1.EXPIRY_DATE = convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy");
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        throw new Exception("Unable to get expire date");
                                                            //    }
                                                            //}

                                                            if (inbound_Stock_Items.receivedDate != null && convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm") != DateTime.MinValue)
                                                            {
                                                                _detail1.LOGDATE = DateTime.Now;
                                                                _detail1.DATE_IN = convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm");
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("Unable to get received date");
                                                            }
                                                            while (_remQty > 0)
                                                            {
                                                                PartInventoryStockDetails _detail = new PartInventoryStockDetails();
                                                                _detail.SalesPartId = Inbound_Item_Details.SALESPARTID;
                                                                _detail.LOGDATE = _detail1.LOGDATE;
                                                                _detail.QUANTITY = 1;
                                                                _detail.UOM = Inbound_Item_Details.UOM;
                                                                _detail.PARTLOCATIONID = _detail1.PARTLOCATIONID;
                                                                _detail.CREATED_DATE = DateTime.Now;
                                                                _detail.UPDATED_DATE = DateTime.Now;
                                                                _detail.SITEID = Inbound_Item_Details.siteid;
                                                                _detail.OrderId = Inbound_Item_Details.ORDERID;
                                                                _detail.DATE_IN = _detail1.DATE_IN;

                                                                _detail.EXPIRY_DATE = null;
                                                                _detail.SERIAL = null;
                                                                _detail.BATCH = null;
                                                                _detail.marking = null;
                                                                _detail.stock_typeid = null;

                                                                _detail.internallineid = Inbound_Item_Details.INTERNALLINEID;
                                                                _detail.customerid = InternalOrder.CUSTOMERID;
                                                                _detail.M3 = Inbound_Item_Details.m3;
                                                                _detail.weight = _partDetails.weight;
                                                                _detail.dimension = convert.ToFloat(_partDetails.height) * convert.ToFloat(_partDetails.width) * convert.ToFloat(_partDetails.length);
                                                                //_detail.grn_exported = 1;
                                                                _detail.receive_with_bulk = 1;

                                                                _dbContext.PART_INVENTORY_STOCK_DETAILS.Add(_detail);
                                                                int Updates = _dbContext.SaveChanges();
                                                                _remQty = _remQty - 1;

                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Recieved items cannot be zero.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Inbound_Stock_Items_Inbulk inbound_Stock_Items = _data.items[0];
                                                        PartInventoryStockDetails _detail1 = new PartInventoryStockDetails();
                                                        if (inbound_Stock_Items.recvqty > 0)
                                                        {
                                                            if (convert.ToString(inbound_Stock_Items.locationcode).Trim() == "")
                                                            {
                                                                throw new Exception("Please provide arriving location.");
                                                            }
                                                            else
                                                            {
                                                                MAST_SALES_PARTS_LOCATION location = _lstPartLoaction.FirstOrDefault(x => inbound_Stock_Items.locationcode.Contains(x.PARTLOCATION_CODE));
                                                                if (location != null)
                                                                {
                                                                    _detail1.PARTLOCATIONID = location.PARTLOCATIONID;
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Please provide arriving location.");
                                                                }
                                                            }

                                                            //if (convert.ToInt(Inbound_Item_Details.expiry_date_required) == 1 && inbound_Stock_Items.expireDate == null) throw new Exception("Expiry date is required for this part. Please fill in Expiry Date.");
                                                            //if (convert.ToInt(Inbound_Item_Details.receive_with_lots) == 1 && convert.ToString(inbound_Stock_Items.batchno) == "") throw new Exception("Batch/Lot No. is required for this part. Please fill in Lot/Batch.");
                                                            //if (convert.ToInt(inbound_Stock_Items.stocktypeid) == 0)
                                                            //{
                                                            //    throw new Exception("Please fill in Stock Type.");
                                                            //}
                                                            //else
                                                            //{
                                                            //    Mast_STOCK_TYPE stype = _lstStockType.FirstOrDefault(x => x.STOCK_TYPEID == inbound_Stock_Items.stocktypeid);
                                                            //    if (stype != null)
                                                            //    {
                                                            //        _detail1.stock_typeid = stype.STOCK_TYPEID;
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        throw new Exception("Please fill in Stock Type.");
                                                            //    }
                                                            //}

                                                            double _remQty = convert.ToFloat(inbound_Stock_Items.recvqty);
                                                            _detail1.LOGDATE = DateTime.Now;
                                                            //if (receive_with_lots)
                                                            //{
                                                            //    if (inbound_Stock_Items.batchno != null && inbound_Stock_Items.batchno != "")
                                                            //    {
                                                            //        _detail1.BATCH = convert.ToString(inbound_Stock_Items.batchno);
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        throw new Exception("Unable to get batch no");
                                                            //    }
                                                            //}

                                                            //if (inbound_Stock_Items.marking != null && inbound_Stock_Items.marking != "")
                                                            //{
                                                            //    _detail1.marking = convert.ToString(inbound_Stock_Items.marking);
                                                            //}
                                                            //else
                                                            //{
                                                            //    throw new Exception("Unable to get marking");
                                                            //}

                                                            //if (receive_with_expiry_date)
                                                            //{
                                                            //    if (inbound_Stock_Items.expireDate != null && convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy") != DateTime.MinValue)
                                                            //    {
                                                            //        _detail1.EXPIRY_DATE = convert.ToDateTime(inbound_Stock_Items.expireDate, "dd/MM/yyyy");
                                                            //    }
                                                            //    else
                                                            //    {
                                                            //        throw new Exception("Unable to get expire date");
                                                            //    }
                                                            //}

                                                            if (inbound_Stock_Items.receivedDate != null && convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm") != DateTime.MinValue)
                                                            {
                                                                _detail1.LOGDATE = DateTime.Now;
                                                                _detail1.DATE_IN = convert.ToDateTime(inbound_Stock_Items.receivedDate, "dd/MM/yyyy HH:mm");
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("Unable to get received date");
                                                            }
                                                            while (_remQty > 0)
                                                            {
                                                                PartInventoryStockDetails _detail = new PartInventoryStockDetails();
                                                                _detail.SalesPartId = Inbound_Item_Details.SALESPARTID;
                                                                _detail.LOGDATE = _detail1.LOGDATE;
                                                                _detail.QUANTITY = 1;
                                                                _detail.UOM = Inbound_Item_Details.UOM;
                                                                _detail.PARTLOCATIONID = _detail1.PARTLOCATIONID;
                                                                _detail.CREATED_DATE = DateTime.Now;
                                                                _detail.UPDATED_DATE = DateTime.Now;
                                                                _detail.SITEID = Inbound_Item_Details.siteid;
                                                                _detail.OrderId = Inbound_Item_Details.ORDERID;
                                                                _detail.DATE_IN = _detail1.DATE_IN;

                                                                _detail.EXPIRY_DATE = null;
                                                                _detail.SERIAL = null;
                                                                _detail.BATCH = null;
                                                                _detail.marking = null;
                                                                _detail.stock_typeid = null;

                                                                _detail.internallineid = Inbound_Item_Details.INTERNALLINEID;
                                                                _detail.customerid = InternalOrder.CUSTOMERID;
                                                                _detail.M3 = Inbound_Item_Details.m3;
                                                                _detail.weight = _partDetails.weight;
                                                                _detail.dimension = convert.ToFloat(_partDetails.height) * convert.ToFloat(_partDetails.width) * convert.ToFloat(_partDetails.length);
                                                                //_detail.grn_exported = 1;
                                                                _detail.receive_with_bulk = 1;
                                                                _dbContext.PART_INVENTORY_STOCK_DETAILS.Add(_detail);
                                                                int Updates = _dbContext.SaveChanges();
                                                                _remQty = _remQty - 1;

                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Recieved items cannot be zero.");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to received items.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Error on Update_Inbound_Stock_Inbulk as unable to get INTERNAL_ORDER_LINE_Details for InterOrderLineId : " + _data.internallineid);
                                            }
                                            UpdatePartStock(_lstPartLoaction, Inbound_Item_Details, convert.ToInt(InternalOrder.CUSTOMERID));
                                            UpdateInboundReceivedQty(_linedata);

                                            dbContextTransaction.Commit();
                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have updated Inbulk for Inbound Order No : " + InternalOrder.INTERNAL_ORDER_NO + " and Part No : " + _linedata.PARTNO + " form Receive In Bulk.");
                                            CommonFunction.SetAudit("Update_Inbound_Stock_Inbulk", "Updated", "", "User : " + _UserData.EX_USERNAME + " have updated Inbulk for Inbound Order No : " + InternalOrder.INTERNAL_ORDER_NO + " and Part No : " + _linedata.PARTNO + " form Receive In Bulk.", "");

                                        }
                                        catch (Exception ex)
                                        {
                                            dbContextTransaction.Rollback();
                                            throw ex;
                                        }
                                    }
                                });
                                Inbound_Details_Data _data1 = new Inbound_Details_Data();
                                _data1.UserId = _data.UserId;
                                _data1.internallineid = _data.internallineid;
                                _modal = Get_Inbound_Details(_data1);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Update_Inbound_Stock_Inbulk ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Update_Inbound_Stock_Inbulk", "Error", "", "Error Update_Inbound_Stock_Inbulk - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Update_Inbound_Stock_Inbulk stopped successfully.");
            }
        }

        #endregion

        #region Outbound Orders Pick List

        [HttpPost]
        [Route("Outbound_List_WMS")]
        public IActionResult Outbound_List_WMS(Outbound_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Outbound_List_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Outbound List");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<V_SHIPMENT_LINES> _vLine = new List<V_SHIPMENT_LINES>();
                                _modal.Mast_Site = LstSites;
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                _modal.List_Status = _dbContext.mast_statuses.Where(x => x.status_desc.ToLower() == "picked" || x.status_desc.ToLower() == "released" || x.status_desc.ToLower() == "reserved").Select(x => new Mast_STATUSES
                                {
                                    statusid = x.statusid,
                                    status_desc = x.status_desc
                                }).ToList();
                                _modal.Customers = _dbContext.Customers.Select(x => new CustomersFilter
                                {
                                    Customer_ID = x.Customer_ID,
                                    Customer_Name = x.Customer_Type.ToUpper() + " - " + x.Customer_Code + " - " + x.Customer_Name
                                }).ToList();

                                int?[] lst_tripShpimentid = _dbContext.V_TRIP_PLAN.Where(x => x.shipmentid != null).Select(x => x.shipmentid).Distinct().ToArray();

                                int?[] DistictIds = _dbContext.Shipment_Lines.Where(x => (x.Picked_Qty == 0 || x.Reserved_Qty >= x.Picked_Qty || x.Connected_SourceQty >= x.Picked_Qty) && lst_tripShpimentid.Contains(x.ShipmentId) == false).Select(x => x.ShipmentId).Distinct().ToArray();

                                List<V_SHIPMENT> lstdata;

                                _vLine = _dbContext.V_Shipment_Lines.Where(x => (x.Picked_Qty == 0 || x.Reserved_Qty >= x.Picked_Qty || x.Connected_SourceQty >= x.Picked_Qty) && lst_tripShpimentid.Contains(x.ShipmentId) == false).ToList();

                                int?[] DistictIds1 = _vLine.Select(x => x.ShipmentId).Distinct().ToArray();
                                List<V_SHIPMENT> AllDistinctLines1 = new List<V_SHIPMENT>();
                                for (int i = 0; i < DistictIds1.Count(); i++)
                                {

                                    int? EachID = DistictIds[i];
                                    V_SHIPMENT shipmentData = _dbContext.V_Shipment.FirstOrDefault(x => x.ShipmentId == EachID && x.Shipment_StatusId != 10);
                                    if (shipmentData != null)
                                    {
                                        AllDistinctLines1.Add(shipmentData);
                                    }

                                }
                                lstdata = AllDistinctLines1.Where(x => lstUserSite.Contains(convert.ToInt(x.SiteId))).ToList();

                                if (lstdata.Count() > 0)
                                {
                                    if (convert.ToInt(_data.siteid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.SiteId == _data.siteid).ToList();
                                    }
                                    if (convert.ToInt(_data.customerid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.Customer_ID == _data.customerid).ToList();
                                    }
                                    if (convert.ToInt(_data.salespartid) > 0)
                                    {
                                        List<int?> sPartShipment = _vLine.Where(x => x.SalesPartId == _data.salespartid).Select(x => x.ShipmentId).Distinct().ToList();
                                        if (sPartShipment.Count() > 0)
                                        {
                                            lstdata = lstdata.Where(x => sPartShipment.Contains(x.ShipmentId)).ToList();
                                        }
                                        else
                                        {
                                            lstdata = lstdata.Where(x => x.ShipmentId == 0).ToList();
                                        }
                                    }
                                    if (convert.ToString(_data.scannedpartno).Trim() != "")
                                    {
                                        List<int?> sPartShipment = _vLine.Where(x => convert.ToString(x.Source_PartNo).Trim() != null && convert.ToString(x.Source_PartNo).Trim() != "" && _data.scannedpartno.Trim() == convert.ToString(x.Source_PartNo).Trim()).Select(x => x.ShipmentId).Distinct().ToList();
                                        if (sPartShipment.Count() > 0)
                                        {
                                            if (convert.ToString(_data.scannedserialno).Trim() != "")
                                            {
                                                List<int> lstShipmentLineIds = _vLine.Where(x => convert.ToString(x.Source_PartNo).Trim() != null && convert.ToString(x.Source_PartNo).Trim() != "" && _data.scannedpartno.Trim() == convert.ToString(x.Source_PartNo).Trim()).Select(x => x.ShipmentLineId).Distinct().ToList();
                                                if (_dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => lstShipmentLineIds.Contains(x.shipmentlineid.GetValueOrDefault()) && x.SERIAL == convert.ToString(_data.scannedserialno).Trim()).ToList().Count() > 0)
                                                {
                                                    lstdata = lstdata.Where(x => sPartShipment.Contains(x.ShipmentId)).ToList();
                                                }
                                            }
                                            else
                                            {
                                                lstdata = lstdata.Where(x => sPartShipment.Contains(x.ShipmentId)).ToList();
                                            }
                                        }
                                        else
                                        {
                                            lstdata = lstdata.Where(x => x.ShipmentId == 0).ToList();
                                        }
                                    }
                                    if (convert.ToString(_data.orderno).Trim() != "")
                                    {
                                        lstdata = lstdata.Where(x => convert.ToString(x.Order_No).Trim() == convert.ToString(_data.orderno).Trim()).ToList();
                                    }
                                    if (convert.ToInt(_data.statusid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.Shipment_StatusId == convert.ToInt(_data.statusid)).ToList();
                                    }
                                }
                                List<Outbound_Order_WMS> _LstOutboundOrders = lstdata.Select(x => new Outbound_Order_WMS
                                {
                                    shipmentid = x.ShipmentId,
                                    order_no = x.Order_No,
                                    receiver_type = x.customer_type,
                                    status = x.Shipment_Status,
                                    customerid = x.Customer_ID,
                                    customer_name = x.Recv_Code + "-" + x.Recv_Name,
                                    siteid = x.SiteId,
                                    site_name = x.Site_Name,
                                    created_date = convert.ToDateTime(x.Created_Date).ToString("dd/MM/yyyy")

                                }).Distinct(new TargetClassComparer2()).ToList();
                                _modal.Outbound_orders = _LstOutboundOrders;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Outbound_List_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Outbound_List_WMS", "Error", "", "Error Outbound_List_WMS - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Outbound_List_WMS stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Outbound_Order_Items_WMS")]
        public IActionResult Outbound_Order_Items_WMS(Outbound_Order_Item _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_Line_Details PicklistModel = new Outbound_Line_Details();
                Inbound_Item_Filter _modal = new Inbound_Item_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Outbound_Order_Items_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (convert.ToInt(_data.shipmentid) == 0)
                            {
                                return NotFound("Unable to get Order Details : " + _data.shipmentid);
                            }
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Outbound_Order_Items_WMS for Shipment Details : " + _data.shipmentid);

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<V_SHIPMENT_LINES> _vLine = new List<V_SHIPMENT_LINES>();
                                int companyID = convert.ToInt(_UserData.COMPANYID);

                                if (convert.ToInt(_data.shipmentid) > 0)
                                {
                                    int ShipmentID = convert.ToInt(convert.ToInt(_data.shipmentid));


                                    //PicklistModel.Mast_Site = LstSites;
                                    PicklistModel.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                    PicklistModel.V_shipment = _dbContext.V_Shipment.Find(ShipmentID);
                                    PicklistModel.SHIPMENT_LINES = _dbContext.V_Shipment_Lines.Where(x => x.ShipmentId == ShipmentID).ToList();
                                    //List<int?> LstSalesPartId = PicklistModel.SHIPMENT_LINES.Select(x => x.SalesPartId).Distinct().ToList();
                                    var sPicked_Qty = PicklistModel.SHIPMENT_LINES.Sum(x => x.Picked_Qty);
                                    //PicklistModel.Mast_Site = _dbContext.Mast_Site.Where(x => x.COMPANYID == companyID && lstUserSite.Contains((int)x.SiteId));
                                    //PicklistModel.Mast_Status = _dbContext.mast_statuses;
                                    //if (sPicked_Qty > 0)
                                    //{
                                    //    PicklistModel.V_PartInventoryStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.Shipmentid == ShipmentID).ToList();
                                    //    var LinesData = PicklistModel.V_PartInventoryStockDetails.GroupBy(x => new { x.SalesPartId, x.RECEIVE_WITH_SERIALS });
                                    //    V_PartInventoryStockDetails withoutSerial = new V_PartInventoryStockDetails();
                                    //    PicklistModel.WithoutSerial = new List<V_PartInventoryStockDetails>();
                                    //    PicklistModel.WithSerial = new List<V_PartInventoryStockDetails>();
                                    //    foreach (var EachGROUP in LinesData)
                                    //    {
                                    //        if (EachGROUP.Key.RECEIVE_WITH_SERIALS == 1)
                                    //        {

                                    //            foreach (var Eachline in EachGROUP)
                                    //            {
                                    //                PicklistModel.WithSerial.Add(Eachline);
                                    //            }
                                    //        }
                                    //        else
                                    //        {

                                    //            int PickedQTY = 0;
                                    //            foreach (var Eachline in EachGROUP)
                                    //            {
                                    //                withoutSerial = Eachline;
                                    //                if (Eachline.PICKED_QTY > 0)
                                    //                {
                                    //                    PickedQTY++;
                                    //                }
                                    //            }
                                    //            withoutSerial.PICKED_QTY = PickedQTY;
                                    //            withoutSerial.QUANTITY = EachGROUP.Count();
                                    //            PicklistModel.WithoutSerial.Add(withoutSerial);

                                    //        }
                                    //    }
                                    //    for (int i = 0; i < LinesData.Count(); i++)
                                    //    {
                                    //        var eachItem = LinesData.ToList();

                                    //    }
                                    //}
                                    //else
                                    //{
                                    //    List<V_PartInventoryStockDetails> lststockDetails = new List<V_PartInventoryStockDetails>();
                                    //    if (PicklistModel.SHIPMENT_LINES.Count() > 0)
                                    //    {
                                    //        foreach (V_SHIPMENT_LINES spLine in PicklistModel.SHIPMENT_LINES)
                                    //        {
                                    //            CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                    //            List<V_PartInventoryStockDetails> lststockDetails1 = (_dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.Shipmentid == null && x.customerid == _custOrder.CustomerId && x.SITEID == _custOrder.SiteId && x.SalesPartId == spLine.SalesPartId).ToList());

                                    //            for (int x = 0; x < lststockDetails1.Count(); x++)
                                    //            {
                                    //                V_PartInventoryStockDetails StockDetails = lststockDetails1[x];
                                    //                bool containsObject = lststockDetails.Any(p => p.PART_STOCK_DETAIL_ID == StockDetails.PART_STOCK_DETAIL_ID);
                                    //                if (!containsObject)
                                    //                {
                                    //                    lststockDetails.Add(StockDetails);
                                    //                }
                                    //            }
                                    //        }
                                    //        PicklistModel.V_PartInventoryStockDetails = lststockDetails;
                                    //        var LinesData = PicklistModel.V_PartInventoryStockDetails.GroupBy(x => new { x.SalesPartId, x.RECEIVE_WITH_SERIALS });
                                    //        V_PartInventoryStockDetails withoutSerial = new V_PartInventoryStockDetails();
                                    //        PicklistModel.WithoutSerial = new List<V_PartInventoryStockDetails>();
                                    //        PicklistModel.WithSerial = new List<V_PartInventoryStockDetails>();
                                    //        foreach (var EachGROUP in LinesData)
                                    //        {
                                    //            if (EachGROUP.Key.RECEIVE_WITH_SERIALS == 1)
                                    //            {

                                    //                foreach (var Eachline in EachGROUP)
                                    //                {
                                    //                    PicklistModel.WithSerial.Add(Eachline);
                                    //                }
                                    //            }
                                    //            else
                                    //            {

                                    //                int PickedQTY = 0;
                                    //                foreach (var Eachline in EachGROUP)
                                    //                {
                                    //                    withoutSerial = Eachline;
                                    //                    if (Eachline.PICKED_QTY > 0)
                                    //                    {
                                    //                        PickedQTY++;
                                    //                    }
                                    //                }
                                    //                withoutSerial.PICKED_QTY = PickedQTY;
                                    //                withoutSerial.QUANTITY = EachGROUP.Count();
                                    //                PicklistModel.WithoutSerial.Add(withoutSerial);

                                    //            }
                                    //        }
                                    //        for (int i = 0; i < LinesData.Count(); i++)
                                    //        {
                                    //            var eachItem = LinesData.ToList();

                                    //        }
                                    //    }
                                    //}
                                    List<PartShipmentLines> linePick = new List<PartShipmentLines>();
                                    foreach (V_SHIPMENT_LINES ShipmentLines in PicklistModel.SHIPMENT_LINES)
                                    {
                                        PartShipmentLines line = new PartShipmentLines();
                                        V_SHIPMENT shipment = _dbContext.V_Shipment.Find(ShipmentLines.ShipmentId);
                                        line.salespartid = convert.ToInt(ShipmentLines.SalesPartId);
                                        line.shipmentid = convert.ToInt(ShipmentLines.ShipmentId);
                                        line.shipmentlineid = convert.ToInt(ShipmentLines.ShipmentLineId);
                                        salesparts partdetail = _dbContext.SALES_PARTS.Find(ShipmentLines.SalesPartId);
                                        line.customername = ShipmentLines.Customer_Name;
                                        line.siteid = convert.ToInt(shipment.SiteId);
                                        line.sitename = convert.ToString(shipment.Site_Name);
                                        line.uom = partdetail.uom;
                                        line.partname = partdetail.partname;
                                        line.partnumber = partdetail.part_number;
                                        line.weight = convert.ToFloat(partdetail.weight);
                                        line.m3 = convert.ToFloat(partdetail.m3);
                                        line.pick_qty = convert.ToFloat(ShipmentLines.Picked_Qty);
                                        line.qty_to_pick = convert.ToFloat(ShipmentLines.Connected_SourceQty) - convert.ToFloat(ShipmentLines.Picked_Qty);
                                        line.reserve_qty = convert.ToFloat(ShipmentLines.Reserved_Qty);
                                        line.connected_sourceqty = convert.ToFloat(ShipmentLines.Connected_SourceQty);
                                        line.receive_with_serial = convert.ToInt(partdetail.receive_with_serials);
                                        line.customerid = convert.ToInt(ShipmentLines.CustomerId);
                                        linePick.Add(line);
                                    }

                                    string Partnum = "";
                                    if (_data.CUST_PART_NO != "")
                                    {
                                        if (_data.CUST_PART_NO.Contains("*"))
                                        {
                                            Partnum = _data.CUST_PART_NO.Split('*')[0];
                                        }
                                        else
                                        {
                                            Partnum = _data.CUST_PART_NO;
                                        }
                                        linePick = linePick.Where(x => x.partnumber.Contains(Partnum)).ToList();
                                    }

                                    PicklistModel.ListPartShipmentLines = linePick;

                                    //PicklistModel.mast_Customers = (_dbContext.Customers != null) ? _dbContext.Customers.Where(a => a.Customer_ID == PicklistModel.V_shipment.ReceiverID).FirstOrDefault() : null;
                                    PicklistModel.shipmentAddresses = (_dbContext.Shipment_Address != null) ? _dbContext.Shipment_Address.Where(x => x.ShipmentId == ShipmentID).ToList() : null;
                                    if (PicklistModel.shipmentAddresses.Count() > 0)
                                    {
                                        var recaddr = PicklistModel.shipmentAddresses.Where(a => convert.ToString(a.Addr_Type).ToUpper() == "RECEIVER").First();
                                        if (recaddr != null) PicklistModel.ReceiverAddress = (ShipmentAddress)recaddr;
                                    }
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(PicklistModel);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Outbound_Order_Items_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Outbound_Order_Items_WMS", "Error", "", "Error Outbound_Order_Items_WMS - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Outbound_Order_Items_WMS stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Outbound_Picked_PartStockDetails")]
        public IActionResult Get_Outbound_Picked_PartStockDetails(Shipment_Picked_Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Outbound_Picked_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nShipmentSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Outbound List");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                V_SHIPMENT_LINES spLine = _dbContext.V_Shipment_Lines.Find(_data.shipmentlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                V_SHIPMENT _shipmentObj = _dbContext.V_Shipment.Find(_data.shipmentid);
                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);


                                PartShipmentLines line = new PartShipmentLines();
                                line.salespartid = convert.ToInt(spLine.SalesPartId);
                                line.shipmentid = convert.ToInt(spLine.ShipmentId);
                                line.shipmentlineid = convert.ToInt(spLine.ShipmentLineId);
                                line.customername = spLine.Customer_Name;
                                line.siteid = convert.ToInt(_shipmentObj.SiteId);
                                line.sitename = convert.ToString(_shipmentObj.Site_Name);
                                line.uom = PartDetails.uom;
                                line.partname = PartDetails.partname;
                                line.partnumber = PartDetails.part_number;
                                line.weight = convert.ToFloat(PartDetails.weight);
                                line.m3 = convert.ToFloat(PartDetails.m3);
                                line.pick_qty = convert.ToFloat(spLine.Picked_Qty);
                                line.qty_to_pick = convert.ToFloat(spLine.Connected_SourceQty) - convert.ToFloat(spLine.Picked_Qty);
                                line.reserve_qty = convert.ToFloat(spLine.Reserved_Qty);
                                line.connected_sourceqty = convert.ToFloat(spLine.Connected_SourceQty);
                                line.receive_with_serial = convert.ToInt(PartDetails.receive_with_serials);
                                line.customerid = convert.ToInt(spLine.CustomerId);


                                if (_shipmentObj != null)
                                {
                                    nShipmentSiteId = _shipmentObj.SiteId.Value;
                                }
                                if (PartDetails != null)
                                {
                                    if (PartDetails.receive_with_serials == 1)
                                    {
                                        Shipment_Line_Picked_Item_Details_Serial _obj = new Shipment_Line_Picked_Item_Details_Serial();
                                        IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                        _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.PICKED_QTY > 0 && a.shipmentlineid == convert.ToInt(_data.shipmentlineid)).ToList();
                                        List<PickList_Inventory_Serial> lstPickedPartStockDetailSerial = _InvStkObj.Select(obj => new PickList_Inventory_Serial
                                        {
                                            salespartid = convert.ToInt(obj.SalesPartId),
                                            partname = convert.ToString(obj.PARTNAME),
                                            part_number = convert.ToString(obj.PART_NUMBER),
                                            serial = convert.ToString(obj.SERIAL),
                                            partlocationid = convert.ToInt(obj.PARTLOCATIONID),
                                            partlocation_code = convert.ToString(obj.PARTLOCATION_CODE),
                                            customerid = convert.ToInt(obj.customerid),
                                            customer_name = convert.ToString(obj.customer_name),
                                            pickedqty = convert.ToFloat(obj.PICKED_QTY),
                                            shipmentid = convert.ToInt(_data.shipmentid),
                                            shipmentlineid = convert.ToInt(_data.shipmentlineid)
                                        }).ToList();
                                        _obj.ShipmentLineDetails = line;
                                        _obj.PickedPartStockDetailSerial = lstPickedPartStockDetailSerial;
                                        _dataReturn = (_obj);
                                    }
                                    else
                                    {
                                        //for non serial
                                        Shipment_Line_Picked_Item_Details_NonSerial _obj = new Shipment_Line_Picked_Item_Details_NonSerial();
                                        IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                        _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && (a.shipmentlineid == null || a.shipmentlineid == convert.ToInt(_data.shipmentlineid))).ToList();

                                        var groupedByLocation = from item in _InvStkObj
                                                                group item by new { item.SalesPartId, item.PARTNAME, item.PART_NUMBER, item.PARTLOCATIONID, item.PARTLOCATION_CODE, item.QUANTITY, item.customerid, item.customer_name } into grouped
                                                                select new PickList_Inventory_NonSerial
                                                                {
                                                                    salespartid = convert.ToInt(grouped.Key.SalesPartId),
                                                                    partname = convert.ToString(grouped.Key.PARTNAME),
                                                                    part_number = convert.ToString(grouped.Key.PART_NUMBER),
                                                                    partlocationid = convert.ToInt(grouped.Key.PARTLOCATIONID),
                                                                    partlocation_code = convert.ToString(grouped.Key.PARTLOCATION_CODE),
                                                                    customerid = convert.ToInt(grouped.Key.customerid),
                                                                    customer_name = convert.ToString(grouped.Key.customer_name),
                                                                    reservedqty = convert.ToFloat(grouped.Where(x => x.Shipmentid == convert.ToInt(_data.shipmentid)).Sum(x => x.QUANTITY)),
                                                                    totalqty = convert.ToFloat(grouped.Where(x => (x.Shipmentid == null || x.CustomerOrderId == null || x.Shipmentid == convert.ToInt(_data.shipmentid)) && x.qty_intransit_to_location == null).Sum(x => x.QUANTITY)),
                                                                    pickedqty = convert.ToFloat(grouped.Sum(x => x.PICKED_QTY)),
                                                                    shipmentid = convert.ToInt(convert.ToInt(_data.shipmentid)),
                                                                    shipmentlineid = convert.ToInt(convert.ToInt(_data.shipmentlineid))
                                                                };
                                        List<PickList_Inventory_NonSerial> lstPickedPartStockDetailNonSerial = groupedByLocation.Where(x => x.pickedqty > 0).ToList();
                                        _obj.ShipmentLineDetails = line;
                                        _obj.PickedPartStockDetailNonSerial = lstPickedPartStockDetailNonSerial;
                                        _dataReturn = (_obj);
                                    }
                                }
                                else
                                {
                                    throw new Exception("Invalid Part details.");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Outbound_Picked_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Outbound_Picked_PartStockDetails", "Error", "", "Error Get_Outbound_Picked_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Outbound_Picked_PartStockDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Select_PartStockDetails_for_Pick")]
        public IActionResult Select_PartStockDetails_for_Pick(Select_Items_Data_For_Pincking _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Select_PartStockDetails_for_Pick");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nShipmentSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Select_PartStockDetails_for_Pick");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                V_SHIPMENT_LINES spLine = _dbContext.V_Shipment_Lines.Find(_data.shipmentlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                V_SHIPMENT _shipmentObj = _dbContext.V_Shipment.Find(_data.shipmentid);
                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                if (_shipmentObj != null)
                                {
                                    nShipmentSiteId = _shipmentObj.SiteId.Value;
                                }
                                if (convert.ToInt(PartDetails.receive_with_serials) == 1)
                                {
                                    if (_data.scannedserialno != "")
                                    {
                                        string serialNum = _data.scannedserialno;
                                        if (serialNum != "")
                                        {
                                            V_PartInventoryStockDetails StockdetailSerial = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.FirstOrDefault(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.SERIAL == serialNum && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.CustomerOrderId == null && (a.Shipmentid == null || a.Shipmentid == convert.ToInt(_data.shipmentid)) && (a.shipmentlineid == null || a.shipmentlineid == convert.ToInt(_data.shipmentlineid)));
                                            if (StockdetailSerial != null)
                                            {
                                                if (StockdetailSerial.PICKED_QTY > 0)
                                                {
                                                    throw new Exception("Part number '" + _data.scannedpartno + "' Serial number '" + _data.scannedserialno + "' already been picked.");
                                                }
                                                else
                                                {
                                                    Picked_Items_Data _pickedData = new Picked_Items_Data();

                                                    _pickedData.UserId = _data.UserId;
                                                    _pickedData.salespartid = StockdetailSerial.SalesPartId;
                                                    _pickedData.serial = serialNum;
                                                    _pickedData.partlocationid = StockdetailSerial.PARTLOCATIONID;
                                                    _pickedData.customerid = StockdetailSerial.customerid;
                                                    _pickedData.shipmentid = _data.shipmentid;
                                                    _pickedData.shipmentlineid = _data.shipmentlineid;
                                                    _pickedData.selecteddQty = 1;
                                                    _dataReturn = Save_Picklist_details(_pickedData);
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get part stock details for Part number '" + _data.scannedpartno + "' and Serial number '" + _data.scannedserialno + "'.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get serial number for scanned Part number '" + _data.scannedpartno + "' and Serial number '" + _data.scannedserialno + "'.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Part number '" + _data.scannedpartno + "' require a serial number.");
                                    }
                                }
                                else
                                {
                                    Picklist_Non_Serial_PartStock_ByLocation _modal = new Picklist_Non_Serial_PartStock_ByLocation();
                                    IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                    _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.CustomerOrderId == null && (a.shipmentlineid == null || a.shipmentlineid == convert.ToInt(_data.shipmentlineid))).ToList();

                                    var groupedByLocation = from item in _InvStkObj
                                                            group item by new { item.SalesPartId, item.PARTNAME, item.PART_NUMBER, item.PARTLOCATIONID, item.PARTLOCATION_CODE, item.QUANTITY, item.customerid, item.customer_name } into grouped
                                                            select new PickList_Inventory_NonSerial
                                                            {
                                                                salespartid = convert.ToInt(grouped.Key.SalesPartId),
                                                                partname = convert.ToString(grouped.Key.PARTNAME),
                                                                part_number = convert.ToString(grouped.Key.PART_NUMBER),
                                                                partlocationid = convert.ToInt(grouped.Key.PARTLOCATIONID),
                                                                partlocation_code = convert.ToString(grouped.Key.PARTLOCATION_CODE),
                                                                customerid = convert.ToInt(grouped.Key.customerid),
                                                                customer_name = convert.ToString(grouped.Key.customer_name),
                                                                reservedqty = convert.ToFloat(grouped.Where(x => x.Shipmentid == convert.ToInt(_data.shipmentid)).Sum(x => x.QUANTITY)),
                                                                totalqty = convert.ToFloat(grouped.Where(x => x.Shipmentid == null && x.CustomerOrderId == null &&  x.qty_intransit_to_location == null).Sum(x => x.QUANTITY)),
                                                                pickedqty = convert.ToFloat(grouped.Sum(x => x.PICKED_QTY)),
                                                                shipmentid = convert.ToInt(convert.ToInt(_data.shipmentid)),
                                                                shipmentlineid = convert.ToInt(convert.ToInt(_data.shipmentlineid))
                                                            };

                                    List<int> lstLocationid = groupedByLocation.Select(x => x.partlocationid).Distinct().ToList();
                                    List<Picklist_Locations> locationList = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstLocationid.Contains((int)x.PARTLOCATIONID)).Select(x => new Picklist_Locations { locationid = x.PARTLOCATIONID, location_code = x.PARTLOCATION_CODE + " - " + x.PARTLOCATION_DESCR }).ToList();
                                    _modal.pick_locationList = locationList;
                                    _modal.pick_NonSerialInventoryStockList = groupedByLocation.ToList();
                                    _dataReturn = _modal;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Select_PartStockDetails_for_Pick  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Select_PartStockDetails_for_Pick", "Error", "", "Error Select_PartStockDetails_for_Pick - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Select_PartStockDetails_for_Pick stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Remove_Selected_Picked_PartStockDetails")]
        public IActionResult Remove_Selected_Picked_PartStockDetails(Remove_Picked_Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
                double dTotalpickedQty = 0;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Remove_Selected_Picked_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nShipmentSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Remove_Selected_Picked_PartStockDetails");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                V_SHIPMENT_LINES spLine = _dbContext.V_Shipment_Lines.Find(_data.shipmentlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                V_SHIPMENT _shipmentObj = _dbContext.V_Shipment.Find(_data.shipmentid);
                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);

                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                                Customers _cust = _dbContext.Customers.Find(_data.customerid);

                                if (spLine == null)
                                {
                                    throw new Exception("Shipment Line not found");
                                }
                                if (_custOrder == null)
                                {
                                    throw new Exception("Customer Order not found");
                                }
                                if (_shipmentObj == null)
                                {
                                    throw new Exception("Shipment not found");
                                }

                                nShipmentSiteId = convert.ToInt(_custOrder.SiteId);

                                V_TRIP_PLAN? tripShpiment = _dbContext.V_TRIP_PLAN.FirstOrDefault(x => x.shipmentid == _data.shipmentid);
                                if (tripShpiment != null)
                                {
                                    throw new Exception("Unable to updated record since Trip already created.");
                                }

                                List<int> list = new List<int>();
                                List<V_PartInventoryStockDetails> lstAllPickedStockdetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.PICKED_QTY > 0 && a.shipmentlineid == convert.ToInt(_data.shipmentlineid)).ToList();
                                if (convert.ToInt(PartDetails.receive_with_serials) == 1)
                                {
                                    List<V_PartInventoryStockDetails> removedata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.Shipmentid == _data.shipmentid && x.shipmentlineid == x.shipmentlineid && x.customerid == _data.customerid && x.SERIAL == _data.serial).ToList();
                                    if (removedata.Count() >= _data.removedQty)
                                    {
                                        removedata = removedata.OrderBy(x => x.DATE_IN).ToList();
                                        List<int> removePartStockDetailsIds = removedata.Take(convert.ToInt(_data.removedQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                        list = lstAllPickedStockdetails.Where(x => removePartStockDetailsIds.Contains((int)x.PART_STOCK_DETAIL_ID) == false).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    }
                                    else
                                    {
                                        throw new Exception("Remove quantity is greater the selected pick qty.");
                                    }
                                }
                                else
                                {
                                    List<V_PartInventoryStockDetails> removedata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.Shipmentid == _data.shipmentid && x.shipmentlineid == x.shipmentlineid && x.customerid == _data.customerid).ToList();
                                    if (removedata.Count() >= _data.removedQty)
                                    {
                                        removedata = removedata.OrderBy(x => x.DATE_IN).ToList();
                                        List<int> removePartStockDetailsIds = removedata.Take(convert.ToInt(_data.removedQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                        list = lstAllPickedStockdetails.Where(x => removePartStockDetailsIds.Contains((int)x.PART_STOCK_DETAIL_ID) == false).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    }
                                    else
                                    {
                                        throw new Exception("Remove quantity is greater the selected pick qty.");
                                    }
                                }

                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                executionStrategy.Execute(() =>
                                {
                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            DoUnreserveItems_Picklist(convert.ToInt(_data.shipmentlineid), convert.ToInt(_data.shipmentid));
                                            Shipment _shipmentObj = _dbContext.Shipment.Find(convert.ToInt(_data.shipmentid));
                                            if (_shipmentObj != null)
                                            {
                                                nShipmentSiteId = _shipmentObj.SiteId.Value;
                                            }

                                            ShipmentLines _ShipLineObj = _dbContext.Shipment_Lines.Where(x => x.ShipmentLineId == convert.ToInt(_data.shipmentlineid)).FirstOrDefault();
                                            int nOrderedQty = convert.ToInt(_ShipLineObj.Connected_SourceQty.Value);

                                            //dTotalpickedQty = _listData.Sum(x => convert.ToFloat(x.value));

                                            for (int s = 0; s < list.Count; s++)
                                            {
                                                int nPartStkId = convert.ToInt(list[s]);
                                                PartInventoryStockDetails _invStkdet = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                                V_PartInventoryStockDetails _vStkdet = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                                if (_invStkdet != null)
                                                {
                                                    if (_invStkdet.qty_intransit_to_location != 1)
                                                    {
                                                        _invStkdet.shipmentid = convert.ToInt(_data.shipmentid);
                                                        _invStkdet.shipmentlineid = convert.ToInt(_data.shipmentlineid);
                                                        _invStkdet.PICKED_QTY = 1;
                                                        _invStkdet.UPDATED_DATE = DateTime.Now;
                                                        if (convert.ToInt(_invStkdet.pick_exported) != 2)
                                                        {
                                                            _invStkdet.pick_exported = 1;
                                                        }
                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_invStkdet);
                                                        partsUpdate = _dbContext.SaveChanges();
                                                        //slPartstkId.Add(nPartStkId);
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Part Stock Detils with Partno : " + _vStkdet.PART_NUMBER + " serial no.: " + _vStkdet.SERIAL + " Location Code :" + _vStkdet.PARTLOCATION_CODE + " is In Transit.");
                                                    }
                                                }
                                            }

                                            var _stLocIdObj = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_ShipLineObj.SalesPartId) && a.shipmentlineid == convert.ToInt(_data.shipmentlineid)).ToList();
                                            var tmp = _stLocIdObj.GroupBy(x => x.PARTLOCATIONID);
                                            var resultLoc = tmp.Select(y => new
                                            {
                                                Id = y.Key,
                                                Quantity = y.Sum(x => x.QUANTITY)
                                            });

                                            foreach (var obj in resultLoc.ToList())
                                            {
                                                int nPartlocId = obj.Id.Value; double TotalQuantity = obj.Quantity.Value;
                                                dTotalpickedQty += TotalQuantity;
                                                List<PartInventoryStock> _lstinventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == convert.ToInt(_data.salespartid) && x.SITEID == nShipmentSiteId && x.PARTLOCATIONID == nPartlocId).ToList();
                                                if (_lstinventoryStkObj != null)
                                                {
                                                    for (int i = 0; i < _lstinventoryStkObj.Count(); i++)
                                                    {
                                                        PartInventoryStock _inventoryStkObj = _lstinventoryStkObj[i];
                                                        List<PartInventoryStockDetails> lstPartStockDetils = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _inventoryStkObj.SITEID && a.SalesPartId == convert.ToInt(_inventoryStkObj.SalesPartId) && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                                                        double reserverQty = convert.ToFloat(lstPartStockDetils.Where(x => convert.ToInt(x.shipmentid) > 0 && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));

                                                        //double dOrgResere_qty = (_inventoryStkObj.QTY_RESERVED != null) ? _inventoryStkObj.QTY_RESERVED.Value : 0;
                                                        //_inventoryStkObj.QTY_RESERVED = (dOrgResere_qty == 0) ? TotalQuantity : (dOrgResere_qty + TotalQuantity);
                                                        _inventoryStkObj.QTY_RESERVED = reserverQty;
                                                        _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                                                        _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                                                        _partStkUpdates = _dbContext.SaveChanges();
                                                    }
                                                }
                                            }

                                            if (dTotalpickedQty == 0)
                                            {
                                                List<PartInventoryStock> _lstinventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == convert.ToInt(_data.salespartid) && x.SITEID == nShipmentSiteId && x.PARTLOCATIONID == _data.partlocationid).ToList();
                                                if (_lstinventoryStkObj != null)
                                                {
                                                    for (int i = 0; i < _lstinventoryStkObj.Count(); i++)
                                                    {
                                                        PartInventoryStock _inventoryStkObj = _lstinventoryStkObj[i];
                                                        List<PartInventoryStockDetails> lstPartStockDetils = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _inventoryStkObj.SITEID && a.SalesPartId == convert.ToInt(_inventoryStkObj.SalesPartId) && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                                                        double reserverQty = convert.ToFloat(lstPartStockDetils.Where(x => convert.ToInt(x.shipmentid) > 0 && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));

                                                        //double dOrgResere_qty = (_inventoryStkObj.QTY_RESERVED != null) ? _inventoryStkObj.QTY_RESERVED.Value : 0;
                                                        //_inventoryStkObj.QTY_RESERVED = (dOrgResere_qty == 0) ? TotalQuantity : (dOrgResere_qty + TotalQuantity);
                                                        _inventoryStkObj.QTY_RESERVED = reserverQty;
                                                        _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                                                        _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                                                        _partStkUpdates = _dbContext.SaveChanges();
                                                    }
                                                }
                                            }

                                            _ShipLineObj = _dbContext.Shipment_Lines.Where(x => x.ShipmentLineId == convert.ToInt(_data.shipmentlineid)).FirstOrDefault();
                                            _ShipLineObj.ShipmentId = convert.ToInt(_data.shipmentid);
                                            _ShipLineObj.Reserved_Qty = dTotalpickedQty;
                                            _ShipLineObj.Picked_Qty = dTotalpickedQty;
                                            _ShipLineObj.Updated_Date = DateTime.Now;
                                            _dbContext.Shipment_Lines.Update(_ShipLineObj);
                                            _shiplinesUpdates = _dbContext.SaveChanges();
                                            //set shipment status if all items are reserved
                                            SetShipmentStatus(convert.ToInt(_data.shipmentid));

                                            //set Customer Order status if shipment items are reserved
                                            //SetReserveCustomerOrder(Id, nShipmentSiteId);

                                            var CurrentLine = _dbContext.Shipment_Lines.Find(convert.ToInt(_data.shipmentlineid)); //update status in shipment line 
                                            var CustOrderLine = _dbContext.Customer_Order_line.Find(CurrentLine.CustOrderLineId); //update status in customer order line
                                            var CustOrder = _dbContext.Customer_Orders.Find(CustOrderLine.OrderId);
                                            CurrentLine.Picked_Qty = dTotalpickedQty;

                                            var CurrentShipment = _dbContext.Shipment.Find(convert.ToInt(_data.shipmentid));
                                            var Mast_Status = _dbContext.mast_statuses;
                                            if (dTotalpickedQty == 0)
                                            {
                                                var StatusID = Mast_Status.Where(x => x.status_desc == "Released").FirstOrDefault();
                                                CustOrderLine.Item_Status = StatusID.statusid;
                                                CustOrderLine.Updated_Date = DateTime.Now;
                                                CurrentLine.Item_Status = StatusID.statusid;
                                                CurrentLine.Updated_Date = DateTime.Now;
                                                CustOrder.StatusId = StatusID.statusid;
                                                CustOrder.Updated_Date = DateTime.Now;
                                            }
                                            else if (dTotalpickedQty <= CurrentLine.Reserved_Qty)
                                            {

                                                var StatusID = Mast_Status.Where(x => x.status_desc == "Picked").FirstOrDefault();
                                                CustOrderLine.Item_Status = StatusID.statusid;
                                                CustOrderLine.Updated_Date = DateTime.Now;
                                                CurrentLine.Item_Status = StatusID.statusid;
                                                CurrentLine.Updated_Date = DateTime.Now;
                                                CustOrder.StatusId = StatusID.statusid;
                                                CustOrder.Updated_Date = DateTime.Now;
                                            }

                                            _dbContext.Customer_Order_line.Update(CustOrderLine);
                                            _dbContext.Shipment_Lines.Update(CurrentLine);
                                            _dbContext.Customer_Orders.Update(CustOrder);
                                            Updated += _dbContext.SaveChanges();
                                            dbContextTransaction.Commit();

                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have removed from Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Outbound Order Pick List.");
                                            CommonFunction.SetAudit("Remove_Selected_Picked_PartStockDetails", "Updated", "", "User : " + _UserData.EX_USERNAME + " have removed from Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form form Outbound Order Pick List.", "");


                                            _dataReturn = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            dbContextTransaction.Rollback();
                                            throw new Exception("Error on Remove_Selected_Picked_PartStockDetails : " + ex.Message);
                                        }
                                    }

                                });

                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Remove_Selected_Picked_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Remove_Selected_Picked_PartStockDetails", "Error", "", "Error Remove_Selected_Picked_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_Selected_Picked_PartStockDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Save_Picked_PartStockDetails")]
        public IActionResult Save_Picked_PartStockDetails(Picked_Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
                double dTotalpickedQty = 0;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Save_Picked_PartStockDetails");


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        _dataReturn = Save_Picklist_details(_data);
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Save_Picked_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Save_Picked_PartStockDetails", "Error", "", "Error Save_Picked_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Save_Picked_PartStockDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Available_LocationWise_StockDetails")]
        public IActionResult Get_Available_LocationWise_StockDetails(Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Available_LocationWise_StockDetails");

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _data.siteid && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _data.customerid && a.qty_intransit_to_location == null && a.stock_typeid != null && a.CustomerOrderId == null && a.shipmentlineid == null && a.DATE_OUT == null).ToList();

                                var groupedByLocation = from item in _InvStkObj
                                                        group item by new { item.SalesPartId, item.PARTNAME, item.PART_NUMBER, item.PARTLOCATIONID, item.PARTLOCATION_CODE,item.partlocation_descr, item.QUANTITY, item.customerid, item.customer_name } into grouped
                                                        select new Inventory_Summary_By_Location
                                                        {
                                                            salespartid = convert.ToInt(grouped.Key.SalesPartId),
                                                            partname = convert.ToString(grouped.Key.PARTNAME),
                                                            part_number = convert.ToString(grouped.Key.PART_NUMBER),
                                                            partlocationid = convert.ToInt(grouped.Key.PARTLOCATIONID),
                                                            partlocation_code = convert.ToString(grouped.Key.PARTLOCATION_CODE),
                                                            partlocation_desc = convert.ToString(grouped.Key.partlocation_descr),
                                                            customerid = convert.ToInt(grouped.Key.customerid),
                                                            customer_name = convert.ToString(grouped.Key.customer_name),
                                                            availableqty = convert.ToFloat(grouped.Where(x => (x.Shipmentid == null || x.CustomerOrderId == null) && x.qty_intransit_to_location == null).Sum(x => x.QUANTITY))
                                                        };
                                _dataReturn = groupedByLocation.ToList();
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Available_LocationWise_StockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Available_LocationWise_StockDetails", "Error", "", "Error Get_Available_LocationWise_StockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Available_LocationWise_StockDetails stopped successfully.");
            }
        }

        private bool Save_Picklist_details(Picked_Items_Data _data)
        {
            bool _dataReturn = false;
            CommonFunction.Set_Client_Data_on_Log_Authentication(_data);
            int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
            double dTotalpickedQty = 0;
            if (convert.ToInt(_data.UserId) > 0)
            {
                int nShipmentSiteId = 0;
                SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                {
                    throw new Exception("Unable to get Userdata for Userid : " + _data.UserId);
                }
                else
                {
                    CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Save_Picked_PartStockDetails");

                    var SiteId = GetLinkedSites(_UserData);
                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                    List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                    V_SHIPMENT_LINES spLine = _dbContext.V_Shipment_Lines.Find(_data.shipmentlineid);
                    CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                    V_SHIPMENT _shipmentObj = _dbContext.V_Shipment.Find(_data.shipmentid);
                    salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);
                    MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                    Customers _cust = _dbContext.Customers.Find(_data.customerid);

                    List<int> list = new List<int>();

                    if (spLine == null)
                    {
                        throw new Exception("Shipment Line not found");
                    }
                    if (_custOrder == null)
                    {
                        throw new Exception("Customer Order not found");
                    }
                    if (_shipmentObj == null)
                    {
                        throw new Exception("Shipment not found");
                    }

                    V_TRIP_PLAN? tripShpiment = _dbContext.V_TRIP_PLAN.FirstOrDefault(x => x.shipmentid == _data.shipmentid);
                    if (tripShpiment != null)
                    {
                        throw new Exception("Unable to updated record since Trip already created.");
                    }

                    nShipmentSiteId = convert.ToInt(_custOrder.SiteId);
                    List<V_PartInventoryStockDetails> lstAllStockdetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && (a.Shipmentid == null || a.CustomerOrderId == null || a.Shipmentid == convert.ToInt(_data.shipmentid)) && (a.shipmentlineid == null || a.shipmentlineid == convert.ToInt(_data.shipmentlineid))).ToList();
                    List<V_PartInventoryStockDetails> lstAllPickedStockdetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.PICKED_QTY > 0 && a.shipmentlineid == convert.ToInt(_data.shipmentlineid)).ToList();
                    list = lstAllPickedStockdetails.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                    if (convert.ToInt(PartDetails.receive_with_serials) == 1)
                    {
                        List<V_PartInventoryStockDetails> selecteddata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.Shipmentid == _data.shipmentid && x.shipmentlineid == x.shipmentlineid && x.customerid == _data.customerid && x.SERIAL == _data.serial && x.PICKED_QTY > 0).ToList();
                        if (selecteddata.Count() > 0)
                        {
                            throw new Exception("Part already selected.");
                        }
                        else
                        {
                            List<V_PartInventoryStockDetails> nonselecteddata = lstAllStockdetails.Where(a => a.Shipmentid == null && a.CustomerOrderId == null && a.shipmentlineid == null && a.PARTLOCATIONID == _data.partlocationid && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.SERIAL == _data.serial).ToList();
                            nonselecteddata = nonselecteddata.OrderByDescending(x => x.DATE_IN).ToList();
                            if (nonselecteddata.Count() > 0)
                            {
                                if (nonselecteddata.Count() >= _data.selecteddQty)
                                {
                                    List<int> addedPickList = nonselecteddata.Take(convert.ToInt(_data.selecteddQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    foreach (int partStockdetailkid in addedPickList)
                                    {
                                        if (!list.Contains(partStockdetailkid))
                                        {
                                            list.Add(partStockdetailkid);
                                        }
                                    }
                                }
                                else
                                {
                                    throw new Exception("Picked quantity is greater than available stock qty.");
                                }
                            }
                            else
                            {
                                throw new Exception("Unable to get available stock qty.");
                            }
                        }
                    }
                    else
                    {
                        List<V_PartInventoryStockDetails> selecteddata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.Shipmentid == _data.shipmentid && x.shipmentlineid == x.shipmentlineid && x.customerid == _data.customerid && x.PICKED_QTY > 0).ToList();
                        if (selecteddata.Count() == _data.selecteddQty)
                        {
                            throw new Exception("Part already picked.");
                        }
                        else
                        {
                            if (selecteddata.Count() > _data.selecteddQty)
                            {
                                List<V_PartInventoryStockDetails> selectedLocationdata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid).ToList();
                                selectedLocationdata = selectedLocationdata.OrderBy(x => x.DATE_IN).ToList();

                                if (selectedLocationdata.Count() >= _data.selecteddQty)
                                {
                                    double takeQty = selecteddata.Count() - convert.ToFloat(_data.selecteddQty);
                                    List<int> removePickList = selectedLocationdata.Take(convert.ToInt(takeQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    foreach (int partStockdetailkid in removePickList)
                                    {
                                        list.Remove(partStockdetailkid);
                                    }
                                }
                                else
                                {
                                    throw new Exception("Picked quantity is greater than available stock qty.");
                                }

                            }
                            else if (selecteddata.Count() < _data.selecteddQty)
                            {
                                double takeQty = convert.ToFloat(_data.selecteddQty);
                                List<int> selectedPartLocation = selecteddata.Select(x => x.PART_STOCK_DETAIL_ID).ToList();

                                List<V_PartInventoryStockDetails> nonselecteddata = lstAllStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid  && x.CustomerOrderId == null && (x.Shipmentid == null || x.shipmentlineid == null || x.shipmentlineid == convert.ToInt(_data.shipmentlineid))).ToList();
                                nonselecteddata = nonselecteddata.OrderByDescending(x => x.DATE_IN).ToList();
                                if (nonselecteddata.Count() > 0)
                                {
                                    if (nonselecteddata.Count() >= _data.selecteddQty)
                                    {
                                        List<int> addedPickList = nonselecteddata.Take(convert.ToInt(takeQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                        foreach (int partStockdetailkid in addedPickList)
                                        {
                                            if (!list.Contains(partStockdetailkid))
                                            {
                                                list.Add(partStockdetailkid);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Picked quantity is greater than available stock qty.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get available stock qty.");
                                }

                            }
                        }
                    }

                    if (spLine.Connected_SourceQty < list.Count())
                    {
                        throw new Exception("Selected Picked quantity should be less than Source quantity.");
                    }
                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                    executionStrategy.Execute(() =>
                    {

                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                        {
                            try
                            {
                                DoUnreserveItems_Picklist(convert.ToInt(_data.shipmentlineid), convert.ToInt(_data.shipmentid));
                                Shipment _shipmentObj = _dbContext.Shipment.Find(convert.ToInt(_data.shipmentid));
                                if (_shipmentObj != null)
                                {
                                    nShipmentSiteId = _shipmentObj.SiteId.Value;
                                }

                                ShipmentLines _ShipLineObj = _dbContext.Shipment_Lines.Where(x => x.ShipmentLineId == convert.ToInt(_data.shipmentlineid)).FirstOrDefault();
                                int nOrderedQty = convert.ToInt(_ShipLineObj.Connected_SourceQty.Value);
                                List<PartInventoryStockDetails> slPartstkId = new List<PartInventoryStockDetails>();
                                //dTotalpickedQty = _listData.Sum(x => convert.ToFloat(x.value));

                                for (int s = 0; s < list.Count; s++)
                                {
                                    int nPartStkId = convert.ToInt(list[s]);
                                    PartInventoryStockDetails _invStkdet = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                    V_PartInventoryStockDetails _vStkdet = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                    if (_invStkdet != null)
                                    {
                                        if (convert.ToInt(_invStkdet.qty_intransit_to_location) == 0)
                                        {
                                            _invStkdet.shipmentid = convert.ToInt(_data.shipmentid);
                                            _invStkdet.shipmentlineid = convert.ToInt(_data.shipmentlineid);
                                            _invStkdet.PICKED_QTY = 1;
                                            _invStkdet.UPDATED_DATE = DateTime.Now;
                                            if (convert.ToInt(_invStkdet.pick_exported) != 2)
                                            {
                                                _invStkdet.pick_exported = 1;
                                            }
                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_invStkdet);
                                            partsUpdate = _dbContext.SaveChanges();
                                            slPartstkId.Add(_invStkdet);
                                        }
                                        else
                                        {
                                            throw new Exception("Part Stock Detils with Partno : " + _vStkdet.PART_NUMBER + " serial no.: " + _vStkdet.SERIAL + " Location Code :" + _vStkdet.PARTLOCATION_CODE + " is In Transit.");
                                        }
                                    }
                                }

                                //var _stLocIdObj = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == Convert.ToInt32(_ShipLineObj.SalesPartId) && a.shipmentid == convert.ToInt(_data.shipmentid)).ToList();
                                var tmp = slPartstkId.GroupBy(x => x.PARTLOCATIONID);
                                var resultLoc = tmp.Select(y => new
                                {
                                    Id = y.Key,
                                    Quantity = y.Sum(x => x.QUANTITY)
                                });

                                foreach (var obj in resultLoc.ToList())
                                {
                                    int nPartlocId = obj.Id.Value; double TotalQuantity = obj.Quantity.Value;
                                    dTotalpickedQty += TotalQuantity;
                                    List<PartInventoryStock> _lstinventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == convert.ToInt(_data.salespartid) && x.SITEID == nShipmentSiteId && x.PARTLOCATIONID == nPartlocId).ToList();
                                    if (_lstinventoryStkObj != null)
                                    {
                                        for (int i = 0; i < _lstinventoryStkObj.Count(); i++)
                                        {
                                            PartInventoryStock _inventoryStkObj = _lstinventoryStkObj[i];
                                            List<PartInventoryStockDetails> lstPartStockDetils = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _inventoryStkObj.SITEID && a.SalesPartId == convert.ToInt(_inventoryStkObj.SalesPartId) && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                                            double reserverQty = convert.ToFloat(lstPartStockDetils.Where(x => convert.ToInt(x.shipmentid) > 0 && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));

                                            //double dOrgResere_qty = (_inventoryStkObj.QTY_RESERVED != null) ? _inventoryStkObj.QTY_RESERVED.Value : 0;
                                            //_inventoryStkObj.QTY_RESERVED = (dOrgResere_qty == 0) ? TotalQuantity : (dOrgResere_qty + TotalQuantity);
                                            _inventoryStkObj.QTY_RESERVED = reserverQty;
                                            _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                                            _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                                            _partStkUpdates = _dbContext.SaveChanges();
                                        }
                                    }
                                }

                                _ShipLineObj = _dbContext.Shipment_Lines.Where(x => x.ShipmentLineId == convert.ToInt(_data.shipmentlineid)).FirstOrDefault();
                                _ShipLineObj.ShipmentId = convert.ToInt(_data.shipmentid);
                                _ShipLineObj.Reserved_Qty = dTotalpickedQty;
                                _ShipLineObj.Picked_Qty = dTotalpickedQty;
                                _ShipLineObj.Updated_Date = DateTime.Now;
                                _dbContext.Shipment_Lines.Update(_ShipLineObj);
                                _shiplinesUpdates = _dbContext.SaveChanges();
                                //set shipment status if all items are reserved
                                SetShipmentStatus(convert.ToInt(_data.shipmentid));

                                //set Customer Order status if shipment items are reserved
                                //SetReserveCustomerOrder(Id, nShipmentSiteId);

                                var CurrentLine = _dbContext.Shipment_Lines.Find(convert.ToInt(_data.shipmentlineid)); //update status in shipment line 
                                var CustOrderLine = _dbContext.Customer_Order_line.Find(CurrentLine.CustOrderLineId); //update status in customer order line
                                var CustOrder = _dbContext.Customer_Orders.Find(CustOrderLine.OrderId);
                                CurrentLine.Picked_Qty = dTotalpickedQty;

                                var CurrentShipment = _dbContext.Shipment.Find(convert.ToInt(_data.shipmentid));
                                var Mast_Status = _dbContext.mast_statuses;
                                if (dTotalpickedQty == 0)
                                {
                                    var StatusID = Mast_Status.Where(x => x.status_desc == "Released").FirstOrDefault();
                                    CustOrderLine.Item_Status = StatusID.statusid;
                                    CustOrderLine.Updated_Date = DateTime.Now;
                                    CurrentLine.Item_Status = StatusID.statusid;
                                    CurrentLine.Updated_Date = DateTime.Now;
                                    CustOrder.StatusId = StatusID.statusid;
                                    CustOrder.Updated_Date = DateTime.Now;
                                    CustOrder.updated_by = _data.UserId;
                                }
                                else if (dTotalpickedQty <= CurrentLine.Reserved_Qty)
                                {

                                    var StatusID = Mast_Status.Where(x => x.status_desc == "Picked").FirstOrDefault();
                                    CustOrderLine.Item_Status = StatusID.statusid;
                                    CustOrderLine.Updated_Date = DateTime.Now;
                                    CurrentLine.Item_Status = StatusID.statusid;
                                    CurrentLine.Updated_Date = DateTime.Now;
                                    CustOrder.StatusId = StatusID.statusid;
                                    CustOrder.Updated_Date = DateTime.Now;
                                    CustOrder.updated_by = _data.UserId;
                                }

                                _dbContext.Customer_Order_line.Update(CustOrderLine);
                                _dbContext.Shipment_Lines.Update(CurrentLine);
                                _dbContext.Customer_Orders.Update(CustOrder);
                                Updated += _dbContext.SaveChanges();
                                dbContextTransaction.Commit();

                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Updated Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Outbound Order Pick List.");
                                CommonFunction.SetAudit("Save_Picklist_details", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Updated Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Outbound Order Pick List.", "");

                                _dataReturn = true;
                            }
                            catch (Exception ex)
                            {
                                dbContextTransaction.Rollback();
                                throw new Exception("Error on SavePickedShipmentItems : " + ex.Message);
                            }
                        }

                    });
                }
            }
            else
            {
                throw new Exception("Unable to get User Id");
            }
            return _dataReturn;
        }

        private bool DoUnreserveItems_Picklist(int ShipmentLineId, int ShipmentId)
        {
            bool _value = false;
            int _shiplinesUpdates = -1, _partStkUpdates = -1, partsUpdate = -1;
            double dTotalReserveQty = 0.0d;
            List<int> slPartstkId = new List<int>(); slPartstkId.Clear();
            try
            {
                ShipmentLines _ShipLineObj = _dbContext.Shipment_Lines.Where(x => x.ShipmentLineId == convert.ToInt(ShipmentLineId)).FirstOrDefault();

                int Id = ShipmentId;
                var CurrentShipment = _dbContext.Shipment.Find(ShipmentId);
                int nShipmentSiteId = convert.ToInt(CurrentShipment.SiteId);
                var PrevInvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_ShipLineObj.SalesPartId) && a.Shipmentid == Id).ToList();
                //var AllIds = _dataAccess.V_PART_INVENTORY_STOCK_DETAILS.Where(x => (x.PICKED_QTY == 0 || x.PICKED_QTY == null) && x.Shipmentid == ShipmentId && x.shipmentlineid == Convert.ToInt32(ShipmentLineId)).ToList();
                var AllIds = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.Shipmentid == ShipmentId && x.shipmentlineid == convert.ToInt(ShipmentLineId)).ToList();
                for (int s = 0; s < AllIds.Count; s++)
                {
                    int nPartStockDetailId = AllIds[s].PART_STOCK_DETAIL_ID;
                    PartInventoryStockDetails _invStkdet = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(nPartStockDetailId);
                    if (_invStkdet != null)
                    {
                        _invStkdet.shipmentid = null;
                        _invStkdet.shipmentlineid = null;
                        _invStkdet.PICKED_QTY = null;
                        _invStkdet.pick_exported = null;
                        _invStkdet.UPDATED_DATE = DateTime.Now;
                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_invStkdet);
                        _partStkUpdates = _dbContext.SaveChanges();
                        slPartstkId.Add(nPartStockDetailId);
                    }
                }
                //Part Stock Update
                var UpdInvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_ShipLineObj.SalesPartId) && (a.Shipmentid == Id)).ToList();//||a.Shipmentid == null

                var tmp = UpdInvStkObj.GroupBy(x => x.PARTLOCATIONID);
                var resultLoc = tmp.Select(y => new
                {
                    Id = y.Key,
                    Quantity = y.Sum(x => x.QUANTITY)
                });
                if (resultLoc.ToList().Count > 0)
                {
                    foreach (var obj in resultLoc.ToList())
                    {
                        int nPartlocId = obj.Id.Value; double TotalQuantity = obj.Quantity.Value;
                        dTotalReserveQty += TotalQuantity;

                        PartInventoryStock _inventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == _ShipLineObj.SalesPartId && x.SITEID == nShipmentSiteId && x.PARTLOCATIONID == nPartlocId).FirstOrDefault();
                        if (_inventoryStkObj != null)
                        {
                            _inventoryStkObj.QTY_RESERVED = TotalQuantity;
                            _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                            _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                            partsUpdate = _dbContext.SaveChanges();
                        }
                    }
                }
                else
                {
                    var _inventoryStkLst = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == _ShipLineObj.SalesPartId && x.SITEID == nShipmentSiteId).ToList();
                    if (_inventoryStkLst != null)
                    {
                        foreach (PartInventoryStock _inventoryStkObj in _inventoryStkLst)
                        {
                            List<PartInventoryStockDetails> lstPartstockData = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == _inventoryStkObj.SalesPartId && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                            double _reserverQty = convert.ToFloat(lstPartstockData.Where(a => convert.ToInt(a.shipmentid) > 0 && convert.ToInt(a.qty_intransit_to_location) == 0 && a.DATE_OUT == null).ToList().Sum(x => x.QUANTITY));

                            _inventoryStkObj.QTY_RESERVED = _reserverQty;
                            _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                            _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                            partsUpdate = _dbContext.SaveChanges();
                        }
                    }
                }

                //update shipment lines unreserve qty
                _ShipLineObj.ShipmentId = Id;
                _ShipLineObj.Reserved_Qty = 0; //dTotalReserveQty;
                _ShipLineObj.Picked_Qty = 0;
                _ShipLineObj.Updated_Date = DateTime.Now;
                _dbContext.Shipment_Lines.Update(_ShipLineObj);
                _shiplinesUpdates = _dbContext.SaveChanges();

                //set shipment status if  items are unreserved
                //SetShipmentStatus(Id);

                //set customer order status if items are unreserved
                //SetUnReserveCustomerOrder(Id, nShipmentSiteId); // to confirm
                _value = true;
                return _value;

            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on DoUnreserveItems_Picklist : " + ex.Message);
                CommonFunction.SetAudit("DoUnreserveItems_Picklist", "Error", "", "Error DoUnreserveItems_Picklist - " + ex.Message, "");
                _value = false;
                return _value;
            }
        }

        private void SetShipmentStatus(int nShipmentId)
        {
            try
            {
                //Shipment Line status
                int shipmentpicked = 0;
                IEnumerable<ShipmentLines> _Shplines = _dbContext.Shipment_Lines.Where(x => x.ShipmentId == nShipmentId).ToList();
                if (_Shplines != null && _Shplines.Count() > 0)
                {
                    foreach (ShipmentLines _sLineObj in _Shplines)
                    {
                        _sLineObj.ShipmentId = nShipmentId;
                        _sLineObj.Updated_Date = DateTime.Now;
                        if (_sLineObj.Picked_Qty > 0)
                        {
                            shipmentpicked++;
                            _sLineObj.Item_Status = (_sLineObj.Connected_SourceQty >= _sLineObj.Picked_Qty) ? 7 : 7;
                        }
                        else
                        {
                            if (_sLineObj.Reserved_Qty > 0)
                            {
                                _sLineObj.Item_Status = (_sLineObj.Connected_SourceQty == _sLineObj.Reserved_Qty) ? 6 : 15;
                            }
                            else _sLineObj.Item_Status = 2;
                        }
                        _dbContext.Shipment_Lines.Update(_sLineObj);
                        _dbContext.SaveChanges();
                    }
                }

                Shipment _obj = _dbContext.Shipment.Find(nShipmentId);
                IEnumerable<ShipmentLines> _Slines = null;
                int nreserve = 0;
                if (shipmentpicked > 0)
                {
                    _Slines = _dbContext.Shipment_Lines.Where(x => x.ShipmentId == nShipmentId && x.Item_Status == 7 && x.Picked_Qty > 0);
                    if (_obj != null && _Slines.Count() > 0)
                    {
                        _obj.Shipment_StatusId = 7; nreserve = nreserve + 1;
                    }
                    else
                    {
                        _Slines = _dbContext.Shipment_Lines.Where(x => x.ShipmentId == nShipmentId && x.Item_Status == 7 && x.Picked_Qty > 0);
                        if (_Slines.Count() > 0)
                        {
                            _obj.Shipment_StatusId = 7; nreserve = nreserve + 1;
                        }
                    }
                }
                else
                {
                    _Slines = _dbContext.Shipment_Lines.Where(x => x.ShipmentId == nShipmentId && x.Item_Status == 6 && x.Reserved_Qty > 0);
                    if (_obj != null && _Slines.Count() > 0)
                    {
                        _obj.Shipment_StatusId = 6; nreserve = nreserve + 1;
                    }
                    else
                    {
                        _Slines = _dbContext.Shipment_Lines.Where(x => x.ShipmentId == nShipmentId && x.Item_Status == 15 && x.Reserved_Qty > 0);
                        if (_Slines.Count() > 0)
                        {
                            _obj.Shipment_StatusId = 15; nreserve = nreserve + 1;
                        }
                    }
                }
                if (nreserve == 0) { _obj.Shipment_StatusId = 2; }
                _obj.Updated_Date = DateTime.Now;
                _dbContext.Shipment.Update(_obj);
                _dbContext.SaveChanges();
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error in SetShipmentStatus : " + ex.GetBaseException().ToString());
                CommonFunction.SetAudit("SetShipmentStatus", "Error", "", "Error SetShipmentStatus - " + ex.Message, "");
                throw;
            }
        }

        #endregion

        #region Self Collect Pick List

        [HttpPost]
        [Route("Self_Collect_List_WMS")]
        public IActionResult Self_Collect_List_WMS(Outbound_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                SelfCollect_List_Filter _modal = new SelfCollect_List_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Self_Collect_List_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Self Collect Orders List");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                _modal.Mast_Site = LstSites;
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                _modal.List_Status = _dbContext.mast_statuses.Where(x => x.status_desc.ToLower() == "picked" || x.status_desc.ToLower() == "released" || x.status_desc.ToLower() == "reserved").Select(x => new Mast_STATUSES
                                {
                                    statusid = x.statusid,
                                    status_desc = x.status_desc
                                }).ToList();

                                _modal.Customers = _dbContext.Customers.Select(x => new CustomersFilter
                                {
                                    Customer_ID = x.Customer_ID,
                                    Customer_Name = x.Customer_Type.ToUpper() + " - " + x.Customer_Code + " - " + x.Customer_Name
                                }).ToList();

                                List<V_CustomerOrders> listCustomerOrders = _dbContext.V_Customer_Orders.Where(x => lstUserSite.Contains((int)x.SITEID) && (x.statusid == 2 || x.statusid == 7) && x.order_types == "SELF").ToList();
                                int[] lst_CustOrderId = listCustomerOrders.Select(x => x.OrderId).Distinct().ToArray();
                                List<CustomerOrderLine> _vLine = _dbContext.Customer_Order_line.Where(x => lst_CustOrderId.Contains(x.OrderId.GetValueOrDefault())).ToList();

                                List<V_CustomerOrders> lstdata;

                                lstdata = listCustomerOrders;

                                if (lstdata.Count() > 0)
                                {
                                    if (convert.ToInt(_data.siteid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.SITEID == _data.siteid).ToList();
                                    }
                                    if (convert.ToInt(_data.customerid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.CustomerId == _data.customerid).ToList();
                                    }
                                    if (convert.ToInt(_data.salespartid) > 0)
                                    {
                                        List<int?> sPartOrder = _vLine.Where(x => x.SalesPartId == _data.salespartid).Select(x => x.OrderId).Distinct().ToList();
                                        if (sPartOrder.Count() > 0)
                                        {
                                            lstdata = lstdata.Where(x => sPartOrder.Contains(x.OrderId)).ToList();
                                        }
                                        else
                                        {
                                            lstdata = lstdata.Where(x => x.OrderId == 0).ToList();
                                        }
                                    }
                                    if (convert.ToString(_data.scannedpartno).Trim() != "")
                                    {
                                        List<int?> sPartOrders = _vLine.Where(x => convert.ToString(x.ProductCode).Trim() != null && convert.ToString(x.ProductCode).Trim() != "" && _data.scannedpartno.Trim() == convert.ToString(x.ProductCode).Trim()).Select(x => x.OrderId).Distinct().ToList();
                                        if (sPartOrders.Count() > 0)
                                        {
                                            if (convert.ToString(_data.scannedserialno).Trim() != "")
                                            {
                                                List<int> lstOrderLineIds = _vLine.Where(x => convert.ToString(x.ProductCode).Trim() != null && convert.ToString(x.ProductCode).Trim() != "" && _data.scannedpartno.Trim() == convert.ToString(x.ProductCode).Trim()).Select(x => x.CustOrderLineId).Distinct().ToList();
                                                if (_dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => lstOrderLineIds.Contains(x.CustomerOrderLineId.GetValueOrDefault()) && x.SERIAL == convert.ToString(_data.scannedserialno).Trim() && x.shipmentid == null).ToList().Count() > 0)
                                                {
                                                    List<int?> _orderids = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => lstOrderLineIds.Contains(x.CustomerOrderLineId.GetValueOrDefault()) && x.SERIAL == convert.ToString(_data.scannedserialno).Trim() && x.shipmentid == null).ToList().Select(x => x.CustomerOrderId).ToList();
                                                    lstdata = lstdata.Where(x => _orderids.Contains(x.OrderId)).ToList();
                                                }
                                            }
                                            else
                                            {
                                                lstdata = lstdata.Where(x => sPartOrders.Contains(x.OrderId)).ToList();
                                            }
                                        }
                                        else
                                        {
                                            lstdata = lstdata.Where(x => x.OrderId == 0).ToList();
                                        }
                                    }
                                    if (convert.ToString(_data.orderno).Trim() != "")
                                    {
                                        lstdata = lstdata.Where(x => convert.ToString(x.Order_No).Trim() == convert.ToString(_data.orderno).Trim()).ToList();
                                    }
                                    if (convert.ToInt(_data.statusid) > 0)
                                    {
                                        lstdata = lstdata.Where(x => x.statusid == convert.ToInt(_data.statusid)).ToList();
                                    }
                                }
                                List<SelfCollect_Order_WMS> _LstSelfCollectOrders = lstdata.Select(x => new SelfCollect_Order_WMS
                                {
                                    orderid = x.OrderId,
                                    order_no = x.Order_No,
                                    status = x.Status,
                                    customerid = x.CustomerId,
                                    customer_name = x.Customer_Name,
                                    siteid = x.SITEID,
                                    site_name = x.Site_Code,
                                    created_date = convert.ToDateTime(x.OrderDate).ToString("dd/MM/yyyy")

                                }).Distinct(new TargetClassComparer3()).ToList();
                                _modal.selfcollect_orders = _LstSelfCollectOrders;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Self_Collect_List_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Self_Collect_List_WMS", "Error", "", "Error Self_Collect_List_WMS - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Self_Collect_List_WMS stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Self_Collect_Order_Items_WMS")]
        public IActionResult Self_Collect_Order_Items_WMS(SelfCollect_Order_Item _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                SelfCollect_Line_Details PicklistModel = new SelfCollect_Line_Details();
                Inbound_Item_Filter _modal = new Inbound_Item_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Self_Collect_Order_Items_WMS");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (convert.ToInt(_data.Orderid) == 0)
                            {
                                return NotFound("Unable to get Order Details : " + _data.Orderid);
                            }
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Self_Collect_Order_Items_WMS for Order Details : " + _data.Orderid);

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<V_SHIPMENT_LINES> _vLine = new List<V_SHIPMENT_LINES>();
                                int companyID = convert.ToInt(_UserData.COMPANYID);

                                if (convert.ToInt(_data.Orderid) > 0)
                                {
                                    int OrderID = convert.ToInt(convert.ToInt(_data.Orderid));

                                    //PicklistModel.Mast_Site = LstSites;
                                    PicklistModel.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                    PicklistModel.V_CustomerOrders = _dbContext.V_Customer_Orders.Find(OrderID);
                                    PicklistModel.Customer_Orders_LINES = _dbContext.Customer_Order_line.Where(x => x.OrderId == OrderID).ToList();
                                    //List<int?> LstSalesPartId = PicklistModel.SHIPMENT_LINES.Select(x => x.SalesPartId).Distinct().ToList();
                                    var sPicked_Qty = PicklistModel.Customer_Orders_LINES.Sum(x => x.co_picked_qty);

                                    List<PartOrderLines> linePick = new List<PartOrderLines>();
                                    foreach (CustomerOrderLine sOrderLines in PicklistModel.Customer_Orders_LINES)
                                    {
                                        PartOrderLines line = new PartOrderLines();
                                        V_CustomerOrders custorders = _dbContext.V_Customer_Orders.Find(sOrderLines.OrderId);
                                        line.salespartid = convert.ToInt(sOrderLines.SalesPartId);
                                        line.orderid = convert.ToInt(sOrderLines.OrderId);
                                        line.orderlineid = convert.ToInt(sOrderLines.CustOrderLineId);
                                        salesparts partdetail = _dbContext.SALES_PARTS.Find(sOrderLines.SalesPartId);
                                        line.customername = custorders.Customer_Name;
                                        line.siteid = convert.ToInt(custorders.SITEID);
                                        line.sitename = convert.ToString(custorders.Site_Code);
                                        line.uom = partdetail.uom;
                                        line.partname = partdetail.partname;
                                        line.partnumber = partdetail.part_number;
                                        line.weight = convert.ToFloat(partdetail.weight);
                                        line.m3 = convert.ToFloat(partdetail.m3);
                                        line.pick_qty = convert.ToFloat(sOrderLines.co_picked_qty);
                                        line.qty_to_pick = convert.ToFloat(sOrderLines.Qty) - convert.ToFloat(sOrderLines.co_picked_qty);

                                        line.connected_sourceqty = convert.ToFloat(sOrderLines.Qty);
                                        line.receive_with_serial = convert.ToInt(partdetail.receive_with_serials);
                                        line.customerid = convert.ToInt(custorders.CustomerId);
                                        linePick.Add(line);
                                    }

                                    string Partnum = "";
                                    if (_data.CUST_PART_NO != "")
                                    {
                                        if (_data.CUST_PART_NO.Contains("*"))
                                        {
                                            Partnum = _data.CUST_PART_NO.Split('*')[0];
                                        }
                                        else
                                        {
                                            Partnum = _data.CUST_PART_NO;
                                        }
                                        linePick = linePick.Where(x => x.partnumber.Contains(Partnum)).ToList();
                                    }
                                    PicklistModel.ListPartOrderLines = linePick;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(PicklistModel);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Self_Collect_Order_Items_WMS ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Self_Collect_Order_Items_WMS", "Error", "", "Error Self_Collect_Order_Items_WMS - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Self_Collect_Order_Items_WMS stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Self_Collect_Picked_PartStockDetails")]
        public IActionResult Get_Self_Collect_Picked_PartStockDetails(Order_Picked_Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Self_Collect_Picked_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nOrderSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get Self Collect Picked PartStockDetails");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                CustomerOrderLine spLine = _dbContext.Customer_Order_line.Find(_data.orderlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                V_CustomerOrders _custOrderObj = _dbContext.V_Customer_Orders.Find(_data.orderid);
                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);


                                PartOrderLines line = new PartOrderLines();
                                line.salespartid = convert.ToInt(spLine.SalesPartId);
                                line.orderid = convert.ToInt(spLine.OrderId);
                                line.orderlineid = convert.ToInt(spLine.CustOrderLineId);
                                line.customername = _custOrderObj.Customer_Name;
                                line.siteid = convert.ToInt(_custOrderObj.SITEID);
                                line.sitename = convert.ToString(_custOrderObj.Site_Code);
                                line.uom = PartDetails.uom;
                                line.partname = PartDetails.partname;
                                line.partnumber = PartDetails.part_number;
                                line.weight = convert.ToFloat(PartDetails.weight);
                                line.m3 = convert.ToFloat(PartDetails.m3);
                                line.pick_qty = convert.ToFloat(spLine.co_picked_qty);
                                line.qty_to_pick = convert.ToFloat(spLine.Qty) - convert.ToFloat(spLine.co_picked_qty);
                                line.connected_sourceqty = convert.ToFloat(spLine.Qty);
                                line.receive_with_serial = convert.ToInt(PartDetails.receive_with_serials);
                                line.customerid = convert.ToInt(_custOrderObj.CustomerId);


                                if (_custOrderObj != null)
                                {
                                    nOrderSiteId = _custOrderObj.SITEID.Value;
                                }
                                if (PartDetails != null)
                                {
                                    if (PartDetails.receive_with_serials == 1)
                                    {
                                        CustOrder_Line_Picked_Item_Details_Serial _obj = new CustOrder_Line_Picked_Item_Details_Serial();
                                        IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                        _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.PICKED_QTY > 0 && a.CustomerOrderLineId == convert.ToInt(_data.orderlineid) && a.Shipmentid == null).ToList();
                                        List<Cust_Order_PickList_Inventory_Serial> lstPickedPartStockDetailSerial = _InvStkObj.Select(obj => new Cust_Order_PickList_Inventory_Serial
                                        {
                                            salespartid = convert.ToInt(obj.SalesPartId),
                                            partname = convert.ToString(obj.PARTNAME),
                                            part_number = convert.ToString(obj.PART_NUMBER),
                                            serial = convert.ToString(obj.SERIAL),
                                            partlocationid = convert.ToInt(obj.PARTLOCATIONID),
                                            partlocation_code = convert.ToString(obj.PARTLOCATION_CODE),
                                            customerid = convert.ToInt(obj.customerid),
                                            customer_name = convert.ToString(obj.customer_name),
                                            pickedqty = convert.ToFloat(obj.PICKED_QTY),
                                            orderid = convert.ToInt(_data.orderid),
                                            orderlineid = convert.ToInt(_data.orderlineid)
                                        }).ToList();
                                        _obj.CustOrderLineDetails = line;
                                        _obj.PickedPartStockDetailSerial = lstPickedPartStockDetailSerial;
                                        _dataReturn = (_obj);
                                    }
                                    else
                                    {
                                        //for non serial
                                        CustOrder_Line_Picked_Item_Details_NonSerial _obj = new CustOrder_Line_Picked_Item_Details_NonSerial();
                                        IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                        _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.Shipmentid == null && ( a.CustomerOrderId == null || a.CustomerOrderId == convert.ToInt(_data.orderid))).ToList();

                                        var groupedByLocation = from item in _InvStkObj
                                                                group item by new { item.SalesPartId, item.PARTNAME, item.PART_NUMBER, item.PARTLOCATIONID, item.PARTLOCATION_CODE, item.QUANTITY, item.customerid, item.customer_name } into grouped
                                                                select new Cust_Order_PickList_Inventory_NonSerial
                                                                {
                                                                    salespartid = convert.ToInt(grouped.Key.SalesPartId),
                                                                    partname = convert.ToString(grouped.Key.PARTNAME),
                                                                    part_number = convert.ToString(grouped.Key.PART_NUMBER),
                                                                    partlocationid = convert.ToInt(grouped.Key.PARTLOCATIONID),
                                                                    partlocation_code = convert.ToString(grouped.Key.PARTLOCATION_CODE),
                                                                    customerid = convert.ToInt(grouped.Key.customerid),
                                                                    customer_name = convert.ToString(grouped.Key.customer_name),
                                                                    reservedqty = convert.ToFloat(grouped.Where(x => x.CustomerOrderId == convert.ToInt(_data.orderid)).Sum(x => x.QUANTITY)),
                                                                    totalqty = convert.ToFloat(grouped.Where(x => (x.Shipmentid == null || x.CustomerOrderId == null || x.CustomerOrderId == convert.ToInt(_data.orderid)) && x.qty_intransit_to_location == null).Sum(x => x.QUANTITY)),
                                                                    pickedqty = convert.ToFloat(grouped.Sum(x => x.PICKED_QTY)),
                                                                    orderid = convert.ToInt(convert.ToInt(_data.orderid)),
                                                                    orderlineid = convert.ToInt(convert.ToInt(_data.orderlineid))
                                                                };
                                        List<Cust_Order_PickList_Inventory_NonSerial> lstPickedPartStockDetailNonSerial = groupedByLocation.Where(x => x.pickedqty > 0).ToList();
                                        _obj.CustOrderLineDetails = line;
                                        _obj.PickedPartStockDetailNonSerial = lstPickedPartStockDetailNonSerial;
                                        _dataReturn = (_obj);
                                    }
                                }
                                else
                                {
                                    throw new Exception("Invalid Part details.");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Self_Collect_Picked_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Self_Collect_Picked_PartStockDetails", "Error", "", "Error Get_Self_Collect_Picked_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Self_Collect_Picked_PartStockDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Select_CO_PartStockDetails_for_Pick")]
        public IActionResult Select_CO_PartStockDetails_for_Pick(Select_Cust_Order_Items_Data_For_Pincking _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Select_CO_PartStockDetails_for_Pick");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nOrderSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Select_Self_Collect_PartStockDetails_for_Pick");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                CustomerOrderLine spLine = _dbContext.Customer_Order_line.Find(_data.orderlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                V_CustomerOrders _CustOrderObj = _dbContext.V_Customer_Orders.Find(_data.orderid);
                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                if (_CustOrderObj != null)
                                {
                                    nOrderSiteId = _CustOrderObj.SITEID.Value;
                                }
                                if (convert.ToInt(PartDetails.receive_with_serials) == 1)
                                {
                                    if (_data.scannedserialno != "")
                                    {
                                        string serialNum = _data.scannedserialno;
                                        if (serialNum != "")
                                        {
                                            V_PartInventoryStockDetails StockdetailSerial = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.FirstOrDefault(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.SERIAL == serialNum && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.Shipmentid == null && (a.CustomerOrderId == null || a.CustomerOrderId == convert.ToInt(_data.orderid)));
                                            if (StockdetailSerial != null)
                                            {
                                                if (StockdetailSerial.PICKED_QTY > 0)
                                                {
                                                    throw new Exception("Part number '" + _data.scannedpartno + "' Serial number '" + _data.scannedserialno + "' already been picked.");
                                                }
                                                else
                                                {
                                                    Cust_Order_Picked_Items_Data _pickedData = new Cust_Order_Picked_Items_Data();

                                                    _pickedData.UserId = _data.UserId;
                                                    _pickedData.salespartid = StockdetailSerial.SalesPartId;
                                                    _pickedData.serial = serialNum;
                                                    _pickedData.partlocationid = StockdetailSerial.PARTLOCATIONID;
                                                    _pickedData.customerid = StockdetailSerial.customerid;
                                                    _pickedData.orderid = _data.orderid;
                                                    _pickedData.orderlineid = _data.orderlineid;
                                                    _pickedData.selecteddQty = 1;
                                                    _dataReturn = Save_CO_Picklist_details(_pickedData);
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get part stock details for Part number '" + _data.scannedpartno + "' and Serial number '" + _data.scannedserialno + "'.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get serial number for scanned Part number '" + _data.scannedpartno + "' and Serial number '" + _data.scannedserialno + "'.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Part number '" + _data.scannedpartno + "' require a serial number.");
                                    }
                                }
                                else
                                {
                                    Cust_Order_Picklist_Non_Serial_PartStock_ByLocation _modal = new Cust_Order_Picklist_Non_Serial_PartStock_ByLocation();
                                    IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                    _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.Shipmentid == null && (a.CustomerOrderLineId == null || a.CustomerOrderLineId == convert.ToInt(_data.orderlineid))).ToList();

                                    var groupedByLocation = from item in _InvStkObj
                                                            group item by new { item.SalesPartId, item.PARTNAME, item.PART_NUMBER, item.PARTLOCATIONID, item.PARTLOCATION_CODE, item.QUANTITY, item.customerid, item.customer_name } into grouped
                                                            select new Cust_Order_PickList_Inventory_NonSerial
                                                            {
                                                                salespartid = convert.ToInt(grouped.Key.SalesPartId),
                                                                partname = convert.ToString(grouped.Key.PARTNAME),
                                                                part_number = convert.ToString(grouped.Key.PART_NUMBER),
                                                                partlocationid = convert.ToInt(grouped.Key.PARTLOCATIONID),
                                                                partlocation_code = convert.ToString(grouped.Key.PARTLOCATION_CODE),
                                                                customerid = convert.ToInt(grouped.Key.customerid),
                                                                customer_name = convert.ToString(grouped.Key.customer_name),
                                                                totalqty = convert.ToFloat(grouped.Where(x => (x.CustomerOrderId == null)  && x.qty_intransit_to_location == null).Sum(x => x.QUANTITY)),
                                                                pickedqty = convert.ToFloat(grouped.Sum(x => x.PICKED_QTY)),
                                                                orderid = convert.ToInt(convert.ToInt(_data.orderid)),
                                                                orderlineid = convert.ToInt(convert.ToInt(_data.orderlineid))
                                                            };

                                    List<int> lstLocationid = groupedByLocation.Select(x => x.partlocationid).Distinct().ToList();
                                    List<Picklist_Locations> locationList = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstLocationid.Contains((int)x.PARTLOCATIONID)).Select(x => new Picklist_Locations { locationid = x.PARTLOCATIONID, location_code = x.PARTLOCATION_CODE + " - " + x.PARTLOCATION_DESCR }).ToList();
                                    _modal.pick_locationList = locationList;
                                    _modal.pick_NonSerialInventoryStockList = groupedByLocation.ToList();
                                    _dataReturn = _modal;
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Select_CO_PartStockDetails_for_Pick  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Select_CO_PartStockDetails_for_Pick", "Error", "", "Error Select_CO_PartStockDetails_for_Pick - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Select_CO_PartStockDetails_for_Pick stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Remove_CO_Selected_Picked_PartStockDetails")]
        public IActionResult Remove_CO_Selected_Picked_PartStockDetails(Cust_Order_Remove_Picked_Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
                double dTotalpickedQty = 0;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Remove_CO_Selected_Picked_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nOrderSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Remove_CO_Selected_Picked_PartStockDetails");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                CustomerOrderLine _custOrderLine = _dbContext.Customer_Order_line.Find(_data.orderlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(_data.orderid);

                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);

                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                                Customers _cust = _dbContext.Customers.Find(_data.customerid);

                                if (_custOrderLine == null)
                                {
                                    throw new Exception("Customer Order Line not found");
                                }
                                if (_custOrder == null)
                                {
                                    throw new Exception("Customer Order not found");
                                }

                                nOrderSiteId = convert.ToInt(_custOrder.SiteId);


                                List<int> list = new List<int>();
                                List<V_PartInventoryStockDetails> lstAllPickedStockdetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.PICKED_QTY > 0 && a.CustomerOrderLineId == convert.ToInt(_data.orderlineid)).ToList();
                                if (convert.ToInt(PartDetails.receive_with_serials) == 1)
                                {
                                    List<V_PartInventoryStockDetails> removedata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.CustomerOrderId == _data.orderid && x.CustomerOrderLineId == _data.orderlineid && x.customerid == _data.customerid && x.SERIAL == _data.serial).ToList();
                                    if (removedata.Count() >= _data.removedQty)
                                    {
                                        removedata = removedata.OrderBy(x => x.DATE_IN).ToList();
                                        List<int> removePartStockDetailsIds = removedata.Take(convert.ToInt(_data.removedQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                        list = lstAllPickedStockdetails.Where(x => removePartStockDetailsIds.Contains((int)x.PART_STOCK_DETAIL_ID) == false).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    }
                                    else
                                    {
                                        throw new Exception("Remove quantity is greater the selected pick qty.");
                                    }
                                }
                                else
                                {
                                    List<V_PartInventoryStockDetails> removedata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.CustomerOrderId == _data.orderid && x.CustomerOrderLineId == _data.orderlineid && x.customerid == _data.customerid).ToList();
                                    if (removedata.Count() >= _data.removedQty)
                                    {
                                        removedata = removedata.OrderBy(x => x.DATE_IN).ToList();
                                        List<int> removePartStockDetailsIds = removedata.Take(convert.ToInt(_data.removedQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                        list = lstAllPickedStockdetails.Where(x => removePartStockDetailsIds.Contains((int)x.PART_STOCK_DETAIL_ID) == false).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    }
                                    else
                                    {
                                        throw new Exception("Remove quantity is greater the selected pick qty.");
                                    }
                                }

                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                executionStrategy.Execute(() =>
                                {
                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            DoUnreserveItems_CO_Picklist(convert.ToInt(_data.orderlineid));
                                            CustomerOrders _custOrderObj = _dbContext.Customer_Orders.Find(convert.ToInt(_data.orderid));
                                            if (_custOrderObj != null)
                                            {
                                                nOrderSiteId = _custOrderObj.SiteId.Value;
                                            }

                                            CustomerOrderLine _custOrderLineObj = _dbContext.Customer_Order_line.Where(x => x.CustOrderLineId == convert.ToInt(_data.orderlineid)).FirstOrDefault();
                                            int nOrderedQty = convert.ToInt(_custOrderLineObj.Qty.Value);

                                            //dTotalpickedQty = _listData.Sum(x => convert.ToFloat(x.value));

                                            for (int s = 0; s < list.Count; s++)
                                            {
                                                int nPartStkId = convert.ToInt(list[s]);
                                                PartInventoryStockDetails _invStkdet = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                                V_PartInventoryStockDetails _vStkdet = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                                if (_invStkdet != null)
                                                {
                                                    if (_invStkdet.qty_intransit_to_location != 1)
                                                    {
                                                        _invStkdet.CustomerOrderId = convert.ToInt(_data.orderid);
                                                        _invStkdet.CustomerOrderLineId = convert.ToInt(_data.orderlineid);
                                                        _invStkdet.PICKED_QTY = 1;
                                                        _invStkdet.UPDATED_DATE = DateTime.Now;
                                                        if (convert.ToInt(_invStkdet.pick_exported) != 2)
                                                        {
                                                            _invStkdet.pick_exported = 1;
                                                        }
                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_invStkdet);
                                                        partsUpdate = _dbContext.SaveChanges();
                                                        //slPartstkId.Add(nPartStkId);
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Part Stock Detils with Partno : " + _vStkdet.PART_NUMBER + " serial no.: " + _vStkdet.SERIAL + " Location Code :" + _vStkdet.PARTLOCATION_CODE + " is In Transit.");
                                                    }
                                                }
                                            }

                                            var _stLocIdObj = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_custOrderLineObj.SalesPartId) && a.CustomerOrderLineId == convert.ToInt(_data.orderlineid)).ToList();
                                            var tmp = _stLocIdObj.GroupBy(x => x.PARTLOCATIONID);
                                            var resultLoc = tmp.Select(y => new
                                            {
                                                Id = y.Key,
                                                Quantity = y.Sum(x => x.QUANTITY)
                                            });

                                            foreach (var obj in resultLoc.ToList())
                                            {
                                                int nPartlocId = obj.Id.Value; double TotalQuantity = obj.Quantity.Value;
                                                dTotalpickedQty += TotalQuantity;
                                                List<PartInventoryStock> _lstinventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == convert.ToInt(_data.salespartid) && x.SITEID == nOrderSiteId && x.PARTLOCATIONID == nPartlocId).ToList();
                                                if (_lstinventoryStkObj != null)
                                                {
                                                    for (int i = 0; i < _lstinventoryStkObj.Count(); i++)
                                                    {
                                                        PartInventoryStock _inventoryStkObj = _lstinventoryStkObj[i];
                                                        List<PartInventoryStockDetails> lstPartStockDetils = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _inventoryStkObj.SITEID && a.SalesPartId == convert.ToInt(_inventoryStkObj.SalesPartId) && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                                                        double reserverQty = convert.ToFloat(lstPartStockDetils.Where(x => convert.ToInt(x.shipmentid) > 0 && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));

                                                        //double dOrgResere_qty = (_inventoryStkObj.QTY_RESERVED != null) ? _inventoryStkObj.QTY_RESERVED.Value : 0;
                                                        //_inventoryStkObj.QTY_RESERVED = (dOrgResere_qty == 0) ? TotalQuantity : (dOrgResere_qty + TotalQuantity);
                                                        _inventoryStkObj.QTY_RESERVED = reserverQty;
                                                        _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                                                        _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                                                        _partStkUpdates = _dbContext.SaveChanges();
                                                    }
                                                }
                                            }

                                            if (dTotalpickedQty == 0)
                                            {
                                                List<PartInventoryStock> _lstinventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == convert.ToInt(_data.salespartid) && x.SITEID == nOrderSiteId && x.PARTLOCATIONID == _data.partlocationid).ToList();
                                                if (_lstinventoryStkObj != null)
                                                {
                                                    for (int i = 0; i < _lstinventoryStkObj.Count(); i++)
                                                    {
                                                        PartInventoryStock _inventoryStkObj = _lstinventoryStkObj[i];
                                                        List<PartInventoryStockDetails> lstPartStockDetils = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _inventoryStkObj.SITEID && a.SalesPartId == convert.ToInt(_inventoryStkObj.SalesPartId) && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                                                        double reserverQty = convert.ToFloat(lstPartStockDetils.Where(x => convert.ToInt(x.shipmentid) > 0 && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));

                                                        //double dOrgResere_qty = (_inventoryStkObj.QTY_RESERVED != null) ? _inventoryStkObj.QTY_RESERVED.Value : 0;
                                                        //_inventoryStkObj.QTY_RESERVED = (dOrgResere_qty == 0) ? TotalQuantity : (dOrgResere_qty + TotalQuantity);
                                                        _inventoryStkObj.QTY_RESERVED = reserverQty;
                                                        _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                                                        _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                                                        _partStkUpdates = _dbContext.SaveChanges();
                                                    }
                                                }
                                            }

                                            //_ShipLineObj = _dbContext.Shipment_Lines.Where(x => x.ShipmentLineId == convert.ToInt(_data.shipmentlineid)).FirstOrDefault();
                                            //_ShipLineObj.ShipmentId = convert.ToInt(_data.shipmentid);
                                            //_ShipLineObj.Reserved_Qty = dTotalpickedQty;
                                            //_ShipLineObj.Picked_Qty = dTotalpickedQty;
                                            //_ShipLineObj.Updated_Date = DateTime.Now;
                                            //_dbContext.Shipment_Lines.Update(_ShipLineObj);
                                            //_shiplinesUpdates = _dbContext.SaveChanges();
                                            ////set shipment status if all items are reserved
                                            //SetShipmentStatus(convert.ToInt(_data.shipmentid));

                                            //set Customer Order status if shipment items are reserved
                                            //SetReserveCustomerOrder(Id, nShipmentSiteId);
                                            //var CurrentLine = _dbContext.Shipment_Lines.Find(convert.ToInt(_data.shipmentlineid)); //update status in shipment line 

                                            var CustOrderLine = _dbContext.Customer_Order_line.Find(_data.orderlineid); //update status in customer order line
                                            var CustOrder = _dbContext.Customer_Orders.Find(CustOrderLine.OrderId);
                                            CustOrderLine.co_picked_qty = dTotalpickedQty;

                                            //var CurrentShipment = _dbContext.Shipment.Find(convert.ToInt(_data.shipmentid));
                                            var Mast_Status = _dbContext.mast_statuses;
                                            if (dTotalpickedQty == 0)
                                            {
                                                var StatusID = Mast_Status.Where(x => x.status_desc == "Released").FirstOrDefault();
                                                CustOrderLine.Item_Status = StatusID.statusid;
                                                CustOrderLine.Updated_Date = DateTime.Now;
                                                //CurrentLine.Item_Status = StatusID.statusid;
                                                //CurrentLine.Updated_Date = DateTime.Now;
                                                CustOrder.StatusId = StatusID.statusid;
                                                CustOrder.Updated_Date = DateTime.Now;
                                                CustOrder.updated_by = _data.UserId;
                                            }
                                            else if (dTotalpickedQty <= CustOrderLine.co_picked_qty)
                                            {

                                                var StatusID = Mast_Status.Where(x => x.status_desc == "Picked").FirstOrDefault();
                                                CustOrderLine.Item_Status = StatusID.statusid;
                                                CustOrderLine.Updated_Date = DateTime.Now;
                                                //CurrentLine.Item_Status = StatusID.statusid;
                                                //CurrentLine.Updated_Date = DateTime.Now;
                                                CustOrder.StatusId = StatusID.statusid;
                                                CustOrder.Updated_Date = DateTime.Now;
                                                CustOrder.updated_by = _data.UserId;
                                            }

                                            _dbContext.Customer_Order_line.Update(CustOrderLine);
                                            Updated += _dbContext.SaveChanges();
                                            //_dbContext.Shipment_Lines.Update(CurrentLine);
                                            _dbContext.Customer_Orders.Update(CustOrder);
                                            Updated += _dbContext.SaveChanges();
                                            dbContextTransaction.Commit();

                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have removed from Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Outbound Order Pick List.");
                                            CommonFunction.SetAudit("Remove_Selected_Picked_PartStockDetails", "Updated", "", "User : " + _UserData.EX_USERNAME + " have removed from Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form form Outbound Order Pick List.", "");


                                            _dataReturn = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            dbContextTransaction.Rollback();
                                            throw new Exception("Error on Remove_Selected_Picked_PartStockDetails : " + ex.Message);
                                        }
                                    }

                                });

                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Remove_CO_Selected_Picked_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Remove_CO_Selected_Picked_PartStockDetails", "Error", "", "Error Remove_CO_Selected_Picked_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_CO_Selected_Picked_PartStockDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Save_CO_Picked_PartStockDetails")]
        public IActionResult Save_CO_Picked_PartStockDetails(Cust_Order_Picked_Items_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
                double dTotalpickedQty = 0;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Save_CO_Picked_PartStockDetails");


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        _dataReturn = Save_CO_Picklist_details(_data);
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Save_CO_Picked_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Save_CO_Picked_PartStockDetails", "Error", "", "Error Save_Picked_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Save_CO_Picked_PartStockDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Complete_CustomerOrder")]
        public IActionResult Complete_CustomerOrder(Complete_SelfCollectData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Outbound_List_Filter _modal = new Outbound_List_Filter();
                object _dataReturn = null;
                int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
                double dTotalpickedQty = 0;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Complete_CustomerOrder");
                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                    if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                    {
                        return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                    }

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (!value)
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                    else
                    {
                        CustomerOrders _order = _dbContext.Customer_Orders.Find(_data.customerorderid);
                        if (_order.StatusId == 34)
                        {
                            throw new Exception("Order no '" + _order.Order_No + "' is already in complete status.");
                        }
                        if (_order.StatusId != 7)
                        {
                            throw new Exception("Order no '" + _order.Order_No + "' is in Invalid status.");
                        }
                        var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                        executionStrategy.Execute(() =>
                        {

                            using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                            {
                                try
                                {
                                    
                                    List<PartInventoryStockDetails> lstPartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => x.CustomerOrderId == _order.OrderId).ToList();
                                    List<CustomerOrderLine> lstCustomerOrderLine = _dbContext.Customer_Order_line.Where(x => x.OrderId == _order.OrderId).ToList();
                                    if (_order == null) throw new Exception("Customer Order record not found.");
                                    if (_order.StatusId != 7) throw new Exception("Customer Order is not in Picked Status.");
                                    _order.StatusId = 34;
                                    _order.updated_by = convert.ToInt(_data.userid);
                                    _order.Updated_Date = DateTime.Now;
                                    _dbContext.Customer_Orders.Update(_order);
                                    _dbContext.SaveChanges();


                                    foreach (CustomerOrderLine _orderline in lstCustomerOrderLine)
                                    {
                                        _orderline.Item_Status = 34;
                                        _orderline.updated_by = convert.ToInt(_data.userid);
                                        _orderline.Updated_Date = DateTime.Now;
                                        _dbContext.Customer_Order_line.Update(_orderline);
                                        _dbContext.SaveChanges();
                                    }


                                    foreach (PartInventoryStockDetails partStockDetails in lstPartStockDetails)
                                    {
                                        PartInventoryStock partStock = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == partStockDetails.SalesPartId && x.PARTLOCATIONID == partStockDetails.PARTLOCATIONID && x.customerid == _order.CustomerId).FirstOrDefault();
                                        partStockDetails.qty_intransit_to_location = null;
                                        partStockDetails.DATE_OUT = DateTime.Now;
                                        partStockDetails.UPDATED_DATE = DateTime.Now;
                                        partStockDetails.stock_statusid = 34;
                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(partStockDetails);
                                        _dbContext.SaveChanges();
                                        #region Update Stock Counts
                                        List<PartInventoryStockDetails> lstPartstockData = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == partStockDetails.SalesPartId && x.PARTLOCATIONID == partStockDetails.PARTLOCATIONID && x.customerid == _order.CustomerId).ToList();
                                        double? qty_reserved = convert.ToFloat(lstPartstockData.Where(x => (convert.ToInt(x.shipmentid) > 0 || convert.ToInt(x.CustomerOrderId) > 0) && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));
                                        double? intransitqty = convert.ToFloat(lstPartstockData.Where(x => convert.ToInt(x.qty_intransit_to_location) > 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));
                                        double? inhandqty = convert.ToFloat(lstPartstockData.Where(x => x.DATE_OUT == null).Sum(x => x.QUANTITY));
                                        partStock.QTY_RESERVED = qty_reserved;
                                        partStock.QTY_INTRANSIT = intransitqty;
                                        partStock.QTY_IN_HAND = inhandqty;
                                        partStock.UPDATED_DATE = DateTime.Now;
                                        _dbContext.PART_INVENTORY_STOCK.Update(partStock);
                                        _dbContext.SaveChanges();
                                        #endregion
                                    }

                                    dbContextTransaction.Commit();

                                    _dataReturn = new { result = true, msg = "Customer Order Completed successfully", id = GlobalTools.EncryptID(_order.OrderId) };
                                   
                                }
                                catch (Exception e)
                                {
                                    dbContextTransaction.Rollback();
                                    LeSDM.AddLog("Exception in CompleteOrder " + e.GetBaseException().ToString());
                                    throw e;
                                }
                            }
                        });
                    }
                }
                return Json(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Complete_CustomerOrder  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Complete_CustomerOrder", "Error", "", "Error Complete_CustomerOrder - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Complete_CustomerOrder stopped successfully.");
            }
        }

        private bool Save_CO_Picklist_details(Cust_Order_Picked_Items_Data _data)
        {
            bool _dataReturn = false;
            CommonFunction.Set_Client_Data_on_Log_Authentication(_data);
            int partsUpdate = 0, _partStkUpdates = 0, _shiplinesUpdates = 0, Updated = 0;
            double dTotalpickedQty = 0;
            if (convert.ToInt(_data.UserId) > 0)
            {
                int nOrderSiteId = 0;
                SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                {
                    throw new Exception("Unable to get Userdata for Userid : " + _data.UserId);
                }
                else
                {
                    CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Save_Picked_PartStockDetails");

                    var SiteId = GetLinkedSites(_UserData);
                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                    List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                    CustomerOrderLine spLine = _dbContext.Customer_Order_line.Find(_data.orderlineid);
                    CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                    V_CustomerOrders _custOrderObj = _dbContext.V_Customer_Orders.Find(_data.orderid);
                    salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);
                    MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                    Customers _cust = _dbContext.Customers.Find(_data.customerid);

                    List<int> list = new List<int>();

                    if (spLine == null)
                    {
                        throw new Exception("Customer Order Line not found");
                    }
                    if (_custOrder == null)
                    {
                        throw new Exception("Customer Order not found");
                    }
                    if (_custOrderObj == null)
                    {
                        throw new Exception("Customer Order not found");
                    }

                    nOrderSiteId = convert.ToInt(_custOrder.SiteId);
                    List<V_PartInventoryStockDetails> lstAllStockdetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && (a.Shipmentid == null || a.CustomerOrderId == null || a.CustomerOrderId == _data.orderid)).ToList();
                    List<V_PartInventoryStockDetails> lstAllPickedStockdetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.part_manual_reservation_control == 1 && a.part_order_issue_control == 1 && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.stock_typeid != null && a.PICKED_QTY > 0 && a.CustomerOrderLineId == convert.ToInt(_data.orderlineid)).ToList();
                    list = lstAllPickedStockdetails.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                    if (convert.ToInt(PartDetails.receive_with_serials) == 1)
                    {
                        List<V_PartInventoryStockDetails> selecteddata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.CustomerOrderId == _data.orderid && x.shipmentlineid == x.shipmentlineid && x.customerid == _data.customerid && x.SERIAL == _data.serial && x.PICKED_QTY > 0).ToList();
                        if (selecteddata.Count() > 0)
                        {
                            throw new Exception("Part already selected.");
                        }
                        else
                        {
                            List<V_PartInventoryStockDetails> nonselecteddata = lstAllStockdetails.Where(a => a.Shipmentid == null && a.CustomerOrderId == null && a.shipmentlineid == null && a.PARTLOCATIONID == _data.partlocationid && a.customerid == _custOrder.CustomerId && a.qty_intransit_to_location == null && a.SERIAL == _data.serial).ToList();
                            nonselecteddata = nonselecteddata.OrderByDescending(x => x.DATE_IN).ToList();
                            if (nonselecteddata.Count() > 0)
                            {
                                if (nonselecteddata.Count() >= _data.selecteddQty)
                                {
                                    List<int> addedPickList = nonselecteddata.Take(convert.ToInt(_data.selecteddQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    foreach (int partStockdetailkid in addedPickList)
                                    {
                                        if (!list.Contains(partStockdetailkid))
                                        {
                                            list.Add(partStockdetailkid);
                                        }
                                    }
                                }
                                else
                                {
                                    throw new Exception("Picked quantity is greater than available stock qty.");
                                }
                            }
                            else
                            {
                                throw new Exception("Unable to get available stock qty.");
                            }
                        }
                    }
                    else
                    {
                        List<V_PartInventoryStockDetails> selecteddata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid && x.CustomerOrderId == _data.orderid && x.shipmentlineid == x.shipmentlineid && x.customerid == _data.customerid && x.PICKED_QTY > 0).ToList();
                        if (selecteddata.Count() == _data.selecteddQty)
                        {
                            throw new Exception("Part already picked.");
                        }
                        else
                        {
                            if (selecteddata.Count() > _data.selecteddQty)
                            {
                                List<V_PartInventoryStockDetails> selectedLocationdata = lstAllPickedStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == _data.salespartid).ToList();
                                selectedLocationdata = selectedLocationdata.OrderBy(x => x.DATE_IN).ToList();

                                if (selectedLocationdata.Count() >= _data.selecteddQty)
                                {
                                    double takeQty = selecteddata.Count() - convert.ToFloat(_data.selecteddQty);
                                    List<int> removePickList = selectedLocationdata.Take(convert.ToInt(takeQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                    foreach (int partStockdetailkid in removePickList)
                                    {
                                        list.Remove(partStockdetailkid);
                                    }
                                }
                                else
                                {
                                    throw new Exception("Picked quantity is greater than available stock qty.");
                                }

                            }
                            else if (selecteddata.Count() < _data.selecteddQty)
                            {
                                double takeQty = convert.ToFloat(_data.selecteddQty) - selecteddata.Count();
                                List<int> selectedPartLocation = selecteddata.Select(x => x.PART_STOCK_DETAIL_ID).ToList();

                                List<V_PartInventoryStockDetails> nonselecteddata = lstAllStockdetails.Where(x => x.PARTLOCATIONID == _data.partlocationid && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                nonselecteddata = nonselecteddata.OrderByDescending(x => x.DATE_IN).ToList();
                                if (nonselecteddata.Count() > 0)
                                {
                                    if (nonselecteddata.Count() >= _data.selecteddQty)
                                    {
                                        List<int> addedPickList = nonselecteddata.Take(convert.ToInt(takeQty)).Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                        foreach (int partStockdetailkid in addedPickList)
                                        {
                                            if (!list.Contains(partStockdetailkid))
                                            {
                                                list.Add(partStockdetailkid);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Picked quantity is greater than available stock qty.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get available stock qty.");
                                }

                            }
                        }
                    }

                    if (spLine.Qty < list.Count())
                    {
                        throw new Exception("Selected Picked quantity should be less than Source quantity.");
                    }
                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                    executionStrategy.Execute(() =>
                    {

                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                        {
                            try
                            {
                                DoUnreserveItems_CO_Picklist(convert.ToInt(_data.orderlineid));
                                CustomerOrders _CustOrderObj = _dbContext.Customer_Orders.Find(convert.ToInt(_data.orderid));
                                if (_CustOrderObj != null)
                                {
                                    nOrderSiteId = _CustOrderObj.SiteId.Value;
                                }

                                CustomerOrderLine _CustOrderLineObj = _dbContext.Customer_Order_line.Where(x => x.CustOrderLineId == convert.ToInt(_data.orderlineid)).FirstOrDefault();
                                int nOrderedQty = convert.ToInt(_CustOrderLineObj.Qty.Value);
                                List<PartInventoryStockDetails> slPartstkId = new List<PartInventoryStockDetails>();
                                //dTotalpickedQty = _listData.Sum(x => convert.ToFloat(x.value));

                                for (int s = 0; s < list.Count; s++)
                                {
                                    int nPartStkId = convert.ToInt(list[s]);
                                    PartInventoryStockDetails _invStkdet = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                    V_PartInventoryStockDetails _vStkdet = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(nPartStkId);
                                    if (_invStkdet != null)
                                    {
                                        if (convert.ToInt(_invStkdet.qty_intransit_to_location) == 0)
                                        {
                                            _invStkdet.CustomerOrderId = convert.ToInt(_data.orderid);
                                            _invStkdet.CustomerOrderLineId = convert.ToInt(_data.orderlineid);
                                            _invStkdet.PICKED_QTY = 1;
                                            _invStkdet.UPDATED_DATE = DateTime.Now;
                                            if (convert.ToInt(_invStkdet.pick_exported) != 2)
                                            {
                                                _invStkdet.pick_exported = 1;
                                            }
                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_invStkdet);
                                            partsUpdate = _dbContext.SaveChanges();
                                            slPartstkId.Add(_invStkdet);
                                        }
                                        else
                                        {
                                            throw new Exception("Part Stock Detils with Partno : " + _vStkdet.PART_NUMBER + " serial no.: " + _vStkdet.SERIAL + " Location Code :" + _vStkdet.PARTLOCATION_CODE + " is In Transit.");
                                        }
                                    }
                                }

                                //var _stLocIdObj = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == Convert.ToInt32(_ShipLineObj.SalesPartId) && a.shipmentid == convert.ToInt(_data.shipmentid)).ToList();
                                var tmp = slPartstkId.GroupBy(x => x.PARTLOCATIONID);
                                var resultLoc = tmp.Select(y => new
                                {
                                    Id = y.Key,
                                    Quantity = y.Sum(x => x.QUANTITY)
                                });

                                foreach (var obj in resultLoc.ToList())
                                {
                                    int nPartlocId = obj.Id.Value; double TotalQuantity = obj.Quantity.Value;
                                    dTotalpickedQty += TotalQuantity;
                                    List<PartInventoryStock> _lstinventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == convert.ToInt(_data.salespartid) && x.SITEID == nOrderSiteId && x.PARTLOCATIONID == nPartlocId).ToList();
                                    if (_lstinventoryStkObj != null)
                                    {
                                        for (int i = 0; i < _lstinventoryStkObj.Count(); i++)
                                        {
                                            PartInventoryStock _inventoryStkObj = _lstinventoryStkObj[i];
                                            List<PartInventoryStockDetails> lstPartStockDetils = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == _inventoryStkObj.SITEID && a.SalesPartId == convert.ToInt(_inventoryStkObj.SalesPartId) && a.customerid == _inventoryStkObj.customerid && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID).ToList();
                                            double reserverQty = convert.ToFloat(lstPartStockDetils.Where(x => convert.ToInt(x.shipmentid) > 0 && convert.ToInt(x.qty_intransit_to_location) == 0 && x.DATE_OUT == null).Sum(x => x.QUANTITY));

                                            //double dOrgResere_qty = (_inventoryStkObj.QTY_RESERVED != null) ? _inventoryStkObj.QTY_RESERVED.Value : 0;
                                            //_inventoryStkObj.QTY_RESERVED = (dOrgResere_qty == 0) ? TotalQuantity : (dOrgResere_qty + TotalQuantity);
                                            _inventoryStkObj.QTY_RESERVED = reserverQty;
                                            _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                                            _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                                            _partStkUpdates = _dbContext.SaveChanges();
                                        }
                                    }
                                }

                                _CustOrderLineObj.co_picked_qty = dTotalpickedQty;

                                _CustOrderLineObj.Updated_Date = DateTime.Now;
                                _dbContext.Customer_Order_line.Update(_CustOrderLineObj);
                                _shiplinesUpdates = _dbContext.SaveChanges();

                                _CustOrderObj.StatusId = 7;
                                _CustOrderObj.Updated_Date = DateTime.Now;
                                _CustOrderObj.updated_by = _data.UserId;
                                _dbContext.Customer_Orders.Update(_CustOrderObj);
                                _dbContext.SaveChanges();
                                //set Customer Order status if shipment items are reserved
                                //SetReserveCustomerOrder(Id, nShipmentSiteId);

                                //var CurrentLine = _dataAccess.Shipment_Lines.Find(convert.ToInt(ShipmentLineId)); //update status in shipment line 
                                //var CustOrderLine = _dataAccess.Customer_Order_line.Find(CurrentLine.CustOrderLineId); //update status in customer order line
                                //var CustOrder = _dataAccess.Customer_Orders.Find(CustOrderLine.OrderId);
                                //CurrentLine.Picked_Qty = dTotalpickedQty;

                                //var CurrentShipment = _dataAccess.Shipment.Find(convert.ToInt(ShipmentId));
                                var Mast_Status = _dbContext.mast_statuses;
                                if (dTotalpickedQty == 0)
                                {
                                    var StatusID = Mast_Status.Where(x => x.status_desc == "Released").FirstOrDefault();
                                    _CustOrderLineObj.Item_Status = StatusID.statusid;
                                    _CustOrderLineObj.Updated_Date = DateTime.Now;
                                    _CustOrderLineObj.updated_by = _data.UserId;
                                    _CustOrderObj.StatusId = StatusID.statusid;
                                    _CustOrderObj.Updated_Date = DateTime.Now;
                                    _CustOrderObj.updated_by = _data.UserId;
                                }
                                else if (dTotalpickedQty <= _CustOrderLineObj.co_picked_qty)
                                {

                                    var StatusID = Mast_Status.Where(x => x.status_desc == "Picked").FirstOrDefault();
                                    _CustOrderLineObj.Item_Status = StatusID.statusid;
                                    _CustOrderLineObj.Updated_Date = DateTime.Now;
                                    _CustOrderLineObj.updated_by = _data.UserId;

                                    _CustOrderObj.StatusId = StatusID.statusid;
                                    _CustOrderObj.Updated_Date = DateTime.Now;
                                    _CustOrderObj.updated_by = _data.UserId;
                                }


                                _dbContext.Customer_Order_line.Update(_CustOrderLineObj);
                                _dbContext.Customer_Orders.Update(_CustOrderObj);
                                Updated += _dbContext.SaveChanges();
                                dbContextTransaction.Commit();

                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Updated Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Outbound Order Pick List.");
                                CommonFunction.SetAudit("Save_Picklist_details", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Updated Picked Qty for Part No : " + PartDetails.part_number + " , Customer : " + _cust.Customer_Name + " , Order No : " + _custOrder.Order_No + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Outbound Order Pick List.", "");

                                _dataReturn = true;

                            }
                            catch (Exception ex)
                            {
                                dbContextTransaction.Rollback();
                                throw new Exception("Error on SavePickedShipmentItems : " + ex.Message);
                            }
                        }

                    });
                }
            }
            else
            {
                throw new Exception("Unable to get User Id");
            }
            return _dataReturn;
        }

        private bool DoUnreserveItems_CO_Picklist(int CustomerOrderLineId)
        {
            int _shiplinesUpdates = -1, _partStkUpdates = -1, partsUpdate = -1;
            double dTotalReserveQty = 0.0d;
            List<int> slPartstkId = new List<int>(); slPartstkId.Clear();
            try
            {
                CustomerOrderLine _COLineObj = _dbContext.Customer_Order_line.Where(x => x.CustOrderLineId == CustomerOrderLineId).FirstOrDefault();
                if (_COLineObj == null) throw new Exception("Customer Order Lines not found.");

                var CurrentOrder = _dbContext.Customer_Orders.Find(_COLineObj.OrderId);
                int nOrderSiteId = CurrentOrder.SiteId.GetValueOrDefault();
                var PrevInvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == _COLineObj.SalesPartId && a.CustomerOrderId == CurrentOrder.OrderId).ToList();
                //var AllIds = _dataAccess.V_PART_INVENTORY_STOCK_DETAILS.Where(x => (x.PICKED_QTY == 0 || x.PICKED_QTY == null) && x.Shipmentid == ShipmentId && x.shipmentlineid == Convert.ToInt32(ShipmentLineId)).ToList();
                var AllIds = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.CustomerOrderId == CurrentOrder.OrderId && x.CustomerOrderLineId == _COLineObj.CustOrderLineId).ToList();
                for (int s = 0; s < AllIds.Count; s++)
                {
                    int nPartStockDetailId = AllIds[s].PART_STOCK_DETAIL_ID;
                    PartInventoryStockDetails _invStkdet = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(nPartStockDetailId);
                    if (_invStkdet != null)
                    {
                        _invStkdet.shipmentid = null;
                        _invStkdet.shipmentlineid = null;
                        _invStkdet.PICKED_QTY = null;
                        _invStkdet.pick_exported = null;
                        _invStkdet.CustomerOrderId = null;
                        _invStkdet.CustomerOrderLineId = null;
                        _invStkdet.UPDATED_DATE = DateTime.Now;
                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_invStkdet);
                        _partStkUpdates = _dbContext.SaveChanges();
                        slPartstkId.Add(nPartStockDetailId);
                    }
                }
                //Part Stock Update
                var UpdInvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nOrderSiteId && a.SalesPartId == _COLineObj.SalesPartId && (a.CustomerOrderId == CurrentOrder.OrderId)).ToList();

                var tmp = UpdInvStkObj.GroupBy(x => x.PARTLOCATIONID);
                var resultLoc = tmp.Select(y => new
                {
                    Id = y.Key,
                    Quantity = y.Sum(x => x.QUANTITY)
                });
                if (resultLoc.ToList().Count > 0)
                {
                    foreach (var obj in resultLoc.ToList())
                    {
                        int nPartlocId = obj.Id.Value; double TotalQuantity = obj.Quantity.Value;
                        dTotalReserveQty += TotalQuantity;

                        PartInventoryStock _inventoryStkObj = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == _COLineObj.SalesPartId && x.SITEID == nOrderSiteId && x.PARTLOCATIONID == nPartlocId).FirstOrDefault();
                        if (_inventoryStkObj != null)
                        {
                            _inventoryStkObj.QTY_RESERVED = TotalQuantity;
                            _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                            _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                            partsUpdate = _dbContext.SaveChanges();
                        }
                    }
                }
                else
                {
                    var _inventoryStkLst = _dbContext.PART_INVENTORY_STOCK.Where(x => x.SalesPartId == _COLineObj.SalesPartId && x.SITEID == nOrderSiteId).ToList();
                    if (_inventoryStkLst != null)
                    {
                        foreach (PartInventoryStock _inventoryStkObj in _inventoryStkLst)
                        {
                            double _reserverQty = convert.ToFloat(_dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == _inventoryStkObj.SalesPartId && a.customerid == _inventoryStkObj.customerid
                            && a.PARTLOCATIONID == _inventoryStkObj.PARTLOCATIONID && (a.shipmentid != null || a.CustomerOrderId != null) && a.qty_intransit_to_location.GetValueOrDefault() == 0
                            && a.DATE_OUT == null).ToList().Sum(x => x.QUANTITY));

                            _inventoryStkObj.QTY_RESERVED = _reserverQty;
                            _inventoryStkObj.UPDATED_DATE = DateTime.Now;
                            _dbContext.PART_INVENTORY_STOCK.Update(_inventoryStkObj);
                            partsUpdate = _dbContext.SaveChanges();
                        }
                    }
                }

                //update shipment lines unreserve qty
                _COLineObj.co_picked_qty = 0;

                _COLineObj.Updated_Date = DateTime.Now;
                _dbContext.Customer_Order_line.Update(_COLineObj);
                _shiplinesUpdates = _dbContext.SaveChanges();

                return (true);

            }
            catch (Exception ex)
            {
                LeSDM.AddLog("Error on DoUnreserveItems_CO_Picklist : " + ex.GetBaseException().ToString());

                return (false);
            }
        }

        #endregion

        #region WareHouse Management

        #region Select Parts

        [HttpPost]
        [Route("Get_All_Location")]
        public IActionResult Get_All_Location(getLocationData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                All_Locations _modal = new All_Locations();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Arrival_Location");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_dataValueStr, AUTHENTICATION_KEY);
                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Arrival_Location");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<MAST_SALES_PARTS_LOCATION> lstLoaction = new List<MAST_SALES_PARTS_LOCATION>();
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                foreach (Mast_Site _site in LstSites)
                                {
                                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                                    if (siteConfig != null)
                                    {
                                        MAST_SALES_PARTS_LOCATION _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                                        if (_arrivalLocation != null)
                                        {
                                            lstLoaction.Add(_arrivalLocation);
                                        }
                                    }
                                }
                                List<int> lstArrivalLocationID = lstLoaction.Select(x => x.PARTLOCATIONID).ToList();
                                List<ALL_LOCATION> _lstArrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstArrivalLocationID.Contains(x.PARTLOCATIONID) == true).Select(x => new ALL_LOCATION { PARTLOCATIONID = x.PARTLOCATIONID, PARTLOCATION_CODE = x.PARTLOCATION_CODE, PARTLOCATION_DESCR = x.PARTLOCATION_DESCR, is_arrival_location = 1 }).ToList();
                                List<ALL_LOCATION> _lstMainlLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstArrivalLocationID.Contains(x.PARTLOCATIONID) == false).Select(x => new ALL_LOCATION { PARTLOCATIONID = x.PARTLOCATIONID, PARTLOCATION_CODE = x.PARTLOCATION_CODE, PARTLOCATION_DESCR = x.PARTLOCATION_DESCR, is_arrival_location = 0 }).ToList();
                                List<ALL_LOCATION> _lstAlllLocation = _lstArrivalLocation.Concat(_lstMainlLocation).ToList();
                                _modal.lst_All_Location = _lstAlllLocation;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Arrival_Location  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Arrival_Location", "Error", "", "Error Get_Arrival_Location - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Arrival_Location stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Arrival_Location_List")]
        public IActionResult Get_Arrival_Location_List(getLocationData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Arrival_Locations _modal = new Arrival_Locations();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Arrival_Location_List");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);

                    CommonFunction.setLog("Data : " + _dataValueStr);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Arrival_Location");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<MAST_SALES_PARTS_LOCATION> lstLoaction = new List<MAST_SALES_PARTS_LOCATION>();
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                foreach (Mast_Site _site in LstSites)
                                {
                                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                                    if (siteConfig != null)
                                    {
                                        MAST_SALES_PARTS_LOCATION _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                                        if (_arrivalLocation != null)
                                        {
                                            lstLoaction.Add(_arrivalLocation);
                                        }
                                    }
                                }
                                _modal.lst_Arrival_Location = lstLoaction.ToList();

                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Arrival_Location_List  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Arrival_Location_List", "Error", "", "Error Get_Arrival_Location_List - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Arrival_Location_List stopped successfully.");
            }
        }

        private List<MAST_SALES_PARTS_LOCATION> get_ArrivalLocation(int UserId)
        {
            List<MAST_SALES_PARTS_LOCATION> lstLoaction = new List<MAST_SALES_PARTS_LOCATION>();
            try
            {
                if (convert.ToInt(UserId) > 0)
                {
                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == UserId);
                    if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                    {
                        throw new Exception("Unable to get Userdata for Userid : " + UserId);
                    }
                    else
                    {
                        CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Arrival_Location");

                        var SiteId = GetLinkedSites(_UserData);
                        List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                        List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();


                        foreach (Mast_Site _site in LstSites)
                        {
                            Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                            if (siteConfig != null)
                            {
                                MAST_SALES_PARTS_LOCATION _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                                if (_arrivalLocation != null)
                                {
                                    lstLoaction.Add(_arrivalLocation);
                                }
                            }
                        }
                    }
                }
                else
                {
                    throw new Exception("Unable to get User id");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return lstLoaction.ToList();
        }

        [HttpPost]
        [Route("Get_Main_Location_List")]
        public IActionResult Get_Main_Location_List(getLocationData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Main_Locations _modal = new Main_Locations();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Main_Location_List");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);

                    CommonFunction.setLog("Data : " + _dataValueStr);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Arrival_Location");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<MAST_SALES_PARTS_LOCATION> lstLoaction = new List<MAST_SALES_PARTS_LOCATION>();
                                _modal.Mast_Company = _dbContext.Mast_Company.Find(convert.ToInt(_UserData.COMPANYID));
                                foreach (Mast_Site _site in LstSites)
                                {
                                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                                    if (siteConfig != null)
                                    {
                                        MAST_SALES_PARTS_LOCATION _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                                        if (_arrivalLocation != null)
                                        {
                                            lstLoaction.Add(_arrivalLocation);
                                        }
                                    }
                                }
                                List<int> lstArrivalLocationID = lstLoaction.Select(x => x.PARTLOCATIONID).ToList();


                                _modal.lst_Main_Location = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstArrivalLocationID.Contains(x.PARTLOCATIONID) == false).ToList();

                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Main_Location_List  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Main_Location_List", "Error", "", "Error Get_Main_Location_List - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Main_Location_List stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Location")]
        public IActionResult Get_Location(getLocationScannerData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Location");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);

                    CommonFunction.setLog("Data : " + _dataValueStr);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Location");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                MAST_SALES_PARTS_LOCATION sLoaction = new MAST_SALES_PARTS_LOCATION();
                                foreach (Mast_Site _site in LstSites)
                                {
                                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                                    if (siteConfig != null)
                                    {
                                        sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.FirstOrDefault(x => LstSiteIds.Contains((int)x.siteid) && x.PARTLOCATION_CODE.Contains(_data.LocationCode));
                                        if (sLoaction == null)
                                        {
                                            throw new Exception("Location code '" + _data.LocationCode + "' not found please try again.");
                                        }
                                    }
                                }
                                return Ok(sLoaction);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok();
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Location  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Location", "Error", "", "Error Get_Location - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Location stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Selected_Parts_From_Location")]
        public IActionResult Get_Selected_Parts_From_Location(getLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();

                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Selected_Parts_From_Location");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);

                    CommonFunction.setLog("Data : " + _dataValueStr);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Selected_Parts_From_Location");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lstMainPartStockDetails = new List<PartInventoryStockDetails>();

                                List<string> lstStr = new List<string>();
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);
                                if (sLoaction != null)
                                {
                                    lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.qty_intransit_to_location >= 1 && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
                                    lstMainPartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.shipmentid == null && x.CustomerOrderId == null).ToList();
                                }

                                if (lstPartStockDetails.Count() > 0)
                                {
                                    foreach (V_PartInventoryStockDetails vPartDetails in lstPartStockDetails)
                                    {
                                        Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();
                                        if (convert.ToInt(vPartDetails.RECEIVE_WITH_SERIALS) == 1)
                                        {
                                            PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(vPartDetails.PART_STOCK_DETAIL_ID);
                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid);
                                            //selPartDetails.ids.Add(vPartDetails.PART_STOCK_DETAIL_ID);
                                            selPartDetails.salespartid = vPartDetails.SalesPartId;
                                            selPartDetails.quantity = vPartDetails.QUANTITY;
                                            selPartDetails.quantity_in_hand = PartStock.QTY_IN_HAND;
                                            selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                            selPartDetails.uom = vPartDetails.UOM;
                                            selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                            selPartDetails.partname = vPartDetails.PARTNAME;
                                            selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                            selPartDetails.siteid = vPartDetails.SITEID;
                                            selPartDetails.site_code = vPartDetails.SITE_CODE;
                                            selPartDetails.orderid = vPartDetails.OrderId;
                                            selPartDetails.orderno = vPartDetails.internal_order_no;
                                            selPartDetails.m3 = vPartDetails.M3;
                                            selPartDetails.serial = vPartDetails.SERIAL;
                                            selPartDetails.batch = vPartDetails.BATCH;
                                            selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                            selPartDetails.customerid = vPartDetails.customerid;
                                            selPartDetails.customer_name = vPartDetails.customer_name;
                                            selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                            selPartDetails.stock_type = vPartDetails.stock_type;
                                            selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                            selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                            selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                            selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                            selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                            selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                            selPartDetails.updated_date = _partStockdetails.UPDATED_DATE;
                                            lstSelectPartStockDetails.Add(selPartDetails);
                                        }
                                        else
                                        {
                                            List<Select_PartInventoryStockDetails> lstD = lstSelectPartStockDetails.Where(x => x.salespartid == vPartDetails.SalesPartId && x.partlocationid == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                            if (lstD.Count() == 0)
                                            {
                                                List<V_PartInventoryStockDetails> lstData = lstPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                                List<PartInventoryStockDetails> lstMainData = lstMainPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                                lstMainData = lstMainData.OrderByDescending(x => x.UPDATED_DATE).ToList();
                                                List<V_PartInventoryStockDetails> lstTotalStockDetailByStockType = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.Shipmentid == null && x.CustomerOrderId == null && x.SalesPartId == vPartDetails.SalesPartId && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                                if (lstData != null && lstData.Count() > 0)
                                                {
                                                    DateTime _UpdateDate = DateTime.Now;
                                                    PartInventoryStockDetails _partStockdetails = lstMainData.FirstOrDefault();
                                                    if (_partStockdetails != null)
                                                    {
                                                        _UpdateDate = convert.ToDateTime(_partStockdetails.UPDATED_DATE);
                                                    }
                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lstData[0].SalesPartId && x.PARTLOCATIONID == lstData[0].PARTLOCATIONID && x.customerid == lstData[0].customerid);
                                                    double qty = convert.ToFloat(lstData.Sum(x => x.QUANTITY));
                                                    double Total_qty = convert.ToFloat(lstTotalStockDetailByStockType.Sum(x => x.QUANTITY));
                                                    List<int> ids = lstData.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                                    //selPartDetails.ids = ids;
                                                    selPartDetails.salespartid = vPartDetails.SalesPartId;
                                                    selPartDetails.quantity = qty;
                                                    selPartDetails.quantity_in_hand = Total_qty;
                                                    selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                                    selPartDetails.uom = vPartDetails.UOM;
                                                    selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                                    selPartDetails.partname = vPartDetails.PARTNAME;
                                                    selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                                    selPartDetails.siteid = vPartDetails.SITEID;
                                                    selPartDetails.site_code = vPartDetails.SITE_CODE;
                                                    selPartDetails.orderid = vPartDetails.OrderId;
                                                    selPartDetails.orderno = vPartDetails.internal_order_no;
                                                    selPartDetails.m3 = vPartDetails.M3;
                                                    selPartDetails.serial = vPartDetails.SERIAL;
                                                    selPartDetails.batch = vPartDetails.BATCH;
                                                    selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                                    selPartDetails.customerid = vPartDetails.customerid;
                                                    selPartDetails.customer_name = vPartDetails.customer_name;
                                                    selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                                    selPartDetails.stock_type = vPartDetails.stock_type;
                                                    selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                                    selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                                    selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                                    selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                                    selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                                    selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                                    selPartDetails.updated_date = _UpdateDate;

                                                    lstSelectPartStockDetails.Add(selPartDetails);
                                                }
                                            }
                                        }
                                    }

                                    lstSelectPartStockDetails = lstSelectPartStockDetails.OrderByDescending(x => x.updated_date).ToList();
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(lstSelectPartStockDetails);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Selected_Parts_From_Location  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Selected_Parts_From_Location", "Error", "", "Error Get_Selected_Parts_From_Location - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Selected_Parts_From_Location stopped successfully.");
            }
        }

        private ModalViewSelectedParts Get_Selected_Multiple_Part_Inventory_Details_by_customers(ModalViewSelectedParts _modal, List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details)
        {
            List<Customer_Info> customer_info = (List<Customer_Info>)lst_v_part_inventory_stock_details.Select(x => new Customer_Info { customerid = x.customerid, customer_name = x.customer_name }).ToList();
            customer_info = customer_info.Distinct(new Customer_Info_EqualityComparer()).ToList();
            _modal.customer_info = customer_info;

            List<StockType_Info_by_Customer> StockType_Info = (List<StockType_Info_by_Customer>)lst_v_part_inventory_stock_details.Select(x => new StockType_Info_by_Customer { customerid = x.customerid, stocktypeid = x.stock_typeid, stocktypecode = x.stock_type }).ToList();
            StockType_Info = StockType_Info.Distinct(new StockType_Info_by_Customer_EqualityComparer<StockType_Info_by_Customer>()).ToList();
            foreach (StockType_Info_by_Customer stockType in StockType_Info)
            {
                if (stockType.stocktypeid == null)
                {
                    stockType.stocktypecode = "INBULK-STOCK";
                }
            }
            _modal.stocktype_info_by_customer = StockType_Info;

            List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();

            foreach (V_PartInventoryStockDetails vPartDetails in lst_v_part_inventory_stock_details)
            {
                List<V_PartInventoryStockDetails> lstData1 = new List<V_PartInventoryStockDetails>();
                if (lstSelectPartStockDetails.Count() == 0 || lstSelectPartStockDetails.Where(x => x.salespartid == vPartDetails.SalesPartId && x.partlocationid == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).Count() == 0)
                {
                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid);
                    List<V_PartInventoryStockDetails> lstData = lst_v_part_inventory_stock_details.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                    List<V_PartInventoryStockDetails> lstTotalStockDetailByStockType = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                    double qty_In_hand = convert.ToFloat(lstTotalStockDetailByStockType.Sum(x => x.QUANTITY));

                    if (lstData != null && lstData.Count() > 0)
                    {
                        Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();

                        //selPartDetails.ids = ids;
                        for (int i = 0; i < lstData.Count(); i++)
                        {
                            Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(lstData[i].stock_typeid);
                            if (mastStockType != null)
                            {
                                if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                {
                                    CommonFunction.setLog("Unable to select Part Number " + vPartDetails.PART_NUMBER + " serial : " + vPartDetails.SERIAL + " as Part Movement Control is not set to move.");
                                    continue;
                                }
                                else
                                {
                                    lstData1.Add(lstData[i]);
                                }
                            }
                            else
                            {
                                lstData1.Add(lstData[i]);
                            }
                        }
                        lstData = lstData1;
                        List<int> ids = lstData.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                        double qty = convert.ToFloat(lstData.Sum(x => x.QUANTITY));
                        selPartDetails.salespartid = vPartDetails.SalesPartId;
                        selPartDetails.quantity = qty;
                        //Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();
                        //selPartDetails.ids.Add(vPartDetails.PART_STOCK_DETAIL_ID);
                        //selPartDetails.salespartid = vPartDetails.SalesPartId;
                        //selPartDetails.quantity = vPartDetails.QUANTITY;
                        selPartDetails.quantity_in_hand = qty_In_hand;
                        selPartDetails.partstockid = PartStock.PARTSTOCKID;
                        selPartDetails.uom = vPartDetails.UOM;
                        selPartDetails.part_number = vPartDetails.PART_NUMBER;
                        selPartDetails.partname = vPartDetails.PARTNAME;
                        selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                        selPartDetails.siteid = vPartDetails.SITEID;
                        selPartDetails.site_code = vPartDetails.SITE_CODE;
                        selPartDetails.orderid = vPartDetails.OrderId;
                        selPartDetails.m3 = vPartDetails.M3;
                        selPartDetails.serial = vPartDetails.SERIAL;
                        selPartDetails.batch = vPartDetails.BATCH;
                        selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                        selPartDetails.customerid = vPartDetails.customerid;
                        selPartDetails.customer_name = vPartDetails.customer_name;
                        selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                        selPartDetails.stock_type = vPartDetails.stock_type;
                        selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                        selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                        selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                        selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                        selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                        selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                        lstSelectPartStockDetails.Add(selPartDetails);
                    }
                }
            }
            if (lstSelectPartStockDetails.Count() > 0)
            {
                _modal.partlist = lstSelectPartStockDetails;
            }
            else
            {
                throw new Exception("No Part found for selection.");
            }
            return _modal;
        }

        private ModalViewSelectedParts Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(ModalViewSelectedParts _modal, List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details)
        {
            List<Customer_Info> customer_info = (List<Customer_Info>)lst_v_part_inventory_stock_details.Select(x => new Customer_Info { customerid = x.customerid, customer_name = x.customer_name }).ToList();
            customer_info = customer_info.Distinct(new Customer_Info_EqualityComparer()).ToList();
            _modal.customer_info = customer_info;

            List<StockType_Info_by_Customer> StockType_Info = (List<StockType_Info_by_Customer>)lst_v_part_inventory_stock_details.Select(x => new StockType_Info_by_Customer { customerid = x.customerid, stocktypeid = x.stock_typeid, stocktypecode = x.stock_type }).ToList();
            StockType_Info = StockType_Info.Distinct(new StockType_Info_by_Customer_EqualityComparer<StockType_Info_by_Customer>()).ToList();
            foreach (StockType_Info_by_Customer stockType in StockType_Info)
            {
                if (stockType.stocktypeid == null)
                {
                    stockType.stocktypecode = "INBULK-STOCK";
                }
            }
            _modal.stocktype_info_by_customer = StockType_Info;

            List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();

            foreach (V_PartInventoryStockDetails vPartDetails in lst_v_part_inventory_stock_details)
            {
                List<V_PartInventoryStockDetails> lstData1 = new List<V_PartInventoryStockDetails>();
                if (lstSelectPartStockDetails.Count() == 0 || lstSelectPartStockDetails.Where(x => x.salespartid == vPartDetails.SalesPartId && x.partlocationid == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).Count() == 0)
                {
                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid);
                    List<V_PartInventoryStockDetails> lstData = lst_v_part_inventory_stock_details.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                    List<V_PartInventoryStockDetails> lstTotalStockDetailByStockType = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                    double qty_In_hand = convert.ToFloat(lstTotalStockDetailByStockType.Sum(x => x.QUANTITY));
                    INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.FirstOrDefault(x => x.INTERNALORDERID == vPartDetails.OrderId);
                    List<INTERNAL_ORDER_LINE> _orderline = _dbContext.INTERNAL_ORDER_LINE.Where(x => x.SALESPARTID == vPartDetails.SalesPartId && x.ORDERID == _internalOrder.INTERNALORDERID).ToList();
                    double? qty_to_be_receive = convert.ToFloat(lst_v_part_inventory_stock_details.Where(x => x.stock_typeid == null).ToList().Count());
                    double? order_qty = convert.ToFloat(_orderline.Sum(x => x.QTY));
                    double? order_rec_qty = convert.ToFloat(_orderline.Sum(x => x.QTY_REC));

                    if (lstData != null && lstData.Count() > 0)
                    {
                        Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();

                        //selPartDetails.ids = ids;
                        for (int i = 0; i < lstData.Count(); i++)
                        {
                            Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(lstData[i].stock_typeid);
                            if (mastStockType != null)
                            {
                                if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                {
                                    CommonFunction.setLog("Unable to select Part Number " + vPartDetails.PART_NUMBER + " serial : " + vPartDetails.SERIAL + " as Part Movement Control is not set to move.");
                                    continue;
                                }
                                else
                                {
                                    lstData1.Add(lstData[i]);
                                }
                            }
                            else
                            {
                                lstData1.Add(lstData[i]);
                            }
                        }
                        lstData = lstData1;
                        List<int> ids = lstData.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                        double qty = convert.ToFloat(lstData.Sum(x => x.QUANTITY));
                        selPartDetails.salespartid = vPartDetails.SalesPartId;
                        selPartDetails.quantity = qty;
                        selPartDetails.quantity_in_hand = qty_In_hand;

                        selPartDetails.order_quantity = order_qty;
                        selPartDetails.order_rec_quantity = order_rec_qty;
                        selPartDetails.quantity_inbulk_to_be_receive = qty_to_be_receive;
                        selPartDetails.receive_date = convert.ToDateTime(vPartDetails.DATE_IN).ToString("dd/MM/yyyy HH:mm");

                        selPartDetails.partstockid = PartStock.PARTSTOCKID;
                        selPartDetails.uom = vPartDetails.UOM;
                        selPartDetails.part_number = vPartDetails.PART_NUMBER;
                        selPartDetails.partname = vPartDetails.PARTNAME;
                        selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                        selPartDetails.siteid = vPartDetails.SITEID;
                        selPartDetails.site_code = vPartDetails.SITE_CODE;
                        selPartDetails.orderid = vPartDetails.OrderId;
                        selPartDetails.m3 = vPartDetails.M3;
                        selPartDetails.serial = vPartDetails.SERIAL;
                        selPartDetails.batch = vPartDetails.BATCH;
                        selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                        selPartDetails.customerid = vPartDetails.customerid;
                        selPartDetails.customer_name = vPartDetails.customer_name;
                        selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                        selPartDetails.stock_type = vPartDetails.stock_type;
                        selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                        selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                        selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                        selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                        selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                        selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                        lstSelectPartStockDetails.Add(selPartDetails);
                    }
                }
            }
            if (lstSelectPartStockDetails.Count() > 0)
            {
                _modal.partlist = lstSelectPartStockDetails;
            }
            else
            {
                throw new Exception("No Part found for selection.");
            }
            return _modal;
        }


        //[HttpPost]   // Old Function
        //[Route("Check_Set_Parts_From_Location")]
        //public IActionResult Check_Set_Parts_From_Location(SetLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        //{
        //    try
        //    {
        //        string partNum = "", serialNum = "";
        //        v_salesparts vParts = null;
        //        V_PartInventoryStockDetails v_part_inventory_stock_details = null;
        //        List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();

        //        if (_data != null)
        //        {
        //            CommonFunction.setLog("=====================================================");
        //            CommonFunction.setLog("Processing started for Check_Set_Parts_From_Location");
        //            string _dataValueStr = JsonConvert.SerializeObject(_data);
        //            CommonFunction.setLog("Data : " + _dataValueStr);
        //            
        //            bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
        //            if (value)
        //            {
        //                if (convert.ToInt(_data.UserId) > 0)
        //                {
        //                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
        //                    if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
        //                    {
        //                        return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
        //                    }
        //                    else
        //                    {
        //                        CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Check_Set_Parts_From_Location");
        //                        var SiteId = GetLinkedSites(_UserData);
        //                        List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
        //                        List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
        //                        List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();

        //                        MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);

        //                        if (sLoaction != null)
        //                        {
        //                            if (_data.ScannedPartNo != "")
        //                            {
        //                                if (_data.ScannedPartNo.Contains("*"))
        //                                {
        //                                    string[] arrPartData = _data.ScannedPartNo.Split('*');
        //                                    partNum = arrPartData[0];
        //                                    serialNum = arrPartData[1];
        //                                    vParts = getPartDetails(partNum);
        //                                    if (vParts != null)
        //                                    {
        //                                        if (convert.ToInt(vParts.receive_with_serials) == 1)
        //                                        {
        //                                            List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && (x.qty_intransit_to_location == null || x.qty_intransit_to_location >= 1) && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
        //                                            if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
        //                                            {
        //                                                if (lst_v_part_inventory_stock_details.Count() > 0 && lst_v_part_inventory_stock_details.Count() == 1)
        //                                                {
        //                                                    if (lst_v_part_inventory_stock_details.FirstOrDefault(x => x.qty_intransit_to_location >= 1) != null)
        //                                                    {
        //                                                        throw new Exception("Part already selected");
        //                                                    }

        //                                                    v_part_inventory_stock_details = lst_v_part_inventory_stock_details[0];
        //                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == v_part_inventory_stock_details.SalesPartId && x.PARTLOCATIONID == v_part_inventory_stock_details.PARTLOCATIONID && x.customerid == v_part_inventory_stock_details.customerid);
        //                                                    PartInventoryStockDetails PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);

        //                                                    Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
        //                                                    if (mastStockType != null)
        //                                                    {
        //                                                        if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
        //                                                        {
        //                                                            throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");

        //                                                        }
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
        //                                                    }

        //                                                    if (convert.ToInt(v_part_inventory_stock_details.Shipmentid) != 0 && convert.ToInt(v_part_inventory_stock_details.shipmentlineid) != 0)
        //                                                    {
        //                                                        throw new Exception("Part is already in reserver status for this location.");
        //                                                    }
        //                                                    if (convert.ToInt(v_part_inventory_stock_details.qty_intransit_to_location) >= 1)
        //                                                    {
        //                                                        throw new Exception("Part is already in intransit status for this location.");
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
        //                                                        executionStrategy.Execute(() =>
        //                                                        {
        //                                                            using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
        //                                                            {
        //                                                                try
        //                                                                {
        //                                                                    PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
        //                                                                    if (PartStockDetails.qty_intransit_to_location >= 1)
        //                                                                    {
        //                                                                        throw new Exception("Part already selected");
        //                                                                    }

        //                                                                    PartStockDetails.qty_intransit_to_location = 1;
        //                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
        //                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
        //                                                                    _dbContext.SaveChanges();
        //                                                                    if (PartStock != null)
        //                                                                    {
        //                                                                        List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
        //                                                                        double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
        //                                                                        if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
        //                                                                        {
        //                                                                            PartStock.QTY_INTRANSIT = selectedSumQty;
        //                                                                            PartStock.UPDATED_DATE = DateTime.Now;

        //                                                                            _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
        //                                                                            _dbContext.SaveChanges();
        //                                                                        }
        //                                                                        else
        //                                                                        {
        //                                                                            throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
        //                                                                        }
        //                                                                    }
        //                                                                    else
        //                                                                    {
        //                                                                        throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
        //                                                                    }
        //                                                                    dbContextTransaction.Commit();
        //                                                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.");
        //                                                                    CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.", "");

        //                                                                    return Ok(true);
        //                                                                }
        //                                                                catch (Exception ex)
        //                                                                {
        //                                                                    dbContextTransaction.Rollback();
        //                                                                    throw ex;
        //                                                                }
        //                                                            }
        //                                                        });
        //                                                    }
        //                                                }
        //                                                else
        //                                                {
        //                                                    ModalViewSelectedParts _modal = new ModalViewSelectedParts();
        //                                                    lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                                    if (lst_v_part_inventory_stock_details.Count() > 0)
        //                                                    {
        //                                                        _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
        //                                                        return Ok(_modal);
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                throw new Exception("Unable to get Part info for the Location.");
        //                                            }
        //                                        }
        //                                        else
        //                                        {
        //                                            //Parts without serial number;
        //                                            List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
        //                                            if (serialNum != "")
        //                                            {
        //                                                lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                            }
        //                                            else
        //                                            {
        //                                                lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                            }
        //                                            //List<PartInventoryStockDetails> lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.shipmentlineid == null).ToList();
        //                                            if (lst_Partdetails.Count() > 0)
        //                                            {
        //                                                List<int> customerIdList = lst_Partdetails.Select(x => (int)x.customerid).ToList();
        //                                                customerIdList = customerIdList.Distinct().ToList();
        //                                                if (customerIdList.Count > 0 && customerIdList.Count() == 1)
        //                                                {

        //                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
        //                                                    if (PartStock != null)
        //                                                    {
        //                                                        if (lst_Partdetails.Count() == 1)  // if Non serials Part has only 1 Partdetails  
        //                                                        {
        //                                                            //double s_qty_intransit = convert.ToFloat(lst_Partdetails.Sum(x => x.QUANTITY));
        //                                                            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
        //                                                            executionStrategy.Execute(() =>
        //                                                            {
        //                                                                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
        //                                                                {
        //                                                                    try
        //                                                                    {
        //                                                                        foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
        //                                                                        {
        //                                                                            v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
        //                                                                            Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
        //                                                                            if (mastStockType != null)
        //                                                                            {
        //                                                                                if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
        //                                                                                {
        //                                                                                    CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");

        //                                                                                }
        //                                                                                else
        //                                                                                {
        //                                                                                    PartInventoryStockDetails PartStockDetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
        //                                                                                    if (PartStockDetails1.qty_intransit_to_location >= 1)
        //                                                                                    {
        //                                                                                        throw new Exception("Part already selected");
        //                                                                                    }

        //                                                                                    PartStockDetails.qty_intransit_to_location = 1;
        //                                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
        //                                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
        //                                                                                    _dbContext.SaveChanges();
        //                                                                                }
        //                                                                            }
        //                                                                            else
        //                                                                            {
        //                                                                                CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
        //                                                                            }

        //                                                                        }
        //                                                                        if (PartStock != null)
        //                                                                        {
        //                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
        //                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
        //                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
        //                                                                            {
        //                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
        //                                                                                PartStock.UPDATED_DATE = DateTime.Now;
        //                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
        //                                                                                _dbContext.SaveChanges();
        //                                                                            }
        //                                                                            else
        //                                                                            {
        //                                                                                throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
        //                                                                            }
        //                                                                        }
        //                                                                        else
        //                                                                        {
        //                                                                            throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
        //                                                                        }
        //                                                                        dbContextTransaction.Commit();
        //                                                                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.");
        //                                                                        CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.", "");

        //                                                                        return Ok(true);
        //                                                                    }
        //                                                                    catch (Exception ex)
        //                                                                    {
        //                                                                        dbContextTransaction.Rollback();
        //                                                                        throw ex;
        //                                                                    }
        //                                                                }
        //                                                            });
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            ModalViewSelectedParts _modal = new ModalViewSelectedParts();
        //                                                            List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                                            if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
        //                                                            {
        //                                                                if (customerIdList.Count() > 0)
        //                                                                {
        //                                                                    _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
        //                                                                    return Ok(_modal);
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        throw new Exception("Unable to get PartStock for PartNumber  " + vParts.part_number + " in the current location");
        //                                                    }
        //                                                }
        //                                                else
        //                                                {
        //                                                    ModalViewSelectedParts _modal = new ModalViewSelectedParts();
        //                                                    List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                                    if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
        //                                                    {
        //                                                        if (customerIdList.Count() > 0 && customerIdList.Count() > 1)
        //                                                        {
        //                                                            _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
        //                                                            return Ok(_modal);
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                throw new Exception("Unable to get Partnumber " + vParts.part_number + " in the current location");
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        throw new Exception("Invalid Part no.");
        //                                    }
        //                                }
        //                                else
        //                                {
        //                                    //Parts with receive_with_serials equal false;
        //                                    vParts = getPartDetails(_data.ScannedPartNo);
        //                                    if (vParts != null)
        //                                    {
        //                                        if (convert.ToInt(vParts.receive_with_serials) == 1)
        //                                        {
        //                                            throw new Exception("Partnumber requires serial number to add.");
        //                                        }
        //                                        else
        //                                        {
        //                                            List<PartInventoryStockDetails> lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                            if (lst_Partdetails.Count() > 0)
        //                                            {
        //                                                List<int> customerIdList = lst_Partdetails.Select(x => (int)x.customerid).ToList();
        //                                                customerIdList = customerIdList.Distinct().ToList();
        //                                                if (customerIdList.Count() > 0 && customerIdList.Count() == 1)
        //                                                {
        //                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
        //                                                    if (PartStock != null)
        //                                                    {
        //                                                        //double s_qty_intransit = convert.ToFloat(lst_Partdetails.Sum(x => x.QUANTITY));
        //                                                        if (lst_Partdetails.Count() == 1)
        //                                                        {
        //                                                            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
        //                                                            executionStrategy.Execute(() =>
        //                                                            {
        //                                                                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
        //                                                                {
        //                                                                    try
        //                                                                    {
        //                                                                        foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
        //                                                                        {
        //                                                                            v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
        //                                                                            Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
        //                                                                            if (mastStockType != null)
        //                                                                            {
        //                                                                                if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
        //                                                                                {
        //                                                                                    CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
        //                                                                                }
        //                                                                                else
        //                                                                                {
        //                                                                                    PartInventoryStockDetails PartStockDetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
        //                                                                                    if (PartStockDetails1.qty_intransit_to_location >= 1)
        //                                                                                    {
        //                                                                                        throw new Exception("Part already selected");
        //                                                                                    }

        //                                                                                    PartStockDetails.qty_intransit_to_location = 1;
        //                                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
        //                                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
        //                                                                                    _dbContext.SaveChanges();
        //                                                                                }
        //                                                                            }
        //                                                                            else
        //                                                                            {
        //                                                                                CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
        //                                                                            }

        //                                                                        }
        //                                                                        if (PartStock != null)
        //                                                                        {
        //                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
        //                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
        //                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
        //                                                                            {
        //                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
        //                                                                                PartStock.UPDATED_DATE = DateTime.Now;
        //                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
        //                                                                                _dbContext.SaveChanges();
        //                                                                            }
        //                                                                            else
        //                                                                            {
        //                                                                                throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
        //                                                                            }
        //                                                                        }
        //                                                                        else
        //                                                                        {
        //                                                                            throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
        //                                                                        }
        //                                                                        dbContextTransaction.Commit();
        //                                                                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.");
        //                                                                        CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.", "");

        //                                                                        return Ok(true);
        //                                                                    }
        //                                                                    catch (Exception ex)
        //                                                                    {
        //                                                                        dbContextTransaction.Rollback();
        //                                                                        throw ex;
        //                                                                    }
        //                                                                }
        //                                                            });
        //                                                        }
        //                                                        else
        //                                                        {
        //                                                            ModalViewSelectedParts _modal = new ModalViewSelectedParts();
        //                                                            List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                                            if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
        //                                                            {
        //                                                                if (customerIdList.Count() > 0 && customerIdList.Count() == 1)
        //                                                                {

        //                                                                    _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
        //                                                                    return Ok(_modal);
        //                                                                }
        //                                                            }
        //                                                        }
        //                                                    }
        //                                                    else
        //                                                    {
        //                                                        throw new Exception("Unable to get PartStock for PartNumber  " + vParts.part_number + " in the current location");
        //                                                    }
        //                                                }
        //                                                else
        //                                                {
        //                                                    ModalViewSelectedParts _modal = new ModalViewSelectedParts();
        //                                                    List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
        //                                                    if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
        //                                                    {
        //                                                        if (customerIdList.Count() > 0)
        //                                                        {
        //                                                            _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
        //                                                            return Ok(_modal);
        //                                                        }
        //                                                    }
        //                                                }
        //                                            }
        //                                            else
        //                                            {
        //                                                throw new Exception("Unable to get Partnumber " + vParts.part_number + " in the current location");
        //                                            }
        //                                        }
        //                                    }
        //                                    else
        //                                    {
        //                                        throw new Exception("Invalid Part no.");
        //                                    }
        //                                }
        //                            }
        //                            else
        //                            {
        //                                throw new Exception("Unable to get scanned Part no.");
        //                            }
        //                        }
        //                        else
        //                        {
        //                            throw new Exception("Unable to get location details.");
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    throw new Exception("Unable to get User id");
        //                }
        //            }
        //            else
        //            {
        //                throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
        //            }
        //        }
        //        else
        //        {
        //            throw new Exception("Unable to get data");
        //        }
        //        return Ok(true);
        //    }
        //    catch (Exception ex)
        //    {
        //        CommonFunction.setLog("Error on Check_Set_Parts_From_Location  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
        //        CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Error", "", "Error Check_Set_Parts_From_Location - " + ex.Message, "");
        //        return BadRequest(ex.Message);
        //    }
        //    finally
        //    {
        //        CommonFunction.setLog("Check_Set_Parts_From_Location stopped successfully.");
        //    }
        //}

        [HttpPost]
        [Route("Check_Set_Parts_From_Location")]
        public IActionResult Check_Set_Parts_From_Location(SetLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();

                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Check_Set_Parts_From_Location");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Data : " + _dataValueStr);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Check_Set_Parts_From_Location");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();

                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);

                                if (sLoaction != null)
                                {
                                    if (_data.scannedpartno != "")
                                    {
                                        partNum = convert.ToString(_data.scannedpartno);
                                        serialNum = convert.ToString(_data.scannedserialno);
                                        vParts = getPartDetails(partNum);
                                        if (vParts != null)
                                        {
                                            if (convert.ToInt(vParts.receive_with_serials) == 1)
                                            {
                                                List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum).ToList();
                                                if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                {
                                                    if (lst_v_part_inventory_stock_details.Where(x => (x.qty_intransit_to_location == null || x.qty_intransit_to_location >= 1) && x.Shipmentid == null && x.CustomerOrderId == null).ToList().Count() == 0)
                                                    {
                                                        V_PartInventoryStockDetails _dataValue = lst_v_part_inventory_stock_details.FirstOrDefault();
                                                        if (_dataValue.stock_statusid == 24 || _dataValue.stock_statusid == 29 || _dataValue.stock_statusid == 33 || _dataValue.stock_statusid == 32)
                                                        {
                                                            string _status_desc = _dbContext.mast_statuses.Find(_dataValue.stock_statusid).status_desc;
                                                            throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in " + _status_desc + " status.");
                                                        }
                                                        else if (convert.ToInt(_dataValue.Shipmentid) > 0 && convert.ToInt(_dataValue.CustomerOrderId) > 0)
                                                        {
                                                            throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in reserved status.");
                                                        }
                                                    }

                                                    if (lst_v_part_inventory_stock_details.Count() > 0 && lst_v_part_inventory_stock_details.Count() == 1)
                                                    {
                                                        if (lst_v_part_inventory_stock_details.FirstOrDefault(x => x.qty_intransit_to_location >= 1) != null)
                                                        {
                                                            throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is already selected.");
                                                        }

                                                        v_part_inventory_stock_details = lst_v_part_inventory_stock_details[0];
                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == v_part_inventory_stock_details.SalesPartId && x.PARTLOCATIONID == v_part_inventory_stock_details.PARTLOCATIONID && x.customerid == v_part_inventory_stock_details.customerid);
                                                        PartInventoryStockDetails PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);

                                                        Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                        if (mastStockType != null)
                                                        {
                                                            if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                            {
                                                                throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                        }

                                                        if (convert.ToInt(v_part_inventory_stock_details.Shipmentid) != 0 && convert.ToInt(v_part_inventory_stock_details.shipmentlineid) != 0)
                                                        {
                                                            throw new Exception("Part is already in reserver status for this location.");
                                                        }
                                                        if (convert.ToInt(v_part_inventory_stock_details.qty_intransit_to_location) >= 1)
                                                        {
                                                            throw new Exception("Part is already in intransit status for this location.");
                                                        }
                                                        else
                                                        {
                                                            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                            executionStrategy.Execute(() =>
                                                            {
                                                                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                {
                                                                    try
                                                                    {
                                                                        PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
                                                                        if (PartStockDetails.qty_intransit_to_location >= 1)
                                                                        {
                                                                            throw new Exception("Part already selected");
                                                                        }

                                                                        PartStockDetails.qty_intransit_to_location = 1;
                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                        _dbContext.SaveChanges();
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;

                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
                                                                        }
                                                                        dbContextTransaction.Commit();
                                                                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.");
                                                                        CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.", "");

                                                                        return Ok(true);
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        dbContextTransaction.Rollback();
                                                                        throw ex;
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                        lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                        if (lst_v_part_inventory_stock_details.Count() > 0)
                                                        {
                                                            _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
                                                            return Ok(_modal);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Part info for the Location.");
                                                }
                                            }
                                            else
                                            {
                                                //Parts without serial number;
                                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                                if (serialNum != "")
                                                {
                                                    lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                }
                                                else
                                                {
                                                    lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                }
                                                //List<PartInventoryStockDetails> lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.shipmentlineid == null).ToList();
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    List<int> customerIdList = lst_Partdetails.Select(x => (int)x.customerid).ToList();
                                                    customerIdList = customerIdList.Distinct().ToList();
                                                    if (customerIdList.Count > 0 && customerIdList.Count() == 1)
                                                    {

                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                        if (PartStock != null)
                                                        {
                                                            if (lst_Partdetails.Count() == 1)  // if Non serials Part has only 1 Partdetails  
                                                            {
                                                                //double s_qty_intransit = convert.ToFloat(lst_Partdetails.Sum(x => x.QUANTITY));
                                                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                                executionStrategy.Execute(() =>
                                                                {
                                                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                    {
                                                                        try
                                                                        {
                                                                            foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                            {
                                                                                v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                                Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                                                if (mastStockType != null)
                                                                                {
                                                                                    if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                                    {
                                                                                        CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        PartInventoryStockDetails PartStockDetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
                                                                                        if (PartStockDetails1.qty_intransit_to_location >= 1)
                                                                                        {
                                                                                            throw new Exception("Part already selected");
                                                                                        }

                                                                                        PartStockDetails.qty_intransit_to_location = 1;
                                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                                        _dbContext.SaveChanges();
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                                                }

                                                                            }
                                                                            if (PartStock != null)
                                                                            {
                                                                                List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                                double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                                if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                                {
                                                                                    PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                    PartStock.UPDATED_DATE = DateTime.Now;
                                                                                    _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                    _dbContext.SaveChanges();
                                                                                }
                                                                                else
                                                                                {
                                                                                    throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
                                                                            }
                                                                            dbContextTransaction.Commit();
                                                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.");
                                                                            CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected single Part Stock Details for Part No : " + vParts.part_number + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.", "");

                                                                            return Ok(true);
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            dbContextTransaction.Rollback();
                                                                            throw ex;
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                                List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                                if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                                {
                                                                    if (customerIdList.Count() > 0)
                                                                    {
                                                                        _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
                                                                        return Ok(_modal);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to get PartStock for PartNumber  " + vParts.part_number + " in the current location");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                        List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                        if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                        {
                                                            if (customerIdList.Count() > 0 && customerIdList.Count() > 1)
                                                            {
                                                                _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
                                                                return Ok(_modal);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Partnumber " + vParts.part_number + " in the current location");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Invalid Part no.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get scanned Part no.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get location details.");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Check_Set_Parts_From_Location  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Check_Set_Parts_From_Location", "Error", "", "Error Check_Set_Parts_From_Location - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Check_Set_Parts_From_Location stopped successfully.");
            }
        }

        private v_salesparts getPartDetails(string PartNo)
        {
            v_salesparts v_Parts = null;
            try
            {
                v_Parts = _dbContext.V_SALES_PART.FirstOrDefault(x => x.part_number == PartNo);
                if (v_Parts == null)
                {
                    v_Parts = _dbContext.V_SALES_PART.FirstOrDefault(x => x.cust_part_no == PartNo);
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error on getPartDetails : " + ex.Message);
            }
            return v_Parts;
        }

        [HttpPost]
        [Route("Select_Set_Parts_By_Customer")]
        public IActionResult Select_Set_Parts_By_Customer(SetLocationPartsDataByCustomer _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Select_Set_Parts_By_Customer");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Data : " + _dataValueStr);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Select_Set_Parts_By_Customer");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lst_Partdetails1 = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                Customers _customer = _dbContext.Customers.Find(_data.customerid);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (convert.ToInt(vParts.receive_with_serials) == 1)
                                        {
                                            if (_data.scannedPartNum != "")
                                            {
                                                if (_data.scannedPartNum.Contains("*"))
                                                {
                                                    serialNumber = _data.scannedPartNum.Split('*')[1];
                                                }
                                            }
                                            else if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Serial number.");
                                            }
                                        }
                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location == null && x.stock_typeid == _data.stocktypeid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location == null).ToList();
                                        }

                                        if (lst_Partdetails1.Count > 0)
                                        {

                                            for (int i = 0; i < lst_Partdetails1.Count(); i++)
                                            {
                                                Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(lst_Partdetails1[i].stock_typeid);
                                                if (mastStockType != null)
                                                {
                                                    if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                    {
                                                        V_PartInventoryStockDetails VPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(lst_Partdetails1[i].PART_STOCK_DETAIL_ID);
                                                        if (VPartStockDetails != null)
                                                        {
                                                            CommonFunction.setLog("Unable to select Part Number " + VPartStockDetails.PART_NUMBER + " serial : " + VPartStockDetails.SERIAL + " as Part Movement Control is not set to move.");
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        lst_Partdetails.Add(lst_Partdetails1[i]);
                                                    }
                                                }
                                                else
                                                {
                                                    lst_Partdetails.Add(lst_Partdetails1[i]);
                                                }
                                            }


                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() < _data.selected_qty)
                                            {
                                                throw new Exception("Selected Qty should not be greater than Qty to receive.");
                                            }

                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.selected_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    V_PartInventoryStockDetails v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                    Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                                    if (mastStockType != null)
                                                                    {
                                                                        if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                        {
                                                                            throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                                        }
                                                                        else
                                                                        {
                                                                            PartInventoryStockDetails PartStockDetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
                                                                            if (PartStockDetails1.qty_intransit_to_location >= 1)
                                                                            {
                                                                                throw new Exception("Part already selected");
                                                                            }

                                                                            PartStockDetails.qty_intransit_to_location = 1;
                                                                            PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        PartInventoryStockDetails PartStockDetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
                                                                        if (PartStockDetails1.qty_intransit_to_location >= 1)
                                                                        {
                                                                            throw new Exception("Part already selected");
                                                                        }

                                                                        //throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                                        PartStockDetails.qty_intransit_to_location = 1;
                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected Part Stock Details for Part No : " + vParts.part_number + " , Customer : " + _customer.Customer_Name + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.");
                                                                CommonFunction.SetAudit("Select_Set_Parts_By_Customer", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected Part Stock Details for Part No : " + vParts.part_number + " , Customer : " + _customer.Customer_Name + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from Location.", "");

                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part inventory stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part inventory stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to select Part inventory stock details.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Select_Set_Parts_By_Customer  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Select_Set_Parts_By_Customer", "Error", "", "Error Select_Set_Parts_By_Customer - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Select_Set_Parts_By_Customer stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Remove_Selected_Parts_By_Customer")]
        public IActionResult Remove_Selected_Parts_By_Customer(RemoveLocationPartsDataByCustomer _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Remove_Selected_Parts_By_Customer");
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Data : " + _dataValueStr);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {

                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Remove_Selected_Parts_By_Customer");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                Customers _customer = _dbContext.Customers.Find(_data.customerid);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (convert.ToInt(vParts.receive_with_serials) == 1)
                                        {
                                            if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Serial number is required.");
                                            }
                                        }

                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location >= 1 && x.stock_typeid == _data.stocktypeid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location >= 1).ToList();
                                        }
                                        if (lst_Partdetails.Count > 0)
                                        {
                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() != 0)
                                            {
                                                if (lst_Partdetails.Count() < _data.remove_qty)
                                                {
                                                    throw new Exception("Cannot cancel Items more than '" + lst_Partdetails.Count() + "'.");
                                                }

                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Part inventory details.");
                                            }
                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.remove_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    PartInventoryStockDetails PartStockDetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                    if (PartStockDetails1.qty_intransit_to_location == null)
                                                                    {
                                                                        throw new Exception("Part already removed.");
                                                                    }
                                                                    PartStockDetails.qty_intransit_to_location = null;
                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                    _dbContext.SaveChanges();
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid/* && x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have remove Part Stock Details for Part No : " + vParts.part_number + " , Customer : " + _customer.Customer_Name + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from  Location.");
                                                                CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer", "Updated", "", "User : " + _UserData.EX_USERNAME + " have remove Part Stock Details for Part No : " + vParts.part_number + " , Customer : " + _customer.Customer_Name + " and Location : " + sLoaction.PARTLOCATION_CODE + " form Select Parts from  Location.", "");

                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part Inventory Stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part Inventory Stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get selected Part Inventory Stock.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Remove_Selected_Parts_By_Customer  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer", "Error", "", "Error Remove_Selected_Parts_By_Customer - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_Selected_Parts_By_Customer stopped successfully.");
            }

        }

        #endregion

        #region Part Inventory Put Away for Inbulk

        [HttpPost]
        [Route("Get_Selected_PUTAWAY_Parts_From_Location")]
        public IActionResult Get_Selected_PUTAWAY_Parts_From_Location(getLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();

                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Selected_PUTAWAY_Parts_From_Location");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Selected_PUTAWAY_Parts_From_Location");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lstMainPartStockDetails = new List<PartInventoryStockDetails>();

                                List<string> lstStr = new List<string>();
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);
                                if (sLoaction != null)
                                {
                                    lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.qty_intransit_to_location >= 1 && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
                                    lstMainPartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.shipmentid == null && x.CustomerOrderId == null).ToList();
                                }

                                if (lstPartStockDetails.Count() > 0)
                                {
                                    foreach (V_PartInventoryStockDetails vPartDetails in lstPartStockDetails)
                                    {
                                        Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();
                                        if (convert.ToInt(vPartDetails.RECEIVE_WITH_SERIALS) == 1)
                                        {
                                            PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(vPartDetails.PART_STOCK_DETAIL_ID);
                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid);
                                            //selPartDetails.ids.Add(vPartDetails.PART_STOCK_DETAIL_ID);
                                            selPartDetails.salespartid = vPartDetails.SalesPartId;
                                            selPartDetails.quantity = vPartDetails.QUANTITY;
                                            selPartDetails.quantity_in_hand = PartStock.QTY_IN_HAND;
                                            selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                            selPartDetails.uom = vPartDetails.UOM;
                                            selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                            selPartDetails.partname = vPartDetails.PARTNAME;
                                            selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                            selPartDetails.siteid = vPartDetails.SITEID;
                                            selPartDetails.site_code = vPartDetails.SITE_CODE;
                                            selPartDetails.orderid = vPartDetails.OrderId;
                                            selPartDetails.orderno = vPartDetails.internal_order_no;
                                            selPartDetails.m3 = vPartDetails.M3;
                                            selPartDetails.serial = vPartDetails.SERIAL;
                                            selPartDetails.batch = vPartDetails.BATCH;
                                            selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                            selPartDetails.customerid = vPartDetails.customerid;
                                            selPartDetails.customer_name = vPartDetails.customer_name;
                                            selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                            selPartDetails.stock_type = vPartDetails.stock_type;
                                            selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                            selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                            selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                            selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                            selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                            selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                            selPartDetails.updated_date = _partStockdetails.UPDATED_DATE;

                                            lstSelectPartStockDetails.Add(selPartDetails);
                                        }
                                        else
                                        {
                                            List<Select_PartInventoryStockDetails> lstD = lstSelectPartStockDetails.Where(x => x.salespartid == vPartDetails.SalesPartId && x.partlocationid == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.orderid == vPartDetails.OrderId).ToList();
                                            if (lstD.Count() == 0)
                                            {
                                                List<V_PartInventoryStockDetails> lstData = lstPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.OrderId == vPartDetails.OrderId).ToList();
                                                List<PartInventoryStockDetails> lstMainData = lstMainPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.OrderId == vPartDetails.OrderId).ToList();
                                                lstMainData = lstMainData.OrderByDescending(x => x.UPDATED_DATE).ToList();

                                                List<V_PartInventoryStockDetails> lstTotalStockDetailByStockType = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.Shipmentid == null && x.CustomerOrderId == null && x.SalesPartId == vPartDetails.SalesPartId && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.OrderId == vPartDetails.OrderId).ToList();
                                                if (lstData != null && lstData.Count() > 0)
                                                {
                                                    DateTime _UpdateDate = DateTime.Now;
                                                    PartInventoryStockDetails _partStockdetails = lstMainData.FirstOrDefault();
                                                    if (_partStockdetails != null)
                                                    {
                                                        _UpdateDate = convert.ToDateTime(_partStockdetails.UPDATED_DATE);
                                                    }

                                                    //PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(lstData[0].PART_STOCK_DETAIL_ID);
                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lstData[0].SalesPartId && x.PARTLOCATIONID == lstData[0].PARTLOCATIONID && x.customerid == lstData[0].customerid);
                                                    double qty = convert.ToFloat(lstData.Sum(x => x.QUANTITY));
                                                    double Total_qty = convert.ToFloat(lstTotalStockDetailByStockType.Sum(x => x.QUANTITY));
                                                    List<int> ids = lstData.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                                    //selPartDetails.ids = ids;
                                                    selPartDetails.salespartid = vPartDetails.SalesPartId;
                                                    selPartDetails.quantity = qty;
                                                    selPartDetails.quantity_in_hand = Total_qty;
                                                    selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                                    selPartDetails.uom = vPartDetails.UOM;
                                                    selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                                    selPartDetails.partname = vPartDetails.PARTNAME;
                                                    selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                                    selPartDetails.siteid = vPartDetails.SITEID;
                                                    selPartDetails.site_code = vPartDetails.SITE_CODE;
                                                    selPartDetails.orderid = vPartDetails.OrderId;
                                                    selPartDetails.orderno = vPartDetails.internal_order_no;
                                                    selPartDetails.m3 = vPartDetails.M3;
                                                    selPartDetails.serial = vPartDetails.SERIAL;
                                                    selPartDetails.batch = vPartDetails.BATCH;
                                                    selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                                    selPartDetails.customerid = vPartDetails.customerid;
                                                    selPartDetails.customer_name = vPartDetails.customer_name;
                                                    selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                                    selPartDetails.stock_type = vPartDetails.stock_type;
                                                    selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                                    selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                                    selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                                    selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                                    selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                                    selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                                    selPartDetails.updated_date = _UpdateDate;
                                                    lstSelectPartStockDetails.Add(selPartDetails);
                                                }
                                            }
                                        }
                                    }
                                    lstSelectPartStockDetails = lstSelectPartStockDetails.OrderByDescending(x => x.updated_date).ToList();
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(lstSelectPartStockDetails);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Selected_PUTAWAY_Parts_From_Location  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Selected_PUTAWAY_Parts_From_Location", "Error", "", "Error Get_Selected_PUTAWAY_Parts_From_Location - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Selected_PUTAWAY_Parts_From_Location stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Remove_Selected_Parts_By_Customer_Putaway")]
        public IActionResult Remove_Selected_Parts_By_Customer_Putaway(RemoveLocationPartsDataByCustomer_Putaway _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Remove_Selected_Parts_By_Customer_Putaway");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {

                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Remove_Selected_Parts_By_Customer_Putaway");
                                var SiteId = GetLinkedSites(_UserData);

                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.FirstOrDefault(x => x.INTERNALORDERID == _data.orderid && LstSiteIds.Contains((int)x.SITEID) && x.Is_Delete != 1);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (convert.ToInt(vParts.receive_with_serials) == 1)
                                        {
                                            if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Serial number is required.");
                                            }
                                        }

                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location >= 1 && x.stock_typeid == _data.stocktypeid && x.OrderId == _data.orderid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location >= 1 && x.OrderId == _data.orderid).ToList();
                                        }
                                        if (lst_Partdetails.Count > 0)
                                        {
                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() != 0)
                                            {
                                                if (lst_Partdetails.Count() < _data.remove_qty)
                                                {
                                                    throw new Exception("Cannot cancel Items more than '" + lst_Partdetails.Count() + "'.");
                                                }

                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Part inventory details.");
                                            }
                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.remove_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    PartStockDetails.qty_intransit_to_location = null;
                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                    _dbContext.SaveChanges();
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have remove Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have remove Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.", "");

                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part Inventory Stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part Inventory Stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get selected Part Inventory Stock.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Remove_Selected_Parts_By_Customer_Putaway  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer_Putaway", "Error", "", "Error Remove_Selected_Parts_By_Customer_Putaway - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_Selected_Parts_By_Customer_Putaway stopped successfully.");
            }

        }


        [HttpPost]
        [Route("Check_Set_Parts_From_Location_for_Inbulk")]
        public IActionResult Check_Set_Parts_From_Location_for_Inbulk(SetInbulkLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();

                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Check_Set_Parts_From_Location_for_Inbulk");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Check_Set_Parts_From_Location_for_Inbulk");
                                var SiteId = GetLinkedSites(_UserData);

                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();

                                if (_data.OrderNo == "")
                                {
                                    throw new Exception("Unable to get Order no.");
                                }
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.FirstOrDefault(x => x.INTERNAL_ORDER_NO == _data.OrderNo && LstSiteIds.Contains((int)x.SITEID) && x.Is_Delete != 1);
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);
                                if (_internalOrder != null)
                                {
                                    //int OrderSiteId = convert.ToInt(_internalOrder.SITEID);
                                    //if (!LstSiteIds.Contains(OrderSiteId))
                                    //{
                                    //    throw new Exception("Unable to get Order details");
                                    //}

                                    if (sLoaction != null)
                                    {
                                        if (_data.scannedpartno != "")
                                        {
                                            partNum = _data.scannedpartno;
                                            serialNum = _data.scannedserialno;
                                            vParts = getPartDetails(partNum);
                                            if (vParts != null)
                                            {
                                                if (convert.ToInt(vParts.receive_with_serials) == 1)
                                                {
                                                    List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                    if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                    {
                                                        if (lst_v_part_inventory_stock_details.Where(x => (x.qty_intransit_to_location == null || x.qty_intransit_to_location >= 1) && x.Shipmentid == null && x.CustomerOrderId == null).ToList().Count() == 0)
                                                        {
                                                            V_PartInventoryStockDetails _dataValue = lst_v_part_inventory_stock_details.FirstOrDefault();
                                                            if (_dataValue.stock_statusid == 24 || _dataValue.stock_statusid == 29 || _dataValue.stock_statusid == 33 || _dataValue.stock_statusid == 32)
                                                            {
                                                                string _status_desc = _dbContext.mast_statuses.Find(_dataValue.stock_statusid).status_desc;
                                                                throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in " + _status_desc + " status.");
                                                            }
                                                            else if (convert.ToInt(_dataValue.qty_intransit_to_location) > 0)
                                                            {
                                                                throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in In-Transit status.");
                                                            }
                                                            else if (convert.ToInt(_dataValue.Shipmentid) > 0 && convert.ToInt(_dataValue.CustomerOrderId) > 0)
                                                            {
                                                                throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in reserved status.");
                                                            }
                                                        }


                                                        V_PartInventoryStockDetails _v_inventorystockdetails = lst_v_part_inventory_stock_details.FirstOrDefault(x => x.qty_intransit_to_location != null);
                                                        if (_v_inventorystockdetails != null)
                                                        {
                                                            throw new Exception("Part is already selected for this location and Order no.");
                                                        }
                                                        if (lst_v_part_inventory_stock_details.Count() > 0 && lst_v_part_inventory_stock_details.Count() == 1)
                                                        {
                                                            v_part_inventory_stock_details = lst_v_part_inventory_stock_details[0];
                                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == v_part_inventory_stock_details.SalesPartId && x.PARTLOCATIONID == v_part_inventory_stock_details.PARTLOCATIONID && x.customerid == v_part_inventory_stock_details.customerid);
                                                            PartInventoryStockDetails PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);

                                                            Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                            if (mastStockType != null)
                                                            {
                                                                if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                {
                                                                    throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                            }

                                                            if (convert.ToInt(v_part_inventory_stock_details.Shipmentid) != 0 && convert.ToInt(v_part_inventory_stock_details.shipmentlineid) != 0)
                                                            {
                                                                throw new Exception("Part is already in reserver status for this location.");
                                                            }
                                                            if (convert.ToInt(v_part_inventory_stock_details.qty_intransit_to_location) >= 1)
                                                            {
                                                                throw new Exception("Part is already selected for this location.");
                                                            }
                                                            else
                                                            {
                                                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                                executionStrategy.Execute(() =>
                                                                {
                                                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                    {
                                                                        try
                                                                        {
                                                                            PartStockDetails.qty_intransit_to_location = 1;
                                                                            PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                            if (PartStock != null)
                                                                            {
                                                                                List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                                double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                                if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                                {
                                                                                    PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                    PartStock.UPDATED_DATE = DateTime.Now;
                                                                                    _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                    _dbContext.SaveChanges();
                                                                                }
                                                                                else
                                                                                {
                                                                                    throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
                                                                            }
                                                                            dbContextTransaction.Commit();
                                                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                            CommonFunction.SetAudit("Check_Set_Parts_From_Location_for_Inbulk", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.", "");

                                                                            return Ok(true);
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            dbContextTransaction.Rollback();
                                                                            throw ex;
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                            lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                            if (lst_v_part_inventory_stock_details.Count() > 0)
                                                            {
                                                                _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(_modal, lst_v_part_inventory_stock_details);
                                                                return Ok(_modal);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        List<V_PartInventoryStockDetails> lst_V_part_stock_details_Inbulk = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == null && x.stock_type == null && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.OrderId == _internalOrder.INTERNALORDERID && x.receive_with_bulk == 1).ToList();
                                                        if (lst_V_part_stock_details_Inbulk.Count() > 0)
                                                        {
                                                            V_PartInventoryStockDetails _partDetails_Inbulk = lst_V_part_stock_details_Inbulk.OrderByDescending(x => x.DATE_IN).FirstOrDefault();
                                                            if (_partDetails_Inbulk != null)
                                                            {

                                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == _partDetails_Inbulk.SalesPartId && x.PARTLOCATIONID == _partDetails_Inbulk.PARTLOCATIONID && x.customerid == _partDetails_Inbulk.customerid);
                                                                select_PartInventoryStockDetails_Inbulk _partStockDetails_inbulk = new select_PartInventoryStockDetails_Inbulk();
                                                                List<INTERNAL_ORDER_LINE> _orderline = _dbContext.INTERNAL_ORDER_LINE.Where(x => x.SALESPARTID == _partDetails_Inbulk.SalesPartId && x.ORDERID == _internalOrder.INTERNALORDERID).ToList();
                                                                double? qty_to_be_receive = convert.ToFloat(lst_V_part_stock_details_Inbulk.Where(x => x.stock_typeid == null).ToList().Count());
                                                                double? order_qty = convert.ToFloat(_orderline.Sum(x => x.QTY));
                                                                double? order_rec_qty = convert.ToFloat(_orderline.Sum(x => x.QTY_REC));
                                                                //_partStockDetails_inbulk.partstockdetailid = _partDetails_Inbulk.PART_STOCK_DETAIL_ID;
                                                                _partStockDetails_inbulk.salespartid = _partDetails_Inbulk.SalesPartId;
                                                                _partStockDetails_inbulk.order_quantity = order_qty;
                                                                _partStockDetails_inbulk.order_rec_quantity = order_rec_qty;
                                                                _partStockDetails_inbulk.quantity_in_hand = PartStock.QTY_IN_HAND;
                                                                _partStockDetails_inbulk.quantity_inbulk_to_be_receive = qty_to_be_receive;
                                                                _partStockDetails_inbulk.partstockid = PartStock.PARTSTOCKID;
                                                                _partStockDetails_inbulk.uom = _partDetails_Inbulk.UOM;
                                                                _partStockDetails_inbulk.part_number = _partDetails_Inbulk.PART_NUMBER;
                                                                _partStockDetails_inbulk.partname = _partDetails_Inbulk.PARTNAME;
                                                                _partStockDetails_inbulk.partlocationid = _partDetails_Inbulk.PARTLOCATIONID;
                                                                _partStockDetails_inbulk.siteid = _partDetails_Inbulk.SITEID;
                                                                _partStockDetails_inbulk.site_code = _partDetails_Inbulk.SITE_CODE;
                                                                _partStockDetails_inbulk.orderid = _partDetails_Inbulk.OrderId;
                                                                _partStockDetails_inbulk.orderno = _internalOrder.INTERNAL_ORDER_NO;
                                                                _partStockDetails_inbulk.m3 = _partDetails_Inbulk.M3;
                                                                _partStockDetails_inbulk.serial = _partDetails_Inbulk.SERIAL;
                                                                _partStockDetails_inbulk.batch = _partDetails_Inbulk.BATCH;
                                                                _partStockDetails_inbulk.expiry_date = _partDetails_Inbulk.EXPIRY_DATE;
                                                                _partStockDetails_inbulk.customerid = _partDetails_Inbulk.customerid;
                                                                _partStockDetails_inbulk.customer_name = _partDetails_Inbulk.customer_name;
                                                                _partStockDetails_inbulk.stock_typeid = _partDetails_Inbulk.stock_typeid;
                                                                _partStockDetails_inbulk.stock_type = _partDetails_Inbulk.stock_type;
                                                                _partStockDetails_inbulk.partlocation_code = _partDetails_Inbulk.PARTLOCATION_CODE;
                                                                _partStockDetails_inbulk.partlocation_descr = _partDetails_Inbulk.partlocation_descr;
                                                                _partStockDetails_inbulk.receive_with_lots = _partDetails_Inbulk.receive_with_lots;
                                                                _partStockDetails_inbulk.expiry_date_required = _partDetails_Inbulk.expiry_date_required;
                                                                _partStockDetails_inbulk.receive_with_serials = _partDetails_Inbulk.RECEIVE_WITH_SERIALS;
                                                                _partStockDetails_inbulk.receive_with_bulk = _partDetails_Inbulk.receive_with_bulk;
                                                                _partStockDetails_inbulk.receive_date = convert.ToDateTime(_partDetails_Inbulk.DATE_IN).ToString("dd/MM/yyyy HH:mm");

                                                                Modal_Serial_Inbulk_PartInventoryStockDetails _modal = new Modal_Serial_Inbulk_PartInventoryStockDetails();
                                                                _modal._partStockDetail_Inbulk = _partStockDetails_inbulk;
                                                                _modal._StockType = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                                                                {
                                                                    STOCK_TYPEID = x.STOCK_TYPEID,
                                                                    STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                                                                }).ToList();
                                                                return Ok(_modal);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to register new Part No. " + _data.scannedpartno + " as Inbulk stock not found for Order No - " + _internalOrder.INTERNAL_ORDER_NO + ".");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    //Parts without serial number;
                                                    List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                                    if (serialNum != "")
                                                    {
                                                        lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                    }
                                                    else
                                                    {
                                                        lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                    }
                                                    //List<PartInventoryStockDetails> lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.shipmentlineid == null).ToList();
                                                    if (lst_Partdetails.Count() > 0)
                                                    {
                                                        List<int> customerIdList = lst_Partdetails.Select(x => (int)x.customerid).ToList();
                                                        customerIdList = customerIdList.Distinct().ToList();
                                                        if (customerIdList.Count > 0 && customerIdList.Count() == 1)
                                                        {

                                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                            if (PartStock != null)
                                                            {
                                                                if (lst_Partdetails.Count() == 1)  // if Non serials Part has only 1 Partdetails  
                                                                {
                                                                    //double s_qty_intransit = convert.ToFloat(lst_Partdetails.Sum(x => x.QUANTITY));
                                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                                    executionStrategy.Execute(() =>
                                                                    {
                                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                        {
                                                                            try
                                                                            {
                                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                                {
                                                                                    v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                                    Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                                                    if (mastStockType != null)
                                                                                    {
                                                                                        if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                                        {
                                                                                            CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            PartStockDetails.qty_intransit_to_location = 1;
                                                                                            PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                                            _dbContext.SaveChanges();
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                                                    }
                                                                                }
                                                                                if (PartStock != null)
                                                                                {
                                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid/* && x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                                    {
                                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                        _dbContext.SaveChanges();
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
                                                                                }
                                                                                dbContextTransaction.Commit();
                                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                                CommonFunction.SetAudit("Check_Set_Parts_From_Location_for_Inbulk", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.", "");

                                                                                return Ok(true);
                                                                            }
                                                                            catch (Exception ex)
                                                                            {
                                                                                dbContextTransaction.Rollback();
                                                                                throw ex;
                                                                            }
                                                                        }
                                                                    });
                                                                }
                                                                else
                                                                {
                                                                    ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                                    List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                                    if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                                    {
                                                                        if (customerIdList.Count() > 0)
                                                                        {
                                                                            _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(_modal, lst_v_part_inventory_stock_details);
                                                                            return Ok(_modal);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("Unable to get PartStock for PartNumber  " + vParts.part_number + " in the current location");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                            List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                            if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                            {
                                                                if (customerIdList.Count() > 0 && customerIdList.Count() > 1)
                                                                {
                                                                    _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(_modal, lst_v_part_inventory_stock_details);
                                                                    return Ok(_modal);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Unable to get Partnumber " + vParts.part_number + " in the current location");
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Invalid Part no.");
                                            }



                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get Part number.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get location details.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get Order details.");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Check_Set_Parts_From_Location_for_Inbulk  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Check_Set_Parts_From_Location_for_Inbulk", "Error", "", "Error Check_Set_Parts_From_Location_for_Inbulk - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Check_Set_Parts_From_Location_for_Inbulk stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Select_Set_Parts_By_Customer_Putaway")]
        public IActionResult Select_Set_Parts_By_Customer_Putaway(SetLocationPartsDataByCustomer_putaway _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Select_Set_Parts_By_Customer_Putaway");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Select_Set_Parts_By_Customer_Putaway");
                                var SiteId = GetLinkedSites(_UserData);
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.Find(_data.Orderid);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lst_Partdetails1 = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (convert.ToInt(vParts.receive_with_serials) == 1)
                                        {
                                            if (_data.scannedPartNum != "")
                                            {
                                                if (_data.scannedPartNum.Contains("*"))
                                                {
                                                    serialNumber = _data.scannedPartNum.Split('*')[1];
                                                }
                                            }
                                            else if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Serial number.");
                                            }
                                        }
                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location == null && x.stock_typeid == _data.stocktypeid && x.OrderId == _data.Orderid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location == null && x.OrderId == _data.Orderid).ToList();
                                        }

                                        if (lst_Partdetails1.Count > 0)
                                        {

                                            for (int i = 0; i < lst_Partdetails1.Count(); i++)
                                            {
                                                Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(lst_Partdetails1[i].stock_typeid);
                                                if (mastStockType != null)
                                                {
                                                    if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                    {
                                                        V_PartInventoryStockDetails VPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(lst_Partdetails1[i].PART_STOCK_DETAIL_ID);
                                                        if (VPartStockDetails != null)
                                                        {
                                                            CommonFunction.setLog("Unable to select Part Number " + VPartStockDetails.PART_NUMBER + " serial : " + VPartStockDetails.SERIAL + " as Part Movement Control is not set to move.");
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        lst_Partdetails.Add(lst_Partdetails1[i]);
                                                    }
                                                }
                                                else
                                                {
                                                    lst_Partdetails.Add(lst_Partdetails1[i]);
                                                }
                                            }


                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() < _data.selected_qty)
                                            {
                                                throw new Exception("Selected Qty should not be greater than Qty to receive.");
                                            }

                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.selected_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    V_PartInventoryStockDetails v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                    Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                                    if (mastStockType != null)
                                                                    {
                                                                        if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                        {
                                                                            throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                                        }
                                                                        else
                                                                        {
                                                                            PartStockDetails.qty_intransit_to_location = 1;
                                                                            PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                                        PartStockDetails.qty_intransit_to_location = 1;
                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null && x.OrderId == _data.Orderid*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " For PUTWAY.");
                                                                CommonFunction.SetAudit("Select_Set_Parts_By_Customer_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " For PUTWAY.", "");

                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part inventory stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part inventory stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to select Part inventory stock details.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Select_Set_Parts_By_Customer_Putaway  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Select_Set_Parts_By_Customer_Putaway", "Error", "", "Error Select_Set_Parts_By_Customer_Putaway - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Select_Set_Parts_By_Customer_Putaway stopped successfully.");
            }
        }


        [HttpPost]
        [Route("Save_Inbulk_PartStockDetails")]
        public IActionResult Save_Inbulk_PartStockDetails(Save_Inbulk_Details _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            bool result = false;
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();

                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Save_Inbulk_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Save_Inbulk_PartStockDetails");
                                var SiteId = GetLinkedSites(_UserData);

                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.Find(_data.orderid);
                                var sParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                vParts = _dbContext.V_SALES_PART.FirstOrDefault(x => x.salespartid == _data.salespartid);

                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                executionStrategy.Execute(() =>
                                {
                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            if (_data.orderid != null && _data.salespartid != null && _data.partlocationid != null)
                                            {

                                                if (_internalOrder != null)
                                                {
                                                    if (sParts != null)
                                                    {
                                                        bool receive_with_serials = false, receive_with_expiry_date = false, receive_with_lots = false;
                                                        if (convert.ToInt(sParts.receive_with_serials) == 1)
                                                        {
                                                            receive_with_serials = true;
                                                        }
                                                        if (convert.ToInt(sParts.expiry_date_required) == 1)
                                                        {
                                                            receive_with_expiry_date = true;
                                                        }
                                                        if (convert.ToInt(sParts.receive_with_lots) == 1)
                                                        {
                                                            receive_with_lots = true;
                                                        }
                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == _data.salespartid && x.PARTLOCATIONID == _data.partlocationid && x.customerid == _internalOrder.CUSTOMERID);
                                                        List<PartInventoryStockDetails> lstDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == sParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.SERIAL == null && x.stock_typeid == null && x.customerid == _internalOrder.CUSTOMERID && x.OrderId == _internalOrder.INTERNALORDERID && x.receive_with_bulk == 1).ToList();

                                                        lstDetails = lstDetails.OrderByDescending(x => x.DATE_IN).ToList();
                                                        if (lstDetails.Count() > 0)
                                                        {

                                                            if (sParts.receive_with_serials == 1)
                                                            {
                                                                string SerialNum = "";
                                                                if (_data.serial != "")
                                                                {
                                                                    if (_data.serial.Contains("*"))
                                                                    {
                                                                        SerialNum = _data.serial.Split('*')[1].ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        SerialNum = _data.serial;
                                                                    }
                                                                    if (SerialNum != "")
                                                                    {
                                                                        PartInventoryStockDetails _stockdetail = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SERIAL.ToUpper() == SerialNum.ToUpper() && a.SalesPartId == sParts.salespartid && a.customerid == _internalOrder.CUSTOMERID).FirstOrDefault();
                                                                        if (_stockdetail != null && convert.ToString(_stockdetail.SERIAL) != "") throw new Exception("Serial No. " + SerialNum.ToUpper() + " is already in use.");

                                                                        PartInventoryStockDetails _partStockDetails = lstDetails.Take(1).FirstOrDefault();
                                                                        PartInventoryStockDetails _partStockDetailsExt = _partStockDetails;
                                                                        if (_partStockDetails != null)
                                                                        {
                                                                            _partStockDetails.SERIAL = _data.serial;
                                                                            if (receive_with_expiry_date)
                                                                            {
                                                                                if (convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy") == DateTime.MinValue)
                                                                                {
                                                                                    throw new Exception("Unable to get expiry date");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.EXPIRY_DATE = convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.EXPIRY_DATE = null;
                                                                            }

                                                                            if (receive_with_lots)
                                                                            {
                                                                                if (convert.ToString(_data.batch).Trim() == "")
                                                                                {
                                                                                    throw new Exception("Unable to get Lot/Batch details");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.BATCH = convert.ToString(_data.batch).Trim();
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.BATCH = null;
                                                                            }

                                                                            _partStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            if (convert.ToString(_data.marking) == "")
                                                                            {
                                                                                // throw new Exception("Unable to get Marking details");
                                                                                _partStockDetails.marking = "";
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.marking = convert.ToString(_data.marking).Trim();
                                                                            }
                                                                            if (convert.ToInt(_data.stocktypeid) == 0)
                                                                            {
                                                                                throw new Exception("Unable to get PartStockType");
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.stock_typeid = convert.ToInt(_data.stocktypeid);
                                                                            }
                                                                            _partStockDetails.qty_intransit_to_location = 1;
                                                                            if (convert.ToInt(_partStockDetails.grn_exported) != 2)
                                                                            {
                                                                                _partStockDetails.grn_exported = 1;
                                                                            }
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_partStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                        }
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Unable to get serial number.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Invalid serial number.");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                // Non serial part stock details
                                                                if (lstDetails.Count() >= _data.selected_qty)
                                                                {
                                                                    List<PartInventoryStockDetails> _lstpartStockDetails = lstDetails.Take(convert.ToInt(_data.selected_qty)).ToList();
                                                                    for (int i = 0; i < _lstpartStockDetails.Count(); i++)
                                                                    {
                                                                        PartInventoryStockDetails _partStockDetails = _lstpartStockDetails[i];
                                                                        if (_partStockDetails != null)
                                                                        {
                                                                            _partStockDetails.SERIAL = null;
                                                                            if (receive_with_expiry_date)
                                                                            {
                                                                                if (convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy") == DateTime.MinValue)
                                                                                {
                                                                                    throw new Exception("Unable to get expiry date");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.EXPIRY_DATE = convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.EXPIRY_DATE = null;
                                                                            }

                                                                            if (receive_with_lots)
                                                                            {
                                                                                if (convert.ToString(_data.batch).Trim() == "")
                                                                                {
                                                                                    throw new Exception("Unable to get Lot/Batch details");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.BATCH = convert.ToString(_data.batch).Trim();
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.BATCH = null;
                                                                            }

                                                                            _partStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            if (convert.ToString(_data.marking) == "")
                                                                            {
                                                                                //throw new Exception("Unable to get Marking details");
                                                                                _partStockDetails.marking = "";
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.marking = convert.ToString(_data.marking).Trim();
                                                                            }
                                                                            if (convert.ToInt(_data.stocktypeid) == 0)
                                                                            {
                                                                                throw new Exception("Unable to get PartStockType");
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.stock_typeid = convert.ToInt(_data.stocktypeid);
                                                                            }
                                                                            _partStockDetails.qty_intransit_to_location = 1;
                                                                            if (convert.ToInt(_partStockDetails.grn_exported) != 2)
                                                                            {
                                                                                _partStockDetails.grn_exported = 1;
                                                                            }
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_partStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                        }
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Selected quantity should be less than Total avalable quantity.");
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to get Part stock details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + ".");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Unable to get Sales Part info for Order No : " + _internalOrder.INTERNAL_ORDER_NO + ".");
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Order details.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to process Invalid Info.");
                                            }
                                            dbContextTransaction.Commit();
                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Updated InBulk Part Stock for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + ".");
                                            CommonFunction.SetAudit("Save_Inbulk_PartStockDetails", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Updated InBulk Part Stock for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + ".", "");

                                            result = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            dbContextTransaction.Rollback();
                                            throw ex;
                                        }
                                    }
                                });
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to process Invalid data.");
                }
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Save_Inbulk_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Save_Inbulk_PartStockDetails", "Error", "", "Error Save_Inbulk_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Save_Inbulk_PartStockDetails stopped successfully.");
            }

        }


        #endregion

        #region Move Parts
        [HttpPost]
        [Route("Get_Parts_for_Moving")]
        public IActionResult Get_Parts_for_Moving(getselectedItemData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Parts_for_Moving");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Parts_for_Moving");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lstMainPartStockDetails = new List<PartInventoryStockDetails>();

                                List<string> lstStr = new List<string>();
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                                if (sLoaction != null)
                                {
                                    lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.qty_intransit_to_location == 2 && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
                                    lstMainPartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.shipmentid == null && x.CustomerOrderId == null).ToList();
                                }

                                if (lstPartStockDetails.Count() > 0)
                                {
                                    foreach (V_PartInventoryStockDetails vPartDetails in lstPartStockDetails)
                                    {
                                        Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();
                                        if (convert.ToInt(vPartDetails.RECEIVE_WITH_SERIALS) == 1)
                                        {
                                            PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(vPartDetails.PART_STOCK_DETAIL_ID);
                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid);

                                            //selPartDetails.ids.Add(vPartDetails.PART_STOCK_DETAIL_ID);
                                            selPartDetails.salespartid = vPartDetails.SalesPartId;
                                            selPartDetails.quantity = vPartDetails.QUANTITY;
                                            selPartDetails.quantity_in_hand = PartStock.QTY_IN_HAND;
                                            selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                            selPartDetails.uom = vPartDetails.UOM;
                                            selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                            selPartDetails.partname = vPartDetails.PARTNAME;
                                            selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                            selPartDetails.siteid = vPartDetails.SITEID;
                                            selPartDetails.site_code = vPartDetails.SITE_CODE;
                                            selPartDetails.orderid = vPartDetails.OrderId;
                                            selPartDetails.m3 = vPartDetails.M3;
                                            selPartDetails.serial = vPartDetails.SERIAL;
                                            selPartDetails.batch = vPartDetails.BATCH;
                                            selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                            selPartDetails.customerid = vPartDetails.customerid;
                                            selPartDetails.customer_name = vPartDetails.customer_name;
                                            selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                            selPartDetails.stock_type = vPartDetails.stock_type;
                                            selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                            selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                            selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                            selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                            selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                            selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                            selPartDetails.updated_date = _partStockdetails.UPDATED_DATE;
                                            lstSelectPartStockDetails.Add(selPartDetails);
                                        }
                                        else
                                        {
                                            List<Select_PartInventoryStockDetails> lstD = lstSelectPartStockDetails.Where(x => x.salespartid == vPartDetails.SalesPartId && x.partlocationid == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                            if (lstD.Count() == 0)
                                            {
                                                List<V_PartInventoryStockDetails> lstData = lstPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                                List<PartInventoryStockDetails> lstMainData = lstMainPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                                lstMainData = lstMainData.OrderByDescending(x => x.UPDATED_DATE).ToList();

                                                List<V_PartInventoryStockDetails> lstTotalStockDetailByStockType = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.Shipmentid == null && x.CustomerOrderId == null && x.SalesPartId == vPartDetails.SalesPartId && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid).ToList();
                                                if (lstData != null && lstData.Count() > 0)
                                                {
                                                    DateTime _UpdateDate = DateTime.Now;
                                                    PartInventoryStockDetails _partStockdetails = lstMainData.FirstOrDefault();
                                                    if (_partStockdetails != null)
                                                    {
                                                        _UpdateDate = convert.ToDateTime(_partStockdetails.UPDATED_DATE);
                                                    }

                                                    //PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(lstData[0].PART_STOCK_DETAIL_ID);
                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lstData[0].SalesPartId && x.PARTLOCATIONID == lstData[0].PARTLOCATIONID && x.customerid == lstData[0].customerid);
                                                    double qty = convert.ToFloat(lstData.Sum(x => x.QUANTITY));
                                                    double Total_qty = convert.ToFloat(lstTotalStockDetailByStockType.Sum(x => x.QUANTITY));
                                                    List<int> ids = lstData.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                                    //selPartDetails.ids = ids;
                                                    selPartDetails.salespartid = vPartDetails.SalesPartId;
                                                    selPartDetails.quantity = qty;
                                                    selPartDetails.quantity_in_hand = Total_qty;
                                                    selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                                    selPartDetails.uom = vPartDetails.UOM;
                                                    selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                                    selPartDetails.partname = vPartDetails.PARTNAME;
                                                    selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                                    selPartDetails.siteid = vPartDetails.SITEID;
                                                    selPartDetails.site_code = vPartDetails.SITE_CODE;
                                                    selPartDetails.orderid = vPartDetails.OrderId;
                                                    selPartDetails.m3 = vPartDetails.M3;
                                                    selPartDetails.serial = vPartDetails.SERIAL;
                                                    selPartDetails.batch = vPartDetails.BATCH;
                                                    selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                                    selPartDetails.customerid = vPartDetails.customerid;
                                                    selPartDetails.customer_name = vPartDetails.customer_name;
                                                    selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                                    selPartDetails.stock_type = vPartDetails.stock_type;
                                                    selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                                    selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                                    selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                                    selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                                    selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                                    selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                                    selPartDetails.updated_date = _UpdateDate;
                                                    lstSelectPartStockDetails.Add(selPartDetails);
                                                }
                                            }
                                        }
                                    }
                                    lstSelectPartStockDetails = lstSelectPartStockDetails.OrderByDescending(x => x.updated_date).ToList();
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(lstSelectPartStockDetails);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Parts_for_Moving ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Parts_for_Moving", "Error", "", "Error Get_Parts_for_Moving - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Parts_for_Moving stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Check_Set_Parts_From_Location_for_Moving")]
        public IActionResult Check_Set_Parts_From_Location_for_Moving(SetLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();

                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Check_Set_Parts_From_Location_for_Moving");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    MAST_SALES_PARTS_LOCATION _partsLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Check_Set_Parts_From_Location_for_Moving");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();

                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);
                                if (sLoaction != null)
                                {
                                    if (_data.scannedpartno != "")
                                    {
                                        partNum = _data.scannedpartno;
                                        serialNum = _data.scannedserialno;
                                        vParts = getPartDetails(partNum);
                                        if (vParts != null)
                                        {
                                            if (convert.ToInt(vParts.receive_with_serials) == 1)
                                            {
                                                List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.SERIAL == serialNum).ToList();
                                                if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                {
                                                    if (lst_v_part_inventory_stock_details.Count() > 0 && lst_v_part_inventory_stock_details.Count() == 1)
                                                    {
                                                        if (lst_v_part_inventory_stock_details.Where(x => x.Shipmentid == null && x.CustomerOrderId == null).ToList().Count() == 0)
                                                        {
                                                            V_PartInventoryStockDetails _dataValue = lst_v_part_inventory_stock_details.FirstOrDefault();
                                                            if (_dataValue.stock_statusid == 24 || _dataValue.stock_statusid == 29 || _dataValue.stock_statusid == 33 || _dataValue.stock_statusid == 32)
                                                            {
                                                                string _status_desc = _dbContext.mast_statuses.Find(_dataValue.stock_statusid).status_desc;
                                                                throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in " + _status_desc + " status.");
                                                            }
                                                            else if (convert.ToInt(_dataValue.Shipmentid) > 0 && convert.ToInt(_dataValue.CustomerOrderId) > 0)
                                                            {
                                                                throw new Exception("Part No '" + _data.scannedpartno + "' with serial no '" + _data.scannedserialno + "' is in reserved status.");
                                                            }
                                                        }

                                                        if (lst_v_part_inventory_stock_details.FirstOrDefault(x => x.qty_intransit_to_location == 2) != null)
                                                        {
                                                            throw new Exception("Part '" + _data.scannedpartno + "' is already selected for moving.");
                                                        }

                                                        v_part_inventory_stock_details = lst_v_part_inventory_stock_details[0];
                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == v_part_inventory_stock_details.SalesPartId && x.PARTLOCATIONID == v_part_inventory_stock_details.PARTLOCATIONID && x.customerid == v_part_inventory_stock_details.customerid);
                                                        PartInventoryStockDetails PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);
                                                        if (convert.ToInt(v_part_inventory_stock_details.Shipmentid) != 0 && convert.ToInt(v_part_inventory_stock_details.shipmentlineid) != 0)
                                                        {
                                                            throw new Exception("Part is already in reserver status for this location.");
                                                        }
                                                        if (convert.ToInt(v_part_inventory_stock_details.qty_intransit_to_location) > 1)
                                                        {
                                                            throw new Exception("Part is already in intransit status for this location.");
                                                        }
                                                        else
                                                        {
                                                            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                            executionStrategy.Execute(() =>
                                                            {
                                                                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                {
                                                                    try
                                                                    {
                                                                        PartStockDetails.qty_intransit_to_location = 2;   // Stock is selected for moving to different location
                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                        _dbContext.SaveChanges();
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                        }
                                                                        dbContextTransaction.Commit();
                                                                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected Single Part stock details for Part Number " + _data.scannedpartno + " for Location " + _partsLocation.PARTLOCATION_CODE + " on Move List.");
                                                                        CommonFunction.SetAudit("Check_Set_Parts_From_Location_for_Moving", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected Single Part stock details for Part Number " + _data.scannedpartno + " for Location " + _partsLocation.PARTLOCATION_CODE + " on Move List.", "");
                                                                        return Ok(true);
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        dbContextTransaction.Rollback();
                                                                        throw ex;
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                        lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                        if (lst_v_part_inventory_stock_details.Count() > 0)
                                                        {
                                                            _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
                                                            return Ok(_modal);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Part info.");
                                                }
                                            }
                                            else
                                            {
                                                //Parts without serial number;
                                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                                if (serialNum != "")
                                                {
                                                    lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                }
                                                else
                                                {
                                                    lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();

                                                }
                                                if (lst_Partdetails.Count() > 0)
                                                {

                                                    if (lst_Partdetails.Where(x => x.qty_intransit_to_location == 1).ToList().Count() > 0)
                                                    {
                                                        lst_Partdetails = lst_Partdetails.Where(x => x.qty_intransit_to_location == 1).ToList();
                                                    }
                                                    else if (lst_Partdetails.Where(x => x.qty_intransit_to_location > 1).ToList().Count() > 0)
                                                    {
                                                        throw new Exception("Part '" + _data.scannedpartno + "' is already selected for moving.");
                                                    }
                                                    else
                                                    {
                                                        lst_Partdetails = lst_Partdetails.Where(x => x.qty_intransit_to_location == 1).ToList();
                                                    }
                                                    if (lst_Partdetails.Count() == 0)
                                                    {
                                                        throw new Exception("Unable to get selected Part '" + _data.scannedpartno + "' for moving");
                                                    }
                                                    List<int> customerIdList = lst_Partdetails.Select(x => (int)x.customerid).ToList();
                                                    customerIdList = customerIdList.Distinct().ToList();
                                                    if (customerIdList.Count > 0 && customerIdList.Count() == 1)
                                                    {
                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                        if (PartStock != null)
                                                        {
                                                            if (lst_Partdetails.Count() == 1)  // if Non serials Part has only 1 Partdetails  
                                                            {
                                                                //double s_qty_intransit = convert.ToFloat(lst_Partdetails.Sum(x => x.QUANTITY));
                                                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                                executionStrategy.Execute(() =>
                                                                {
                                                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                    {
                                                                        try
                                                                        {
                                                                            foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                            {
                                                                                PartStockDetails.qty_intransit_to_location = 2;
                                                                                PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            if (PartStock != null)
                                                                            {
                                                                                List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                                double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                                if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                                {
                                                                                    PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                    PartStock.UPDATED_DATE = DateTime.Now;
                                                                                    _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                    _dbContext.SaveChanges();
                                                                                }
                                                                                else
                                                                                {
                                                                                    throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                            }
                                                                            dbContextTransaction.Commit();
                                                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected Single Part stock details for Part Number " + _data.scannedpartno + " for Location " + _partsLocation.PARTLOCATION_CODE + " on Move List.");
                                                                            CommonFunction.SetAudit("Check_Set_Parts_From_Location_for_Moving", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected Single Part stock details for Part Number " + _data.scannedpartno + " for Location " + _partsLocation.PARTLOCATION_CODE + " on Move List.", "");
                                                                            return Ok(true);
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            dbContextTransaction.Rollback();
                                                                            throw ex;
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                                List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == 1 && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                                if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                                {
                                                                    if (customerIdList.Count() > 0)
                                                                    {

                                                                        _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
                                                                        return Ok(_modal);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to get PartStock for PartNumber  " + vParts.part_number + " in the current location");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                        List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == 1 && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                        if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                        {
                                                            if (customerIdList.Count() > 0 && customerIdList.Count() > 1)
                                                            {

                                                                _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers(_modal, lst_v_part_inventory_stock_details);
                                                                return Ok(_modal);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Partnumber " + vParts.part_number + " in the current location");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Invalid Part no.");
                                        }

                                    }
                                    else
                                    {
                                        throw new Exception("Invalid Part no.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get location details.");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Check_Set_Parts_From_Location_for_Moving  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Check_Set_Parts_From_Location_for_Moving", "Error", "", "Error Check_Set_Parts_From_Location_for_Moving - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Check_Set_Parts_From_Location_for_Moving stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Select_Set_Parts_By_Customer_for_Moving")]
        public IActionResult Select_Set_Parts_By_Customer_for_Moving(SetLocationPartsDataByCustomer _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Select_Set_Parts_By_Customer_for_Moving");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);

                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Select_Set_Parts_By_Customer_for_Moving");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;

                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (vParts.receive_with_serials == 1)
                                        {
                                            if (_data.scannedPartNum != "")
                                            {
                                                if (_data.scannedPartNum.Contains("*"))
                                                {
                                                    serialNumber = _data.scannedPartNum.Split('*')[1];
                                                }
                                            }
                                            else if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Serial number.");
                                            }
                                        }
                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location == 1 && x.stock_typeid == _data.stocktypeid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location == 1).ToList();
                                        }

                                        if (lst_Partdetails.Count > 0)
                                        {
                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() < _data.selected_qty)
                                            {
                                                throw new Exception("Selected Qty should not be greater than Qty to receive.");
                                            }

                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.selected_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    PartStockDetails.qty_intransit_to_location = 2;
                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                    _dbContext.SaveChanges();
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                if (serialNumber == null)
                                                                {
                                                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected stock details for Part Number " + vParts.part_number + " with quantity " + _data.selected_qty + " form Location " + sLoaction.PARTLOCATION_CODE + " on Move List.");
                                                                    CommonFunction.SetAudit("Select_Set_Parts_By_Customer_for_Moving", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected Part stock details form Part Number " + vParts.part_number + " with quantity " + _data.selected_qty + " form Location " + sLoaction.PARTLOCATION_CODE + " on Move List.", "");
                                                                }
                                                                else
                                                                {
                                                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have selected Single Part stock details for Part Number " + vParts.part_number + " with serial " + serialNumber + " and for Location " + sLoaction.PARTLOCATION_CODE + " on Move List.");
                                                                    CommonFunction.SetAudit("Select_Set_Parts_By_Customer_for_Moving", "Updated", "", "User : " + _UserData.EX_USERNAME + " have selected Single Part stock details for Part Number " + vParts.part_number + " with serial " + serialNumber + " and for Location " + sLoaction.PARTLOCATION_CODE + " on Move List.", "");
                                                                }
                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part inventory stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part inventory stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to select Part inventory stock details.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Select_Set_Parts_By_Customer_for_Moving  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Select_Set_Parts_By_Customer_for_Moving", "Error", "", "Error Select_Set_Parts_By_Customer_for_Moving - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Select_Set_Parts_By_Customer_for_Moving stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Remove_Selected_Parts_By_Customer_for_Moving")]
        public IActionResult Remove_Selected_Parts_By_Customer_for_Moving(RemoveLocationPartsDataByCustomer _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Remove_Selected_Parts_By_Customer_for_Moving");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Remove_Selected_Parts_By_Customer");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (vParts.receive_with_serials == 1)
                                        {
                                            if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Serial number is required.");
                                            }
                                        }

                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location == 2 && x.stock_typeid == _data.stocktypeid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location == 2).ToList();
                                        }
                                        if (lst_Partdetails.Count > 0)
                                        {
                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() != 0)
                                            {
                                                if (lst_Partdetails.Count() < _data.remove_qty)
                                                {
                                                    throw new Exception("Cannot cancel Items more than '" + lst_Partdetails.Count() + "'.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Part inventory details.");
                                            }
                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.remove_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    PartStockDetails.qty_intransit_to_location = 1;
                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                    _dbContext.SaveChanges();
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                if (serialNumber == null)
                                                                {
                                                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have remove Selected Part stock details for Part Number " + vParts.part_number + " with remove quantity " + _data.remove_qty + " from Location " + sLoaction.PARTLOCATION_CODE + "  Move list.");
                                                                    CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer_for_Moving", "Updated", "", "User : " + _UserData.EX_USERNAME + " have remove Selected Part stock details for Part Number " + vParts.part_number + " with remove quantity " + _data.remove_qty + " from Location " + sLoaction.PARTLOCATION_CODE + "  Move list.", "");

                                                                }
                                                                else
                                                                {
                                                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have remove Selected Part stock details for Part Number " + vParts.part_number + " with serial number " + serialNumber + " from Location " + sLoaction.PARTLOCATION_CODE + "  Move list.");
                                                                    CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer_for_Moving", "Updated", "", "User : " + _UserData.EX_USERNAME + " have remove Selected Part stock details for Part Number " + vParts.part_number + " with serial number " + serialNumber + " from Location " + sLoaction.PARTLOCATION_CODE + "  Move list.", "");
                                                                }
                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part Inventory Stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part Inventory Stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get selected Part Inventory Stock.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get Part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Remove_Selected_Parts_By_Customer_for_Moving  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Remove_Selected_Parts_By_Customer_for_Moving", "Error", "", "Error Remove_Selected_Parts_By_Customer_for_Moving - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_Selected_Parts_By_Customer_for_Moving stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Move_Selected_InventoryParts")]
        public IActionResult Move_Selected_InventoryParts(MoveLocationdata _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Move_Selected_InventoryParts");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                MAST_SALES_PARTS_LOCATION _fromLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                MAST_SALES_PARTS_LOCATION _toLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.to_locationid);

                                List<MAST_SALES_PARTS_LOCATION> lstArrivalLocation = get_ArrivalLocation(convert.ToInt(_data.userid));
                                List<int> lstArrivalLocationIds = lstArrivalLocation.Select(x => x.PARTLOCATIONID).ToList();
                                List<salesparts> _lstpartDataMoved = new List<salesparts>();
                                List<selectedItemData> _sitem = _data.itemdata;
                                if (_sitem != null && _sitem.Count() > 0)
                                {

                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                    executionStrategy.Execute(() =>
                                    {
                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {

                                                for (int i = 0; i < _sitem.Count(); i++)
                                                {
                                                    selectedItemData _itemData = _sitem[i];
                                                    if (_itemData != null)
                                                    {
                                                        salesparts _partData = _dbContext.SALES_PARTS.Find(_itemData.salespartid);
                                                        if (_partData != null)
                                                        {
                                                            _lstpartDataMoved.Add(_partData);
                                                            List<PartInventoryStockDetails> lstPartInventoryData = new List<PartInventoryStockDetails>();
                                                            if (_itemData.serial != "")
                                                            {
                                                                lstPartInventoryData = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == _partData.salespartid && x.customerid == _itemData.customerid && x.PARTLOCATIONID == _data.locationid && x.qty_intransit_to_location > 1 && x.SERIAL == _itemData.serial).ToList();
                                                            }
                                                            else
                                                            {
                                                                lstPartInventoryData = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == _partData.salespartid && x.customerid == _itemData.customerid && x.PARTLOCATIONID == _data.locationid && x.qty_intransit_to_location > 1 && x.stock_typeid == _itemData.stocktypeid).ToList();
                                                            }
                                                            if (lstPartInventoryData.Count() > 0)
                                                            {
                                                                if (convert.ToFloat(_itemData.selected_qty) <= lstPartInventoryData.Count())
                                                                {
                                                                    lstPartInventoryData = lstPartInventoryData.OrderBy(x => x.DATE_IN).ToList();
                                                                    for (int j = 0; j < _itemData.selected_qty; j++)
                                                                    {
                                                                        PartInventoryStockDetails ItemDataLocationData = lstPartInventoryData[j];
                                                                        PartInventoryStockDetails ItemData = lstPartInventoryData[j];
                                                                        if (lstArrivalLocationIds.Contains(convert.ToInt(ItemDataLocationData.PARTLOCATIONID)))
                                                                        {
                                                                            if (ItemDataLocationData.receive_with_bulk == 1)
                                                                            {
                                                                                if (convert.ToInt(ItemData.grn_exported) != 2)
                                                                                {
                                                                                    ItemData.grn_exported = 1;     // Grn exported = 1 for From Location as Arrival location if its In Bulk
                                                                                }
                                                                                else
                                                                                {
                                                                                    // already grn_exported exported
                                                                                    if (convert.ToInt(ItemData.move_exported) != 2)
                                                                                    {
                                                                                        ItemData.move_exported = 1;     // Move exported = 1 for From Location as Arrival location if its not In Bulk
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        // already move_exported exported
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if (convert.ToInt(ItemData.move_exported) != 2)
                                                                                {
                                                                                    ItemData.move_exported = 1;     // Move exported = 1 for From Location as Arrival location if its not In Bulk
                                                                                }
                                                                                else
                                                                                {
                                                                                    // already move_exported exported
                                                                                }
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if (convert.ToInt(ItemData.move_exported) != 2)
                                                                            {
                                                                                ItemData.move_exported = 1;     // Move exported = 1 for From Location as Main location 
                                                                            }
                                                                            else
                                                                            {
                                                                                // already move_exported exported
                                                                            }
                                                                        }
                                                                        ItemData.PARTLOCATIONID = _data.to_locationid;
                                                                        ItemData.qty_intransit_to_location = null;
                                                                        ItemData.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(ItemData);
                                                                        _dbContext.SaveChanges();
                                                                        UpdatePartStock(ItemData.SITEID, ItemData.SalesPartId, ItemData.customerid, ItemData.M3);

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Move quantity '" + lstPartInventoryData.Count() + "' cannot be greater than selected quantity '" + convert.ToFloat(_itemData.selected_qty) + "'.");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("Unable to get selected parts for part name " + _partData.partname + ".");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to get parts details.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Unable to get selected items.");
                                                    }
                                                }
                                                dbContextTransaction.Commit();
                                                for (int i = 0; i < _data.itemdata.Count(); i++)
                                                {
                                                    selectedItemData _itemMoved = _data.itemdata[i];
                                                    salesparts _PartData = _lstpartDataMoved[i];
                                                    if (_itemMoved.serial != "")
                                                    {
                                                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have moved Part stock details with Part number " + _PartData.part_number + " with selected quantity " + _itemMoved.selected_qty + " from Location " + _fromLocation.PARTLOCATION_CODE + " to Location " + _toLocation.PARTLOCATION_CODE + ".");
                                                        CommonFunction.SetAudit("Move_Selected_InventoryParts", "Updated", "", "User : " + _UserData.EX_USERNAME + " have moved Part stock details with Part number " + _PartData.part_number + " with selected quantity " + _itemMoved.selected_qty + " from Location " + _fromLocation.PARTLOCATION_CODE + " to Location " + _toLocation.PARTLOCATION_CODE + ".", "");
                                                    }
                                                    else
                                                    {
                                                        CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have moved Part stock details with Part number " + _PartData.part_number + " with serial " + _itemMoved.serial + " from Location " + _fromLocation.PARTLOCATION_CODE + " to Location " + _toLocation.PARTLOCATION_CODE + ".");
                                                        CommonFunction.SetAudit("Move_Selected_InventoryParts", "Updated", "", "User : " + _UserData.EX_USERNAME + " have moved Part stock details with serial " + _itemMoved.serial + " with selected quantity " + _itemMoved.selected_qty + " from Location " + _fromLocation.PARTLOCATION_CODE + " to Location " + _toLocation.PARTLOCATION_CODE + ".", "");
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                dbContextTransaction.Rollback();
                                                throw ex;
                                            }
                                        }
                                    });
                                }
                                else
                                {
                                    throw new Exception("Unable to get selected items list.");
                                }
                            }
                            return Ok(true); // if all ok then return true
                        }
                        else
                        {
                            throw new Exception("Unable to get Userid.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get Move Location data.");
                }
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Move_Selected_InventoryParts  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Move_Selected_InventoryParts", "Error", "", "Error Move_Selected_InventoryParts - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Move_Selected_InventoryParts stopped successfully.");
            }
        }

        private void UpdatePartStock(int? Siteid, int? SalesPartid, int? Customerid, double? m3)
        {
            List<MAST_SALES_PARTS_LOCATION> _location = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => x.siteid == Siteid).ToList();
            foreach (MAST_SALES_PARTS_LOCATION location in _location)
            {
                var inventorylist = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SalesPartId == SalesPartid && a.SITEID == Siteid && a.PARTLOCATIONID == location.PARTLOCATIONID && a.DATE_OUT == null && a.customerid == Customerid).ToList();
                if (inventorylist != null)
                {
                    var locationstock = inventorylist.Sum(a => convert.ToFloat(a.QUANTITY));
                    var reservedstock = inventorylist.Where(x => (x.shipmentid > 0 || x.CustomerOrderId > 0) && convert.ToInt(x.qty_intransit_to_location) == 0).Sum(a => convert.ToFloat(a.QUANTITY));
                    var intransitstock = inventorylist.Where(x => x.qty_intransit_to_location > 0).Sum(a => convert.ToFloat(a.QUANTITY));
                    if (convert.ToFloat(locationstock) >= 0)
                    {
                        List<PartInventoryStock> _lststock = _dbContext.PART_INVENTORY_STOCK.Where(a => a.SalesPartId == SalesPartid && a.SITEID == Siteid && a.PARTLOCATIONID == location.PARTLOCATIONID && a.customerid == Customerid).ToList();
                        PartInventoryStock _stock;
                        if (_lststock == null || (_lststock != null && _lststock.Count == 0))
                        {
                            if (inventorylist.Count == 0) continue;
                            _stock = new PartInventoryStock();
                            _stock.CREATED_DATE = DateTime.Now;
                        }
                        else
                        {
                            _stock = _lststock[0];
                            _stock.UPDATED_DATE = DateTime.Now;
                        }
                        _stock.QTY_IN_HAND = convert.ToFloat(locationstock);
                        _stock.QTY_RESERVED = convert.ToFloat(reservedstock);
                        _stock.QTY_INTRANSIT = convert.ToFloat(intransitstock);
                        double _m3 = convert.ToFloat(m3 == null ? 0 : m3);
                        _stock.M3 = convert.ToFloat(_stock.QTY_IN_HAND * _m3);
                        _stock.SalesPartId = SalesPartid;
                        _stock.SITEID = Siteid;
                        _stock.PARTLOCATIONID = location.PARTLOCATIONID;
                        _stock.customerid = Customerid;
                        int changes = -1;
                        if (_stock.PARTSTOCKID == 0)
                        {
                            _dbContext.PART_INVENTORY_STOCK.Add(_stock);
                        }
                        else _dbContext.PART_INVENTORY_STOCK.Update(_stock);
                        changes = _dbContext.SaveChanges();
                        if (changes <= 0) { throw new Exception("Unable to update stock for location " + location.PARTLOCATION_CODE + "-" + location.PARTLOCATION_DESCR); }
                    }
                }
            }
        }

        #endregion 

        #region Inventory Details

        [HttpPost]
        [Route("Get_Partstock_Details_Filter")]
        public IActionResult Get_Partstock_Details_Filter(int? Userid, [FromHeader] string AUTHENTICATION_KEY)
        {
            PartInventoryStockDetailsFilter _modal = new PartInventoryStockDetailsFilter();
            try
            {
                if (convert.ToInt(Userid) > 0)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Partstock_Details_Filter");
                    CommonFunction.setLog("User Id  : " + Userid);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == Userid);
                        if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                        {
                            return NotFound("Unable to get Userdata for Userid : " + Userid);
                        }
                        else
                        {
                            List<Customers> lstCustomer = _dbContext.Customers.Where(x => x.Customer_Type.ToUpper() == "CUSTOMER").ToList();
                            List<Customer_Info> customer_info = (List<Customer_Info>)lstCustomer.Select(x => new Customer_Info { customerid = x.Customer_ID, customer_name = x.Customer_Code + " - " + x.Customer_Name }).ToList();
                            _modal.customer_info = customer_info;
                            _modal.lst_Location = _dbContext.MAST_SALES_PARTS_LOCATION.ToList();
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Invalid user id");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_PartDetails_Filter  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_PartDetails_Filter", "Error", "", "Error Get_PartDetails_Filter - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Partstock_Details_Filter stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Partstock_Details")]
        public IActionResult Get_Partstock_Details(PartData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Partstock_Details");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    string _partNum = "", _serialNum = "";
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get User data for Userid : " + _data.userid);
                            }
                            else
                            {
                                salesparts vParts = null;
                                if (convert.ToString(_data.scannedpartno) != "")
                                {
                                    if (convert.ToString(_data.scannedpartno) != "")
                                    {
                                        _partNum = convert.ToString(_data.scannedpartno).Trim();
                                        _serialNum = convert.ToString(_data.scannedserialno).Trim();
                                        vParts = _dbContext.SALES_PARTS.FirstOrDefault(x => x.part_number == _partNum);
                                        if (vParts == null)
                                        {
                                            vParts = _dbContext.SALES_PARTS.FirstOrDefault(x => x.cust_part_no == _partNum);
                                        }
                                    }
                                    else
                                    {
                                        _partNum = convert.ToString(_data.scannedpartno).Trim();
                                        vParts = _dbContext.SALES_PARTS.FirstOrDefault(x => x.part_number == _partNum);
                                        if (vParts == null)
                                        {
                                            vParts = _dbContext.SALES_PARTS.FirstOrDefault(x => x.cust_part_no == _partNum);
                                        }
                                    }
                                    if (vParts != null)
                                    {
                                        if (convert.ToInt(_data.locationid) > 0)
                                        {
                                            if (_serialNum != "")
                                            {
                                                lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == vParts.salespartid && x.SERIAL == (_serialNum) && x.PARTLOCATIONID == convert.ToInt(_data.locationid)).ToList();
                                            }
                                            else
                                            {
                                                lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == vParts.salespartid && x.PARTLOCATIONID == convert.ToInt(_data.locationid)).ToList();
                                            }
                                            if (lstPartStockDetails.Count > 0)
                                            {
                                                if (_data.customerid != null && convert.ToInt(_data.customerid) > 0)
                                                {
                                                    lstPartStockDetails = lstPartStockDetails.Where(x => x.customerid == convert.ToInt(_data.customerid)).ToList();
                                                }
                                                if (_data.orderno != null && convert.ToString(_data.orderno) != "")
                                                {
                                                    lstPartStockDetails = lstPartStockDetails.Where(x => x.internal_order_no == convert.ToString(_data.orderno)).ToList();
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Please provide Part Location.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get Part details for " + _data.scannedpartno);
                                    }
                                }
                                else
                                {
                                    throw new Exception("Part details is empty");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("User data is empty");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(lstPartStockDetails);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Partstock_Details  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Partstock_Details", "Error", "", "Error Get_Partstock_Details - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Partstock_Details stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Open_Partstock_Details")]
        public IActionResult Open_Partstock_Details(PartStockData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                OpenPartInventoryStockDetails _modal = new OpenPartInventoryStockDetails();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Open_Partstock_Details");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get User data for Userid : " + _data.userid);
                            }
                            else
                            {
                                if (convert.ToInt(_data.partstockdetailsid) > 0)
                                {
                                    _modal._PartInventoryStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(convert.ToInt(_data.partstockdetailsid));
                                    if (_modal._PartInventoryStockDetails != null)
                                    {
                                        _modal._PartInventoryStock = _dbContext.V_PART_INVENTORY_STOCK.FirstOrDefault(x => x.customerid == convert.ToInt(_modal._PartInventoryStockDetails.customerid) && x.PARTLOCATIONID == _modal._PartInventoryStockDetails.PARTLOCATIONID && x.SalesPartId == _modal._PartInventoryStockDetails.SalesPartId);
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get Part Inventory details");
                                    }
                                    _modal._StockType = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                                    {
                                        STOCK_TYPEID = x.STOCK_TYPEID,
                                        STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                                    }).ToList();
                                }
                                else
                                {
                                    throw new Exception("Unable to get Part Inventory Stock Details from partstockdetailsid :" + _data.partstockdetailsid);
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("User data is empty");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Open_Partstock_Details  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Open_Partstock_Details", "Error", "", "Error Open_Partstock_Details - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Open_Partstock_Details stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Update_Partstock_Details")]
        public IActionResult Update_Partstock_Details(Update_PartStock_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                bool _result = false;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Update_Partstock_Details");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    string? Serial = null;
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get User data for Userid : " + _data.userid);
                            }
                            else
                            {
                                PartInventoryStockDetails _partStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(_data.partstockdetailsid);
                                PartInventoryStockDetails _partStockDetailsExt = _partStockDetails;
                                if (_partStockDetails != null)
                                {
                                    salesparts vParts = _dbContext.SALES_PARTS.Find(_partStockDetails.SalesPartId);
                                    if (vParts != null)
                                    {
                                        //checking Validation
                                        if (vParts.receive_with_lots == 1)
                                        {
                                            if (_data.batchno != "")
                                            {
                                                // Lot no is present.
                                            }
                                            else
                                            {
                                                throw new Exception("Lot no is required.");
                                            }
                                        }
                                        else
                                        {
                                            _data.batchno = null;
                                        }
                                        if (vParts.receive_with_serials == 1)
                                        {
                                            if (_data.serialno != "")
                                            {
                                                if (_data.serialno.Contains("*"))
                                                {
                                                    Serial = _data.serialno.Split('*')[1];
                                                }
                                                else
                                                {
                                                    Serial = _data.serialno;
                                                }

                                                // serial no is present.
                                                List<PartInventoryStockDetails> _lststockdetail1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SERIAL.ToUpper() == Serial.ToUpper() && a.PART_STOCK_DETAIL_ID != _partStockDetails.PART_STOCK_DETAIL_ID && a.SalesPartId == _partStockDetails.SalesPartId && a.customerid == _partStockDetails.customerid).ToList();
                                                if (_lststockdetail1.Count() > 0) throw new Exception("Serial No. " + _data.serialno.ToUpper() + " is already in use.");
                                            }
                                            else
                                            {
                                                throw new Exception("Serial no is required.");
                                            }
                                        }
                                        else
                                        {
                                            _data.serialno = null;
                                        }
                                        if (vParts.expiry_date_required == 1)
                                        {
                                            if (_data.expireDate != "")
                                            {
                                                DateTime _dt = convert.ToDateTime(_data.expireDate, "dd/MM/yyyy");
                                                if (_dt == DateTime.MinValue)
                                                {
                                                    throw new Exception("Invalid Expire Date : " + _data.expireDate);
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Expire date is required.");
                                            }
                                        }
                                        else
                                        {
                                            _data.expireDate = null;
                                        }

                                        if (convert.ToInt(_partStockDetails.shipmentid) > 0)
                                        {
                                            throw new Exception("Unable to update item as Stock details is in Reserved status.");
                                        }

                                        if (convert.ToInt(_partStockDetails.qty_intransit_to_location) > 0)
                                        {
                                            throw new Exception("Unable to update item as Stock details is In-Transit status.");
                                        }


                                        var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                        executionStrategy.Execute(() =>
                                        {
                                            using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                            {
                                                try
                                                {
                                                    _partStockDetails.UPDATED_DATE = DateTime.Now;
                                                    _partStockDetails.marking = _data.marking;
                                                    if (_data.expireDate != null)
                                                    {
                                                        DateTime _dtExpire = convert.ToDateTime(_data.expireDate, "dd/MM/yyyy");
                                                        _partStockDetails.EXPIRY_DATE = _dtExpire;
                                                    }
                                                    _partStockDetails.BATCH = _data.batchno;
                                                    _partStockDetails.SERIAL = Serial;
                                                    _partStockDetails.stock_typeid = _data.stocktypeid;
                                                    _dbContext.Entry(_partStockDetailsExt).CurrentValues.SetValues(_partStockDetails);
                                                    _dbContext.SaveChanges();
                                                    dbContextTransaction.Commit();
                                                    CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " Updated Part stock details for Part number " + vParts.part_number + ".");
                                                    CommonFunction.SetAudit("Update_Partstock_Details", "Updated", "", "User : " + _UserData.EX_USERNAME + " Updated Part stock details for Part number " + vParts.part_number + ".", "");
                                                    _result = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    dbContextTransaction.Rollback();
                                                    throw ex;
                                                }
                                            }
                                        });
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get Part Inventory stock details from id : " + _data.partstockdetailsid);
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("User data is empty");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Update_Partstock_Details  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Update_Partstock_Details", "Error", "", "Error Update_Partstock_Details - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Update_Partstock_Details stopped successfully.");
            }

        }

        [HttpPost]
        [Route("Get_Partstock_Type")]
        public IActionResult Get_Partstock_Type(userData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                bool _result = false;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Partstock_Type");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get User data for Userid : " + _data.userid);
                            }
                            else
                            {
                                return Ok(_dbContext.Mast_STOCK_TYPE.ToList());
                            }
                        }
                        else
                        {
                            throw new Exception("User data is empty");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Partstock_Type  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Partstock_Type", "Error", "", "Error Get_Partstock_Type - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Partstock_Type stopped successfully.");
            }
        }

        #endregion

        #region One Step PutAway and Move

        [HttpPost]
        [Route("Get_Orderno_By_Locationid")]
        public IActionResult Get_Orderno_By_Locationid(getselectedItemData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Orderno_By_Locationid");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Orderno_By_Locationid");
                                List<InternalOrderData> lstOrderData = new List<InternalOrderData>();
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();

                                List<string> lstStr = new List<string>();
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                                if (sLoaction != null)
                                {
                                    lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid).ToList();
                                }
                                lstOrderData = lstPartStockDetails.Select(x => new InternalOrderData { orderid = x.OrderId, order_no = x.internal_order_no }).Distinct(new InternalOrderDataComparer()).ToList();

                                return Ok(lstOrderData);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(lstSelectPartStockDetails);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Orderno_By_Locationid ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Orderno_By_Locationid", "Error", "", "Error Get_Orderno_By_Locationid - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Orderno_By_Locationid stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Single_Step_Parts_for_Putaway")]
        public IActionResult Get_Single_Step_Parts_for_Putaway(getselectedItemData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                List<Select_PartInventoryStockDetails> lstSelectPartStockDetails = new List<Select_PartInventoryStockDetails>();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Single_Step_Parts_for_Putaway");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Single_Step_Parts_for_Putaway");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lstMainPartStockDetails = new List<PartInventoryStockDetails>();

                                List<string> lstStr = new List<string>();
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.partlocationid);
                                if (sLoaction != null)
                                {
                                    lstPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.qty_intransit_to_location == 2 && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
                                    lstMainPartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.shipmentid == null && x.CustomerOrderId == null).ToList();
                                }

                                if (lstPartStockDetails.Count() > 0)
                                {
                                    foreach (V_PartInventoryStockDetails vPartDetails in lstPartStockDetails)
                                    {
                                        Select_PartInventoryStockDetails selPartDetails = new Select_PartInventoryStockDetails();
                                        if (convert.ToInt(vPartDetails.RECEIVE_WITH_SERIALS) == 1)
                                        {
                                            PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(vPartDetails.PART_STOCK_DETAIL_ID);
                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid);
                                            //selPartDetails.ids.Add(vPartDetails.PART_STOCK_DETAIL_ID);
                                            selPartDetails.salespartid = vPartDetails.SalesPartId;
                                            selPartDetails.quantity = vPartDetails.QUANTITY;
                                            selPartDetails.quantity_in_hand = PartStock.QTY_IN_HAND;
                                            selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                            selPartDetails.uom = vPartDetails.UOM;
                                            selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                            selPartDetails.partname = vPartDetails.PARTNAME;
                                            selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                            selPartDetails.siteid = vPartDetails.SITEID;
                                            selPartDetails.site_code = vPartDetails.SITE_CODE;
                                            selPartDetails.orderid = vPartDetails.OrderId;
                                            selPartDetails.orderno = vPartDetails.internal_order_no;
                                            selPartDetails.m3 = vPartDetails.M3;
                                            selPartDetails.serial = vPartDetails.SERIAL;
                                            selPartDetails.batch = vPartDetails.BATCH;
                                            selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                            selPartDetails.customerid = vPartDetails.customerid;
                                            selPartDetails.customer_name = vPartDetails.customer_name;
                                            selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                            selPartDetails.stock_type = vPartDetails.stock_type;
                                            selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                            selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                            selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                            selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                            selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                            selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                            selPartDetails.updated_date = _partStockdetails.UPDATED_DATE;

                                            lstSelectPartStockDetails.Add(selPartDetails);
                                        }
                                        else
                                        {
                                            List<Select_PartInventoryStockDetails> lstD = lstSelectPartStockDetails.Where(x => x.salespartid == vPartDetails.SalesPartId && x.partlocationid == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.orderid == vPartDetails.OrderId).ToList();
                                            if (lstD.Count() == 0)
                                            {
                                                List<V_PartInventoryStockDetails> lstData = lstPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.OrderId == vPartDetails.OrderId).ToList();
                                                List<PartInventoryStockDetails> lstMainData = lstMainPartStockDetails.Where(x => x.SalesPartId == vPartDetails.SalesPartId && x.PARTLOCATIONID == vPartDetails.PARTLOCATIONID && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.OrderId == vPartDetails.OrderId).ToList();
                                                lstMainData = lstMainData.OrderByDescending(x => x.UPDATED_DATE).ToList();

                                                List<V_PartInventoryStockDetails> lstTotalStockDetailByStockType = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.Shipmentid == null && x.CustomerOrderId == null && x.SalesPartId == vPartDetails.SalesPartId && x.customerid == vPartDetails.customerid && x.stock_typeid == vPartDetails.stock_typeid && x.OrderId == vPartDetails.OrderId).ToList();
                                                if (lstData != null && lstData.Count() > 0)
                                                {
                                                    DateTime _UpdateDate = DateTime.Now;
                                                    PartInventoryStockDetails _partStockdetails = lstMainData.FirstOrDefault();
                                                    if (_partStockdetails != null)
                                                    {
                                                        _UpdateDate = convert.ToDateTime(_partStockdetails.UPDATED_DATE);
                                                    }

                                                    //PartInventoryStockDetails _partStockdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(lstData[0].PART_STOCK_DETAIL_ID);
                                                    PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lstData[0].SalesPartId && x.PARTLOCATIONID == lstData[0].PARTLOCATIONID && x.customerid == lstData[0].customerid);
                                                    double qty = convert.ToFloat(lstData.Sum(x => x.QUANTITY));
                                                    double Total_qty = convert.ToFloat(lstTotalStockDetailByStockType.Sum(x => x.QUANTITY));
                                                    List<int> ids = lstData.Select(x => x.PART_STOCK_DETAIL_ID).ToList();
                                                    //selPartDetails.ids = ids;
                                                    selPartDetails.salespartid = vPartDetails.SalesPartId;
                                                    selPartDetails.quantity = qty;
                                                    selPartDetails.quantity_in_hand = Total_qty;
                                                    selPartDetails.partstockid = PartStock.PARTSTOCKID;
                                                    selPartDetails.uom = vPartDetails.UOM;
                                                    selPartDetails.part_number = vPartDetails.PART_NUMBER;
                                                    selPartDetails.partname = vPartDetails.PARTNAME;
                                                    selPartDetails.partlocationid = vPartDetails.PARTLOCATIONID;
                                                    selPartDetails.siteid = vPartDetails.SITEID;
                                                    selPartDetails.site_code = vPartDetails.SITE_CODE;
                                                    selPartDetails.orderid = vPartDetails.OrderId;
                                                    selPartDetails.orderno = vPartDetails.internal_order_no;
                                                    selPartDetails.m3 = vPartDetails.M3;
                                                    selPartDetails.serial = vPartDetails.SERIAL;
                                                    selPartDetails.batch = vPartDetails.BATCH;
                                                    selPartDetails.expiry_date = vPartDetails.EXPIRY_DATE;
                                                    selPartDetails.customerid = vPartDetails.customerid;
                                                    selPartDetails.customer_name = vPartDetails.customer_name;
                                                    selPartDetails.stock_typeid = vPartDetails.stock_typeid;
                                                    selPartDetails.stock_type = vPartDetails.stock_type;
                                                    selPartDetails.partlocation_code = vPartDetails.PARTLOCATION_CODE;
                                                    selPartDetails.partlocation_descr = vPartDetails.partlocation_descr;
                                                    selPartDetails.receive_with_serial = vPartDetails.RECEIVE_WITH_SERIALS;
                                                    selPartDetails.receive_with_bulk = vPartDetails.receive_with_bulk;
                                                    selPartDetails.receive_with_lots = vPartDetails.receive_with_lots;
                                                    selPartDetails.expiry_date_required = vPartDetails.expiry_date_required;
                                                    selPartDetails.updated_date = _UpdateDate;
                                                    lstSelectPartStockDetails.Add(selPartDetails);
                                                }
                                            }
                                        }
                                    }
                                    lstSelectPartStockDetails = lstSelectPartStockDetails.OrderByDescending(x => x.updated_date).ToList();
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(lstSelectPartStockDetails);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Single_Step_Parts_for_Putaway ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Single_Step_Parts_for_Putaway", "Error", "", "Error Get_Single_Step_Parts_for_Putaway - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Single_Step_Parts_for_Putaway stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Single_Step_Remove_Selected_Parts_By_Customer_Putaway")]
        public IActionResult Single_Step_Remove_Selected_Parts_By_Customer_Putaway(RemoveLocationPartsDataByCustomer_Putaway _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Single_Step_Remove_Selected_Parts_By_Customer_Putaway");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {

                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Single_Step_Remove_Selected_Parts_By_Customer_Putaway");
                                var SiteId = GetLinkedSites(_UserData);

                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.FirstOrDefault(x => x.INTERNALORDERID == _data.orderid && LstSiteIds.Contains((int)x.SITEID) && x.Is_Delete != 1);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (vParts.receive_with_serials == 1)
                                        {
                                            if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Serial number is required.");
                                            }
                                        }

                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location >= 1 && x.stock_typeid == _data.stocktypeid && x.OrderId == _data.orderid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location >= 1 && x.OrderId == _data.orderid).ToList();
                                        }
                                        if (lst_Partdetails.Count > 0)
                                        {
                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() != 0)
                                            {
                                                if (lst_Partdetails.Count() < _data.remove_qty)
                                                {
                                                    throw new Exception("Cannot cancel Items more than '" + lst_Partdetails.Count() + "'.");
                                                }

                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Part inventory details.");
                                            }
                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.remove_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    PartStockDetails.qty_intransit_to_location = null;
                                                                    PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                    _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                    _dbContext.SaveChanges();
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid  /* && x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have remove Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                CommonFunction.SetAudit("Single_Step_Remove_Selected_Parts_By_Customer_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have remove Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.", "");

                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part Inventory Stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part Inventory Stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get selected Part Inventory Stock.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Single_Step_Remove_Selected_Parts_By_Customer_Putaway  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Single_Step_Remove_Selected_Parts_By_Customer_Putaway", "Error", "", "Error Remove_Selected_Parts_By_Customer_Putaway - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Single_Step_Remove_Selected_Parts_By_Customer_Putaway stopped successfully.");
            }

        }

        [HttpPost]
        [Route("Single_Step_Check_Set_Parts_From_Location_for_Putaway")]
        public IActionResult Single_Step_Check_Set_Parts_From_Location_for_Putaway(SetInbulkLocationPartsData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                bool isArrivalLocation = false;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                INTERNAL_ORDERS _internalOrder = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Single_Step_Check_Set_Parts_From_Location_for_Putaway");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Single_Step_Check_Set_Parts_From_Location_for_Putaway");
                                var SiteId = GetLinkedSites(_UserData);

                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.Locationid);

                                List<int> lstArrival = get_Arrival_LocationId_List(convert.ToInt(_data.UserId));
                                if (lstArrival.Contains(convert.ToInt(_data.Locationid)))
                                {
                                    isArrivalLocation = true;
                                    CommonFunction.setLog("Arrival Location is selected");
                                    if (_data.OrderNo == "")
                                    {
                                        throw new Exception("Unable to get Order no.");
                                    }
                                    _internalOrder = _dbContext.INTERNAL_ORDERS.FirstOrDefault(x => x.INTERNAL_ORDER_NO == _data.OrderNo && LstSiteIds.Contains((int)x.SITEID) && x.Is_Delete != 1);

                                    if (_internalOrder == null)
                                    {
                                        throw new Exception("Unable to get Order details.");
                                    }
                                }
                                else
                                {
                                    CommonFunction.setLog("Main Location is selected");
                                }
                                //int OrderSiteId = convert.ToInt(_internalOrder.SITEID);
                                //if (!LstSiteIds.Contains(OrderSiteId))
                                //{
                                //    throw new Exception("Unable to get Order details");
                                //}

                                if (sLoaction != null)
                                {
                                    if (_data.scannedpartno != "")
                                    {
                                        partNum = _data.scannedpartno;
                                        serialNum = _data.scannedserialno;
                                        vParts = getPartDetails(partNum);
                                        if (vParts != null)
                                        {
                                            if (convert.ToInt(vParts.receive_with_serials) == 1)
                                            {
                                                List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
                                                if (isArrivalLocation)
                                                {
                                                    lst_v_part_inventory_stock_details = lst_v_part_inventory_stock_details.Where(x => x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                }
                                                if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                {
                                                    V_PartInventoryStockDetails _v_inventorystockdetails = lst_v_part_inventory_stock_details.FirstOrDefault(x => x.qty_intransit_to_location != null);
                                                    if (_v_inventorystockdetails != null)
                                                    {
                                                        throw new Exception("Part is already selected for this location and Order no.");
                                                    }
                                                    if (lst_v_part_inventory_stock_details.Count() > 0 && lst_v_part_inventory_stock_details.Count() == 1)
                                                    {

                                                        v_part_inventory_stock_details = lst_v_part_inventory_stock_details[0];
                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == v_part_inventory_stock_details.SalesPartId && x.PARTLOCATIONID == v_part_inventory_stock_details.PARTLOCATIONID && x.customerid == v_part_inventory_stock_details.customerid);
                                                        PartInventoryStockDetails PartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(v_part_inventory_stock_details.PART_STOCK_DETAIL_ID);

                                                        Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                        if (mastStockType != null)
                                                        {
                                                            if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                            {
                                                                throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                        }

                                                        if (convert.ToInt(v_part_inventory_stock_details.Shipmentid) != 0 && convert.ToInt(v_part_inventory_stock_details.shipmentlineid) != 0)
                                                        {
                                                            throw new Exception("Part is already in reserver status for this location.");
                                                        }
                                                        if (convert.ToInt(v_part_inventory_stock_details.qty_intransit_to_location) >= 1)
                                                        {
                                                            throw new Exception("Part is already selected for this location.");
                                                        }
                                                        else
                                                        {
                                                            var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                            executionStrategy.Execute(() =>
                                                            {
                                                                using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                {
                                                                    try
                                                                    {
                                                                        PartStockDetails.qty_intransit_to_location = 2;
                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                        _dbContext.SaveChanges();
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
                                                                        }
                                                                        dbContextTransaction.Commit();
                                                                        if (_internalOrder != null)
                                                                        {
                                                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                            CommonFunction.SetAudit("Single_Step_Check_Set_Parts_From_Location_for_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.", "");
                                                                        }
                                                                        else
                                                                        {
                                                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                            CommonFunction.SetAudit("Single_Step_Check_Set_Parts_From_Location_for_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details Part No : " + vParts.part_number + " for PUTAWAY.", "");
                                                                        }
                                                                        return Ok(true);
                                                                    }
                                                                    catch (Exception ex)
                                                                    {
                                                                        dbContextTransaction.Rollback();
                                                                        throw ex;
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                        lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                        if (lst_v_part_inventory_stock_details.Count() > 0)
                                                        {
                                                            _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(_modal, lst_v_part_inventory_stock_details);
                                                            return Ok(_modal);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    List<V_PartInventoryStockDetails> lst_V_part_stock_details_Inbulk = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == null && x.stock_type == null && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null).ToList();
                                                    if (isArrivalLocation)
                                                    {
                                                        lst_V_part_stock_details_Inbulk = lst_V_part_stock_details_Inbulk.Where(x => x.OrderId == _internalOrder.INTERNALORDERID && x.receive_with_bulk == 1).ToList();
                                                    }

                                                    if (lst_V_part_stock_details_Inbulk.Count() > 0)
                                                    {
                                                        V_PartInventoryStockDetails _partDetails_Inbulk = lst_V_part_stock_details_Inbulk.OrderByDescending(x => x.DATE_IN).FirstOrDefault();
                                                        if (_partDetails_Inbulk != null)
                                                        {

                                                            PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == _partDetails_Inbulk.SalesPartId && x.PARTLOCATIONID == _partDetails_Inbulk.PARTLOCATIONID && x.customerid == _partDetails_Inbulk.customerid);
                                                            select_PartInventoryStockDetails_Inbulk _partStockDetails_inbulk = new select_PartInventoryStockDetails_Inbulk();
                                                            List<INTERNAL_ORDER_LINE> _orderline = _dbContext.INTERNAL_ORDER_LINE.Where(x => x.SALESPARTID == _partDetails_Inbulk.SalesPartId && x.ORDERID == _internalOrder.INTERNALORDERID).ToList();
                                                            double? qty_to_be_receive = convert.ToFloat(lst_V_part_stock_details_Inbulk.Where(x => x.stock_typeid == null).ToList().Count());
                                                            double? order_qty = convert.ToFloat(_orderline.Sum(x => x.QTY));
                                                            double? order_rec_qty = convert.ToFloat(_orderline.Sum(x => x.QTY_REC));
                                                            //_partStockDetails_inbulk.partstockdetailid = _partDetails_Inbulk.PART_STOCK_DETAIL_ID;
                                                            _partStockDetails_inbulk.salespartid = _partDetails_Inbulk.SalesPartId;
                                                            _partStockDetails_inbulk.order_quantity = order_qty;
                                                            _partStockDetails_inbulk.order_rec_quantity = order_rec_qty;
                                                            _partStockDetails_inbulk.quantity_in_hand = PartStock.QTY_IN_HAND;
                                                            _partStockDetails_inbulk.quantity_inbulk_to_be_receive = qty_to_be_receive;
                                                            _partStockDetails_inbulk.partstockid = PartStock.PARTSTOCKID;
                                                            _partStockDetails_inbulk.uom = _partDetails_Inbulk.UOM;
                                                            _partStockDetails_inbulk.part_number = _partDetails_Inbulk.PART_NUMBER;
                                                            _partStockDetails_inbulk.partname = _partDetails_Inbulk.PARTNAME;
                                                            _partStockDetails_inbulk.partlocationid = _partDetails_Inbulk.PARTLOCATIONID;
                                                            _partStockDetails_inbulk.siteid = _partDetails_Inbulk.SITEID;
                                                            _partStockDetails_inbulk.site_code = _partDetails_Inbulk.SITE_CODE;
                                                            _partStockDetails_inbulk.orderid = _partDetails_Inbulk.OrderId;
                                                            _partStockDetails_inbulk.orderno = _internalOrder.INTERNAL_ORDER_NO;
                                                            _partStockDetails_inbulk.m3 = _partDetails_Inbulk.M3;
                                                            _partStockDetails_inbulk.serial = _partDetails_Inbulk.SERIAL;
                                                            _partStockDetails_inbulk.batch = _partDetails_Inbulk.BATCH;
                                                            _partStockDetails_inbulk.expiry_date = _partDetails_Inbulk.EXPIRY_DATE;
                                                            _partStockDetails_inbulk.customerid = _partDetails_Inbulk.customerid;
                                                            _partStockDetails_inbulk.customer_name = _partDetails_Inbulk.customer_name;
                                                            _partStockDetails_inbulk.stock_typeid = _partDetails_Inbulk.stock_typeid;
                                                            _partStockDetails_inbulk.stock_type = _partDetails_Inbulk.stock_type;
                                                            _partStockDetails_inbulk.partlocation_code = _partDetails_Inbulk.PARTLOCATION_CODE;
                                                            _partStockDetails_inbulk.partlocation_descr = _partDetails_Inbulk.partlocation_descr;
                                                            _partStockDetails_inbulk.receive_with_lots = _partDetails_Inbulk.receive_with_lots;
                                                            _partStockDetails_inbulk.expiry_date_required = _partDetails_Inbulk.expiry_date_required;
                                                            _partStockDetails_inbulk.receive_with_serials = _partDetails_Inbulk.RECEIVE_WITH_SERIALS;
                                                            _partStockDetails_inbulk.receive_with_bulk = _partDetails_Inbulk.receive_with_bulk;
                                                            _partStockDetails_inbulk.receive_date = convert.ToDateTime(_partDetails_Inbulk.DATE_IN).ToString("dd/MM/yyyy HH:mm");

                                                            Modal_Serial_Inbulk_PartInventoryStockDetails _modal = new Modal_Serial_Inbulk_PartInventoryStockDetails();
                                                            _modal._partStockDetail_Inbulk = _partStockDetails_inbulk;
                                                            _modal._StockType = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality
                                                            {
                                                                STOCK_TYPEID = x.STOCK_TYPEID,
                                                                STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE + " - " + x.STOCK_TYPE_DESCRIPTION
                                                            }).ToList();
                                                            return Ok(_modal);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (_internalOrder != null)
                                                        {
                                                            throw new Exception("Unable to register new Part No. " + _data.scannedpartno + " as Inbulk stock not found for Order No - " + _internalOrder.INTERNAL_ORDER_NO + ".");
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to find Part No. " + _data.scannedpartno + ".");
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                //Parts without serial number;
                                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                                if (serialNum != "")
                                                {
                                                    lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.SERIAL == serialNum && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                }
                                                else
                                                {
                                                    lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                }
                                                if (isArrivalLocation)
                                                {
                                                    lst_Partdetails = lst_Partdetails.Where(x => x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                }
                                                //List<PartInventoryStockDetails> lst_Partdetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.shipmentlineid == null).ToList();
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    List<int> customerIdList = lst_Partdetails.Select(x => (int)x.customerid).ToList();
                                                    customerIdList = customerIdList.Distinct().ToList();
                                                    if (customerIdList.Count > 0 && customerIdList.Count() == 1)
                                                    {

                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                        if (PartStock != null)
                                                        {
                                                            if (lst_Partdetails.Count() == 1)  // if Non serials Part has only 1 Partdetails  
                                                            {
                                                                //double s_qty_intransit = convert.ToFloat(lst_Partdetails.Sum(x => x.QUANTITY));
                                                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                                executionStrategy.Execute(() =>
                                                                {
                                                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                                    {
                                                                        try
                                                                        {
                                                                            foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                            {
                                                                                v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                                Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                                                if (mastStockType != null)
                                                                                {
                                                                                    if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                                    {
                                                                                        CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        PartStockDetails.qty_intransit_to_location = 2;
                                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                                        _dbContext.SaveChanges();
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    CommonFunction.setLog("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                                                }
                                                                            }
                                                                            if (PartStock != null)
                                                                            {
                                                                                List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid/* && x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                                double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                                if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                                {
                                                                                    PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                    PartStock.UPDATED_DATE = DateTime.Now;
                                                                                    _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                    _dbContext.SaveChanges();
                                                                                }
                                                                                else
                                                                                {
                                                                                    throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Unable to get Part Inventory Stock for Part : " + vParts.part_number);
                                                                            }
                                                                            dbContextTransaction.Commit();
                                                                            if (_internalOrder != null)
                                                                            {
                                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                                CommonFunction.SetAudit("Single_Step_Check_Set_Parts_From_Location_for_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " for PUTAWAY.", "");
                                                                            }
                                                                            else
                                                                            {
                                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Part No : " + vParts.part_number + " for PUTAWAY.");
                                                                                CommonFunction.SetAudit("Single_Step_Check_Set_Parts_From_Location_for_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected single Part Stock Details for Part No : " + vParts.part_number + " for PUTAWAY.", "");

                                                                            }

                                                                            return Ok(true);
                                                                        }
                                                                        catch (Exception ex)
                                                                        {
                                                                            dbContextTransaction.Rollback();
                                                                            throw ex;
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                            else
                                                            {
                                                                ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                                List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                                if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                                {
                                                                    if (customerIdList.Count() > 0)
                                                                    {
                                                                        _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(_modal, lst_v_part_inventory_stock_details);
                                                                        return Ok(_modal);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to get PartStock for PartNumber  " + vParts.part_number + " in the current location");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ModalViewSelectedParts _modal = new ModalViewSelectedParts();
                                                        List<V_PartInventoryStockDetails> lst_v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.Locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location == null && x.Shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null).ToList();
                                                        if (isArrivalLocation)
                                                        {
                                                            lst_v_part_inventory_stock_details = lst_v_part_inventory_stock_details.Where(x => x.OrderId == _internalOrder.INTERNALORDERID).ToList();
                                                        }
                                                        if (lst_v_part_inventory_stock_details != null && lst_v_part_inventory_stock_details.Count() > 0)
                                                        {
                                                            if (customerIdList.Count() > 0 && customerIdList.Count() > 1)
                                                            {
                                                                _modal = Get_Selected_Multiple_Part_Inventory_Details_by_customers_Putaway(_modal, lst_v_part_inventory_stock_details);
                                                                return Ok(_modal);
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Partnumber " + vParts.part_number + " in the current location");
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Invalid Part no.");
                                        }


                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get Part number.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get location details.");
                                }

                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Single_Step_Check_Set_Parts_From_Location_for_Putaway  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Single_Step_Check_Set_Parts_From_Location_for_Putaway", "Error", "", "Error Single_Step_Check_Set_Parts_From_Location_for_Putaway - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Single_Step_Check_Set_Parts_From_Location_for_Putaway stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Single_Step_Select_Set_Parts_By_Customer_Putaway")]
        public IActionResult Single_Step_Select_Set_Parts_By_Customer_Putaway(SetLocationPartsDataByCustomer_putaway _data, [FromHeader] string AUTHENTICATION_KEY)  // to be handled Order id by arrival location
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Single_Step_Select_Set_Parts_By_Customer_Putaway");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Single_Step_Select_Set_Parts_By_Customer_Putaway");
                                var SiteId = GetLinkedSites(_UserData);
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.Find(_data.Orderid);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                salesparts vParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                List<PartInventoryStockDetails> lst_Partdetails = new List<PartInventoryStockDetails>();
                                List<PartInventoryStockDetails> lst_Partdetails1 = new List<PartInventoryStockDetails>();
                                string? serialNumber = null;
                                MAST_SALES_PARTS_LOCATION sLoaction = _dbContext.MAST_SALES_PARTS_LOCATION.Find(_data.locationid);
                                if (sLoaction != null)
                                {
                                    if (vParts != null)
                                    {
                                        if (vParts.receive_with_serials == 1)
                                        {
                                            if (_data.scannedPartNum != "")
                                            {
                                                if (_data.scannedPartNum.Contains("*"))
                                                {
                                                    serialNumber = _data.scannedPartNum.Split('*')[1];
                                                }
                                            }
                                            else if (_data.serialNum != "")
                                            {
                                                serialNumber = _data.serialNum;
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get Serial number.");
                                            }
                                        }
                                        if (serialNumber == null)
                                        {
                                            lst_Partdetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.qty_intransit_to_location == null && x.stock_typeid == _data.stocktypeid && x.OrderId == _data.Orderid).ToList();
                                        }
                                        else
                                        {
                                            lst_Partdetails1 = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.customerid == _data.customerid && x.shipmentid == null && x.CustomerOrderId == null && x.SERIAL == serialNumber && x.shipmentlineid == null && x.qty_intransit_to_location == null && x.OrderId == _data.Orderid).ToList();
                                        }

                                        if (lst_Partdetails1.Count > 0)
                                        {

                                            for (int i = 0; i < lst_Partdetails1.Count(); i++)
                                            {
                                                Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(lst_Partdetails1[i].stock_typeid);
                                                if (mastStockType != null)
                                                {
                                                    if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                    {
                                                        V_PartInventoryStockDetails VPartStockDetails = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(lst_Partdetails1[i].PART_STOCK_DETAIL_ID);
                                                        if (VPartStockDetails != null)
                                                        {
                                                            CommonFunction.setLog("Unable to select Part Number " + VPartStockDetails.PART_NUMBER + " serial : " + VPartStockDetails.SERIAL + " as Part Movement Control is not set to move.");
                                                            continue;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        lst_Partdetails.Add(lst_Partdetails1[i]);
                                                    }
                                                }
                                                else
                                                {
                                                    lst_Partdetails.Add(lst_Partdetails1[i]);
                                                }
                                            }


                                            lst_Partdetails = lst_Partdetails.OrderBy(x => x.DATE_IN).ToList();
                                            if (lst_Partdetails.Count() < _data.selected_qty)
                                            {
                                                throw new Exception("Selected Qty should not be greater than Qty to receive.");
                                            }

                                            lst_Partdetails = lst_Partdetails.Take(convert.ToInt(_data.selected_qty)).ToList();

                                            if (lst_Partdetails != null && lst_Partdetails.Count() > 0)
                                            {
                                                PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == lst_Partdetails[0].SalesPartId && x.PARTLOCATIONID == lst_Partdetails[0].PARTLOCATIONID && x.customerid == lst_Partdetails[0].customerid);
                                                if (lst_Partdetails.Count() > 0)
                                                {
                                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                                    executionStrategy.Execute(() =>
                                                    {
                                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                                        {
                                                            try
                                                            {
                                                                foreach (PartInventoryStockDetails PartStockDetails in lst_Partdetails)
                                                                {
                                                                    V_PartInventoryStockDetails v_part_inventory_stock_details = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Find(PartStockDetails.PART_STOCK_DETAIL_ID);
                                                                    Mast_STOCK_TYPE mastStockType = _dbContext.Mast_STOCK_TYPE.Find(PartStockDetails.stock_typeid);
                                                                    if (mastStockType != null)
                                                                    {
                                                                        if (convert.ToInt(mastStockType.Part_Movement_Control) == 0)
                                                                        {
                                                                            throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " as Part Movement Control is not set to move.");
                                                                        }
                                                                        else
                                                                        {
                                                                            PartStockDetails.qty_intransit_to_location = 2;
                                                                            PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        //throw new Exception("Unable to select Part Number " + v_part_inventory_stock_details.PART_NUMBER + " serial : " + v_part_inventory_stock_details.SERIAL + " Location Code : " + v_part_inventory_stock_details.PARTLOCATION_CODE + " Customer Name : " + v_part_inventory_stock_details.customer_name + " as part stock type is not selected.");
                                                                        PartStockDetails.qty_intransit_to_location = 2;
                                                                        PartStockDetails.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(PartStockDetails);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                }
                                                                if (PartStock != null)
                                                                {
                                                                    List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.locationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null && x.OrderId == _data.Orderid*/).ToList();
                                                                    double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                    if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                    {
                                                                        PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                        PartStock.UPDATED_DATE = DateTime.Now;
                                                                        _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                        _dbContext.SaveChanges();
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Part Inventory Stock [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "'");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Unable to get Part Inventory Stock for Part no. : " + vParts.part_number);
                                                                }
                                                                dbContextTransaction.Commit();
                                                                CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Selected Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " For PUTWAY.");
                                                                CommonFunction.SetAudit("Single_Step_Select_Set_Parts_By_Customer_Putaway", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Selected Part Stock Details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + " For PUTWAY.", "");

                                                                return Ok(true);
                                                            }
                                                            catch (Exception ex)
                                                            {
                                                                dbContextTransaction.Rollback();
                                                                throw ex;
                                                            }
                                                        }
                                                    });
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get selected Part inventory stock.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get selected Part inventory stock.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to select Part inventory stock details.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get part details");
                                    }

                                }
                                else
                                {
                                    throw new Exception("Unable to get Location details");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Single_Step_Select_Set_Parts_By_Customer_Putaway  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Single_Step_Select_Set_Parts_By_Customer_Putaway", "Error", "", "Error Single_Step_Select_Set_Parts_By_Customer_Putaway - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Single_Step_Select_Set_Parts_By_Customer_Putaway stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Single_Step_Save_Inbulk_PartStockDetails")]
        public IActionResult Single_Step_Save_Inbulk_PartStockDetails(Single_Step_Save_Inbulk_Details _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            bool result = false;
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                List<selectedItemData> _sitem = new List<selectedItemData>();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Single_Step_Save_Inbulk_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Check_Set_Parts_From_Location");
                                var SiteId = GetLinkedSites(_UserData);

                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<int> LstSiteIds = LstSites.Select(x => x.SiteId).ToList();
                                INTERNAL_ORDERS _internalOrder = _dbContext.INTERNAL_ORDERS.Find(_data.orderid);
                                var sParts = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                vParts = _dbContext.V_SALES_PART.FirstOrDefault(x => x.salespartid == _data.salespartid);

                                var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                executionStrategy.Execute(() =>
                                {
                                    using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                    {
                                        try
                                        {
                                            if (_data.orderid != null && _data.salespartid != null && _data.partlocationid != null)
                                            {

                                                if (_internalOrder != null)
                                                {
                                                    if (sParts != null)
                                                    {
                                                        bool receive_with_serials = false, receive_with_expiry_date = false, receive_with_lots = false;
                                                        if (convert.ToInt(sParts.receive_with_serials) == 1)
                                                        {
                                                            receive_with_serials = true;
                                                        }
                                                        if (convert.ToInt(sParts.expiry_date_required) == 1)
                                                        {
                                                            receive_with_expiry_date = true;
                                                        }
                                                        if (convert.ToInt(sParts.receive_with_lots) == 1)
                                                        {
                                                            receive_with_lots = true;
                                                        }
                                                        PartInventoryStock PartStock = _dbContext.PART_INVENTORY_STOCK.FirstOrDefault(x => x.SalesPartId == _data.salespartid && x.PARTLOCATIONID == _data.partlocationid && x.customerid == _internalOrder.CUSTOMERID);
                                                        List<PartInventoryStockDetails> lstDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == sParts.salespartid && x.qty_intransit_to_location == null && x.shipmentid == null && x.CustomerOrderId == null && x.shipmentlineid == null && x.SERIAL == null && x.stock_typeid == null && x.customerid == _internalOrder.CUSTOMERID && x.OrderId == _internalOrder.INTERNALORDERID && x.receive_with_bulk == 1).ToList();

                                                        lstDetails = lstDetails.OrderByDescending(x => x.DATE_IN).ToList();
                                                        if (lstDetails.Count() > 0)
                                                        {
                                                            selectedItemData _itemMoveData = new selectedItemData();
                                                            if (sParts.receive_with_serials == 1)
                                                            {
                                                                string SerialNum = "";
                                                                if (_data.serial != "")
                                                                {
                                                                    if (_data.serial.Contains("*"))
                                                                    {
                                                                        SerialNum = _data.serial.Split('*')[1].ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        SerialNum = _data.serial;
                                                                    }
                                                                    if (SerialNum != "")
                                                                    {
                                                                        PartInventoryStockDetails _stockdetail = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(a => a.SERIAL.ToUpper() == SerialNum.ToUpper() && a.SalesPartId == sParts.salespartid && a.customerid == _internalOrder.CUSTOMERID).FirstOrDefault();
                                                                        if (_stockdetail != null && convert.ToString(_stockdetail.SERIAL) != "") throw new Exception("Serial No. " + SerialNum.ToUpper() + " is already in use.");

                                                                        PartInventoryStockDetails _partStockDetails = lstDetails.Take(1).FirstOrDefault();
                                                                        PartInventoryStockDetails _partStockDetailsExt = _partStockDetails;
                                                                        if (_partStockDetails != null)
                                                                        {
                                                                            _partStockDetails.SERIAL = _data.serial;
                                                                            if (receive_with_expiry_date)
                                                                            {
                                                                                if (convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy") == DateTime.MinValue)
                                                                                {
                                                                                    throw new Exception("Unable to get expiry date");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.EXPIRY_DATE = convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.EXPIRY_DATE = null;
                                                                            }

                                                                            if (receive_with_lots)
                                                                            {
                                                                                if (convert.ToString(_data.batch).Trim() == "")
                                                                                {
                                                                                    throw new Exception("Unable to get Lot/Batch details");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.BATCH = convert.ToString(_data.batch).Trim();
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.BATCH = null;
                                                                            }

                                                                            _partStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            if (convert.ToString(_data.marking) == "")
                                                                            {
                                                                                _partStockDetails.marking = "";
                                                                                // throw new Exception("Unable to get Marking details");
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.marking = convert.ToString(_data.marking).Trim();
                                                                            }
                                                                            if (convert.ToInt(_data.stocktypeid) == 0)
                                                                            {
                                                                                throw new Exception("Unable to get PartStockType");
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.stock_typeid = convert.ToInt(_data.stocktypeid);
                                                                            }
                                                                            _partStockDetails.qty_intransit_to_location = 2;
                                                                            if (convert.ToInt(_partStockDetails.grn_exported) != 2)
                                                                            {
                                                                                _partStockDetails.grn_exported = 1;
                                                                            }
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_partStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                            _itemMoveData.serial = _partStockDetails.SERIAL;
                                                                            _itemMoveData.salespartid = _partStockDetails.SalesPartId;
                                                                            _itemMoveData.partstockid = PartStock.PARTSTOCKID;
                                                                            _itemMoveData.stocktypeid = _partStockDetails.stock_typeid;
                                                                            _itemMoveData.customerid = _partStockDetails.customerid;
                                                                            _itemMoveData.selected_qty = 1;
                                                                            _itemMoveData.partlocationid = _partStockDetails.PARTLOCATIONID;
                                                                            _sitem.Add(_itemMoveData);
                                                                        }
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /*&& x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("Unable to get serial number.");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Invalid serial number.");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                // Non serial part stock details
                                                                if (lstDetails.Count() >= _data.selected_qty)
                                                                {
                                                                    List<PartInventoryStockDetails> _lstpartStockDetails = lstDetails.Take(convert.ToInt(_data.selected_qty)).ToList();
                                                                    for (int i = 0; i < _lstpartStockDetails.Count(); i++)
                                                                    {
                                                                        PartInventoryStockDetails _partStockDetails = _lstpartStockDetails[i];
                                                                        if (_partStockDetails != null)
                                                                        {
                                                                            _partStockDetails.SERIAL = null;
                                                                            if (receive_with_expiry_date)
                                                                            {
                                                                                if (convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy") == DateTime.MinValue)
                                                                                {
                                                                                    throw new Exception("Unable to get expiry date");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.EXPIRY_DATE = convert.ToDateTime(_data.expiry_date, "dd/MM/yyyy");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.EXPIRY_DATE = null;
                                                                            }

                                                                            if (receive_with_lots)
                                                                            {
                                                                                if (convert.ToString(_data.batch).Trim() == "")
                                                                                {
                                                                                    throw new Exception("Unable to get Lot/Batch details");
                                                                                }
                                                                                else
                                                                                {
                                                                                    _partStockDetails.BATCH = convert.ToString(_data.batch).Trim();
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.BATCH = null;
                                                                            }

                                                                            _partStockDetails.UPDATED_DATE = DateTime.Now;
                                                                            if (convert.ToString(_data.marking) == "")
                                                                            {
                                                                                _partStockDetails.marking = "";
                                                                                //throw new Exception("Unable to get Marking details");
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.marking = convert.ToString(_data.marking).Trim();
                                                                            }
                                                                            if (convert.ToInt(_data.stocktypeid) == 0)
                                                                            {
                                                                                throw new Exception("Unable to get PartStockType");
                                                                            }
                                                                            else
                                                                            {
                                                                                _partStockDetails.stock_typeid = convert.ToInt(_data.stocktypeid);
                                                                            }
                                                                            _partStockDetails.qty_intransit_to_location = 2;
                                                                            if (convert.ToInt(_partStockDetails.grn_exported) != 2)
                                                                            {
                                                                                _partStockDetails.grn_exported = 1;
                                                                            }
                                                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(_partStockDetails);
                                                                            _dbContext.SaveChanges();
                                                                            _itemMoveData.serial = _partStockDetails.SERIAL;
                                                                            _itemMoveData.salespartid = _partStockDetails.SalesPartId;
                                                                            _itemMoveData.partstockid = PartStock.PARTSTOCKID;
                                                                            _itemMoveData.stocktypeid = _partStockDetails.stock_typeid;
                                                                            _itemMoveData.customerid = _partStockDetails.customerid;
                                                                            _itemMoveData.selected_qty = 1;
                                                                            _itemMoveData.partlocationid = _partStockDetails.PARTLOCATIONID;
                                                                            _sitem.Add(_itemMoveData);
                                                                        }
                                                                        if (PartStock != null)
                                                                        {
                                                                            List<PartInventoryStockDetails> selectedPartStock = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => LstSiteIds.Contains((int)x.SITEID) && x.PARTLOCATIONID == _data.partlocationid && x.SalesPartId == vParts.salespartid && x.qty_intransit_to_location >= 1 && x.customerid == PartStock.customerid && x.DATE_OUT == null /* && x.shipmentid == null && x.shipmentlineid == null*/).ToList();
                                                                            double selectedSumQty = convert.ToFloat(selectedPartStock.Sum(x => x.QUANTITY));
                                                                            if (convert.ToFloat(PartStock.QTY_IN_HAND) >= selectedSumQty)
                                                                            {
                                                                                PartStock.QTY_INTRANSIT = selectedSumQty;
                                                                                PartStock.UPDATED_DATE = DateTime.Now;
                                                                                _dbContext.PART_INVENTORY_STOCK.Update(PartStock);
                                                                                _dbContext.SaveChanges();
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("Part Stock Inventory [ID:" + PartStock.PARTSTOCKID + "] quantity in hand '" + convert.ToFloat(PartStock.QTY_IN_HAND) + "' cannot be less than quantity Intransit '" + selectedSumQty + "' ");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("Unable to get Part Stock Inventory for Part : " + vParts.part_number);
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("Selected quantity should be less than Total avalable quantity.");
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("Unable to get Part stock details for Order No : " + _internalOrder.INTERNAL_ORDER_NO + ".");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Unable to get Sales Part info for Order No : " + _internalOrder.INTERNAL_ORDER_NO + ".");
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Order details.");
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to process Invalid Info.");
                                            }
                                            if (convert.ToInt(_data.finalpartlocationid) > 0)
                                            {
                                                if (!Single_Step_MovePartsToLocation(_data.UserId, _data.partlocationid, _data.finalpartlocationid, _sitem))
                                                {
                                                    throw new Exception("Unable to move items");
                                                }
                                            }
                                            dbContextTransaction.Commit();
                                            CommonFunction.setLog("User : " + _UserData.EX_USERNAME + " have Updated InBulk Part Stock for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + ".");
                                            CommonFunction.SetAudit("Save_Inbulk_PartStockDetails", "Updated", "", "User : " + _UserData.EX_USERNAME + " have Updated InBulk Part Stock for Order No : " + _internalOrder.INTERNAL_ORDER_NO + " and Part No : " + vParts.part_number + ".", "");

                                            result = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            dbContextTransaction.Rollback();
                                            throw ex;
                                        }
                                    }
                                });
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to process Invalid data.");
                }
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Single_Step_Save_Inbulk_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Single_Step_Save_Inbulk_PartStockDetails", "Error", "", "Error Single_Step_Save_Inbulk_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Single_Step_Save_Inbulk_PartStockDetails stopped successfully.");
            }

        }

        [HttpPost]
        [Route("Single_Step_Move_PartStockDetails")]
        public IActionResult Single_Step_Move_PartStockDetails(Single_Step_Move_Details _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            bool result = false;
            try
            {
                string partNum = "", serialNum = "";
                v_salesparts vParts = null;
                V_PartInventoryStockDetails v_part_inventory_stock_details = null;
                List<V_PartInventoryStockDetails> lstPartStockDetails = new List<V_PartInventoryStockDetails>();
                List<selectedItemData> _sitem = new List<selectedItemData>();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Single_Step_Move_PartStockDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {

                    }
                }
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Single_Step_Move_PartStockDetails  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Single_Step_Move_PartStockDetails", "Error", "", "Error Single_Step_Save_Inbulk_PartStockDetails - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Single_Step_Move_PartStockDetails stopped successfully.");
            }
        }
        private bool Single_Step_MovePartsToLocation(int userid, int? fromLocationid, int? toLocationid, List<selectedItemData> _sitem)
        {
            bool result = false;
            try
            {
                int Update = 0;
                List<MAST_SALES_PARTS_LOCATION> lstArrivalLocation = get_ArrivalLocation(convert.ToInt(userid));
                List<int> lstArrivalLocationIds = lstArrivalLocation.Select(x => x.PARTLOCATIONID).ToList();
                List<salesparts> _lstpartDataMoved = new List<salesparts>();
                if (_sitem.Count() > 0)
                {
                    for (int i = 0; i < _sitem.Count(); i++)
                    {
                        selectedItemData _itemData = _sitem[i];
                        if (_itemData != null)
                        {
                            salesparts _partData = _dbContext.SALES_PARTS.Find(_itemData.salespartid);
                            if (_partData != null)
                            {
                                _lstpartDataMoved.Add(_partData);
                                List<PartInventoryStockDetails> lstPartInventoryData = new List<PartInventoryStockDetails>();
                                if (_itemData.serial != "")
                                {
                                    lstPartInventoryData = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == _partData.salespartid && x.customerid == _itemData.customerid && x.PARTLOCATIONID == fromLocationid && x.qty_intransit_to_location >= 1 && x.SERIAL == _itemData.serial).ToList();
                                }
                                else
                                {
                                    lstPartInventoryData = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => x.SalesPartId == _partData.salespartid && x.customerid == _itemData.customerid && x.PARTLOCATIONID == fromLocationid && x.qty_intransit_to_location >= 1 && x.stock_typeid == _itemData.stocktypeid).ToList();
                                }
                                if (lstPartInventoryData.Count() > 0)
                                {
                                    if (convert.ToFloat(_itemData.selected_qty) <= lstPartInventoryData.Count())
                                    {
                                        lstPartInventoryData = lstPartInventoryData.OrderBy(x => x.DATE_IN).ToList();
                                        for (int j = 0; j < _itemData.selected_qty; j++)
                                        {
                                            PartInventoryStockDetails ItemDataLocationData = lstPartInventoryData[j];
                                            PartInventoryStockDetails ItemData = lstPartInventoryData[j];
                                            if (lstArrivalLocationIds.Contains(convert.ToInt(ItemDataLocationData.PARTLOCATIONID)))
                                            {
                                                if (ItemDataLocationData.receive_with_bulk == 1)
                                                {
                                                    if (convert.ToInt(ItemData.grn_exported) != 2)
                                                    {
                                                        ItemData.grn_exported = 1;     // Grn exported = 1 for From Location as Arrival location if its In Bulk
                                                    }
                                                    else
                                                    {
                                                        // already grn_exported exported
                                                        if (convert.ToInt(ItemData.move_exported) != 2)
                                                        {
                                                            ItemData.move_exported = 1;     // Move exported = 1 for From Location as Arrival location if its not In Bulk
                                                        }
                                                        else
                                                        {
                                                            // already move_exported exported
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (convert.ToInt(ItemData.move_exported) != 2)
                                                    {
                                                        ItemData.move_exported = 1;     // Move exported = 1 for From Location as Arrival location if its not In Bulk
                                                    }
                                                    else
                                                    {
                                                        // already move_exported exported
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (convert.ToInt(ItemData.move_exported) != 2)
                                                {
                                                    ItemData.move_exported = 1;     // Move exported = 1 for From Location as Main location 
                                                }
                                                else
                                                {
                                                    // already move_exported exported
                                                }
                                            }
                                            ItemData.PARTLOCATIONID = toLocationid;
                                            ItemData.qty_intransit_to_location = null;
                                            ItemData.UPDATED_DATE = DateTime.Now;
                                            _dbContext.PART_INVENTORY_STOCK_DETAILS.Update(ItemData);
                                            _dbContext.SaveChanges();
                                            UpdatePartStock(ItemData.SITEID, ItemData.SalesPartId, ItemData.customerid, ItemData.M3);
                                            Update++;
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Move quantity '" + lstPartInventoryData.Count() + "' cannot be greater than selected quantity '" + convert.ToFloat(_itemData.selected_qty) + "'.");
                                    }
                                }
                                else
                                {
                                    throw new Exception("Unable to get selected parts for part name " + _partData.partname + ".");
                                }
                            }
                            else
                            {
                                throw new Exception("Unable to get parts details.");
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get selected items.");
                        }
                    }
                    if (Update == _sitem.Count())
                    {
                        result = true;
                    }
                }
                else
                {
                    throw new Exception("No items found to Move.");
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return result;
        }

        #endregion

        #region Reject/Return Register

        [HttpPost]
        [Route("Get_All_Reject_Return_OrderNo")]
        public IActionResult Get_All_Reject_Return_OrderNo(int? Userid, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                All_OrderList _modal = new All_OrderList();

                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Get_All_Reject_Return_OrderNo");
                CommonFunction.Set_Client_Data_on_Log_Authentication("UserID:" + Userid, AUTHENTICATION_KEY);
                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    if (convert.ToInt(Userid) > 0)
                    {
                        SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == convert.ToInt(Userid));
                        if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                        {
                            return NotFound("Unable to get Userdata for Userid : " + convert.ToInt(Userid));
                        }
                        else
                        {
                            CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_All_Reject_Return_OrderNo");
                            var SiteId = GetLinkedSites(_UserData);
                            List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                            _modal.lst_All_Orders = _dbContext.DELIVERY_ORDERS.Where(x => (x.STATUSID == 24 || x.STATUSID == 29) && lstUserSite.Contains(x.SITEID.GetValueOrDefault())).Select(x => new Order_Number { id = x.DELIVERY_ORDER_ID, number = x.DELIVERY_ORDER_NO }).ToList();

                        }
                    }
                    else
                    {
                        throw new Exception("Unable to get User id");
                    }
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }

                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_All_Reject_Return_OrderNo  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_All_Reject_Return_OrderNo", "Error", "", "Error Get_All_Reject_Return_OrderNo - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_All_Reject_Return_OrderNo stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Return_Reject_Register_List")]
        public IActionResult Return_Reject_Register_List(Reject_Return_List_Data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Return_DeliveryOrder_List_Filter _modal = new Return_DeliveryOrder_List_Filter();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Return_Register_List");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);
                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Inbound List");

                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                _modal.Mast_Site = LstSites;

                                _modal.Customers = _dbContext.Customers.Where(x => x.Customer_Type.ToUpper() == "CUSTOMER").Select(x => new CustomersFilter
                                {
                                    Customer_ID = x.Customer_ID,
                                    Customer_Name = x.Customer_Code + " - " + x.Customer_Name
                                }).ToList();
                                List<V_DELIVERY_ORDERS> _lst_Return_DELIVERY_ORDERS = _dbContext.V_DELIVERY_ORDERS.Where(x => x.STATUSID == 24 || x.STATUSID == 29).ToList();
                                if (convert.ToString(_data.orderno).Trim() != "")
                                {
                                    _lst_Return_DELIVERY_ORDERS = _lst_Return_DELIVERY_ORDERS.Where(x => convert.ToString(x.DELIVERY_ORDER_NO).Trim() == convert.ToString(_data.orderno).Trim()).ToList();
                                }
                                List<int> _lstDeliveryOrderId = _lst_Return_DELIVERY_ORDERS.Select(x => x.DELIVERY_ORDER_ID).ToList();
                                List<int> _lstShipmentLineIds = _dbContext.V_DELIVERY_ORDER_SHIPMENTLINES.Where(x => _lstDeliveryOrderId.Contains(x.DELIVERY_ORDER_ID.GetValueOrDefault())).Select(x => x.ShipmentLineId).ToList();

                                IEnumerable<V_PartInventoryStockDetails> _lstPartDetials = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => (x.stock_statusid == 24 || x.stock_statusid == 29) && _lstShipmentLineIds.Contains(x.shipmentlineid.GetValueOrDefault())).ToList();
                                //IEnumerable<PARTSTOCKDETAIL_REMARKS> _lstremarks = _dbContext.PARTSTOCKDETAIL_REMARKS.Where(x => x.module_id == 1007).ToList();
                                //IEnumerable<V_PartInventoryStockDetails_With_Remarks> _lstPartDetialsRmks = from partDetials in _lstPartDetials
                                //                                                                            join partremarks in _lstremarks on partDetials.PART_STOCK_DETAIL_ID equals partremarks.partstockdetailid into gj
                                //                                                                            from subRemk in gj.DefaultIfEmpty()
                                //                                                                            select new V_PartInventoryStockDetails_With_Remarks
                                //                                                                            {
                                //                                                                                PART_STOCK_DETAIL_ID = partDetials.PART_STOCK_DETAIL_ID,
                                //                                                                                SalesPartId = partDetials.SalesPartId,
                                //                                                                                LOGTYPE = partDetials.LOGTYPE,
                                //                                                                                LOGDATE = partDetials.LOGDATE,
                                //                                                                                QUANTITY = partDetials.QUANTITY,
                                //                                                                                UOM = partDetials.UOM,
                                //                                                                                PART_NUMBER = partDetials.PART_NUMBER,
                                //                                                                                PARTNAME = partDetials.PARTNAME,
                                //                                                                                PARTLOCATIONID = partDetials.PARTLOCATIONID,
                                //                                                                                PARTLOCATION_CODE = partDetials.PARTLOCATION_CODE,
                                //                                                                                LOGPRICE = partDetials.LOGPRICE,
                                //                                                                                CURR_CODE = partDetials.CURR_CODE,
                                //                                                                                LOGNOTE = partDetials.LOGNOTE,
                                //                                                                                SITEID = partDetials.SITEID,
                                //                                                                                SITE_CODE = partDetials.SITE_CODE,
                                //                                                                                OrderId = partDetials.OrderId,
                                //                                                                                TRANS_TYPE = partDetials.TRANS_TYPE,
                                //                                                                                DATE_IN = partDetials.DATE_IN,
                                //                                                                                DATE_OUT = partDetials.DATE_OUT,
                                //                                                                                AGE_DAYS = partDetials.AGE_DAYS,
                                //                                                                                M3 = partDetials.M3,
                                //                                                                                SERIAL = partDetials.SERIAL,
                                //                                                                                BATCH = partDetials.BATCH,
                                //                                                                                EXPIRY_DATE = partDetials.EXPIRY_DATE,
                                //                                                                                Shipmentid = partDetials.Shipmentid,
                                //                                                                                internal_order_no = partDetials.internal_order_no,
                                //                                                                                shipmentno = partDetials.shipmentno,
                                //                                                                                order_date = partDetials.order_date,
                                //                                                                                RECEIVE_WITH_SERIALS = partDetials.RECEIVE_WITH_SERIALS,

                                //                                                                                RECEIVE_WITH_LOTS = partDetials.receive_with_lots,

                                //                                                                                EXPIRY_DATE_REQUIRED = partDetials.expiry_date_required,

                                //                                                                                PICKED_QTY = partDetials.PICKED_QTY,
                                //                                                                                shipmentlineid = partDetials.shipmentlineid,
                                //                                                                                internallineid = partDetials.internallineid,
                                //                                                                                customerid = partDetials.customerid,
                                //                                                                                customer_name = partDetials.customer_name,
                                //                                                                                EXPIRY_DAYS = partDetials.EXPIRY_DAYS,
                                //                                                                                marking = partDetials.marking,
                                //                                                                                stock_typeid = partDetials.stock_typeid,
                                //                                                                                stock_type = partDetials.stock_type,
                                //                                                                                partlocation_descr = partDetials.partlocation_descr,

                                //                                                                                part_supply_control = partDetials.part_supply_control,
                                //                                                                                part_auto_reservation_control = partDetials.part_auto_reservation_control,
                                //                                                                                part_manual_reservation_control = partDetials.part_manual_reservation_control,
                                //                                                                                part_order_issue_control = partDetials.part_order_issue_control,
                                //                                                                                part_nonorder_issue_control = partDetials.part_nonorder_issue_control,
                                //                                                                                part_counting_control = partDetials.part_counting_control,
                                //                                                                                validity = partDetials.validity,
                                //                                                                                part_scrap_control = partDetials.part_scrap_control,
                                //                                                                                qty_intransit_to_location = partDetials.qty_intransit_to_location,
                                //                                                                                status_text = partDetials.status_text,
                                //                                                                                stock_statusid = partDetials.stock_statusid,
                                //                                                                                stock_status_text = partDetials.stock_status_text,
                                //                                                                                remarks = subRemk != null ? (subRemk.remarks != null ? subRemk.remarks : "") : "",
                                //                                                                            };

                                if (_lstPartDetials.Count() > 0)
                                {
                                    if (convert.ToInt(_data.siteid) > 0)
                                    {
                                        _lstPartDetials = _lstPartDetials.Where(x => x.SITEID == _data.siteid).ToList();
                                    }
                                    if (convert.ToInt(_data.customerid) > 0)
                                    {
                                        _lstPartDetials = _lstPartDetials.Where(x => x.customerid == _data.customerid).ToList();
                                    }
                                    if (convert.ToInt(_data.salespartid) > 0)
                                    {
                                        _lstPartDetials = _lstPartDetials.Where(x => x.SalesPartId == _data.salespartid).ToList();
                                    }
                                    if (convert.ToString(_data.scannedpartnumber).Trim() != "")
                                    {
                                        List<V_PartInventoryStockDetails> barcodeIdntfy = new List<V_PartInventoryStockDetails>();
                                        barcodeIdntfy = _lstPartDetials.Where(x => convert.ToString(x.PART_NUMBER).Trim() == _data.scannedpartnumber.Trim()).ToList();
                                        if (barcodeIdntfy.Count() > 0)
                                        {
                                            if (convert.ToString(_data.scannedSerialNo).Trim() != "")
                                            {
                                                barcodeIdntfy = _lstPartDetials.Where(x => x.SERIAL == convert.ToString(_data.scannedSerialNo)).ToList();
                                            }
                                        }
                                        _lstPartDetials = barcodeIdntfy;
                                    }
                                    if (_lstPartDetials.Count() == 0)
                                    {
                                        _lst_Return_DELIVERY_ORDERS = _lst_Return_DELIVERY_ORDERS.Where(x => x.SHIPMENTID == 0).ToList();
                                    }
                                }
                                if (_lstPartDetials.Count() > 0)
                                {
                                    List<int> _lstShipmentId = _lstPartDetials.Select(x => x.Shipmentid.GetValueOrDefault()).Distinct().ToList();
                                    _lst_Return_DELIVERY_ORDERS = _lst_Return_DELIVERY_ORDERS.Where(x => _lstShipmentId.Contains(x.SHIPMENTID.GetValueOrDefault())).ToList();
                                }

                                List<Return_Reject_Order_WMS> _Lst_DO_Orders = _lst_Return_DELIVERY_ORDERS.Select(x => new Return_Reject_Order_WMS
                                {
                                    delivery_order_id = x.DELIVERY_ORDER_ID,
                                    delivery_order_no = x.DELIVERY_ORDER_NO,
                                    shipmentid = x.SHIPMENTID,
                                    tripid = x.TRIPID,
                                    tripdetailid = x.TRIPDETAILID,
                                    customerid = x.CUSTOMERID,
                                    siteid = x.SITEID,
                                    site_name = x.Site_Name,
                                    trip_plan_no = x.TRIP_PLAN_NO,
                                    statusid = x.STATUSID,
                                    status_desc = x.STATUS_DESC,
                                    delivery_date = x.DELIVERY_DATE,
                                    do_complete_date = x.do_complete_date,

                                }).ToList();
                                _modal.Return_Reject_Delivery_Orders = _Lst_DO_Orders;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Return_Register_List ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Return_Register_List", "Error", "", "Error on Return_Register_List ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Return_Register_List stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Return_Reject_Register_Items")]
        public IActionResult Return_Reject_Register_Items(Return_Reject_Register_Items_data _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                Return_Reject_Delivery_Items _modal = new Return_Reject_Delivery_Items();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Return_Reject_Register_Items");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {

                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (convert.ToInt(_data.delivery_order_id) == 0)
                            {
                                return NotFound("Unable to get Order Details : " + _data.delivery_order_id);
                            }
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Return_Reject_Register_Items for Order Details : " + _data.delivery_order_id);
                                List<V_DELIVERY_ORDER_SHIPMENTLINES_REJECT_RETURN_View> _lstReturnRejectItemList = new List<V_DELIVERY_ORDER_SHIPMENTLINES_REJECT_RETURN_View>();
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));

                                List<V_DELIVERY_ORDER_SHIPMENTLINES> _lstShipmentlines = _dbContext.V_DELIVERY_ORDER_SHIPMENTLINES.Where(x => x.tripdetailid == _data.tripdetailid && x.DELIVERY_ORDER_ID == _data.delivery_order_id).ToList();
                                List<int> lstshipmentLineId = _lstShipmentlines.Select(x => x.ShipmentLineId).ToList();
                                List<PartInventoryStockDetails> _lstPartStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => lstshipmentLineId.Contains(x.shipmentlineid.GetValueOrDefault())).ToList();
                                foreach (V_DELIVERY_ORDER_SHIPMENTLINES _shipmentline in _lstShipmentlines)
                                {
                                    V_DELIVERY_ORDER_SHIPMENTLINES_REJECT_RETURN_View _itemdata = new V_DELIVERY_ORDER_SHIPMENTLINES_REJECT_RETURN_View();
                                    _itemdata.ShipmentLineId = _shipmentline.ShipmentLineId;
                                    _itemdata.SalesPartId = _shipmentline.SalesPartId;
                                    _itemdata.ShipmentId = _shipmentline.ShipmentId;
                                    _itemdata.OrderId = _shipmentline.OrderId;
                                    _itemdata.CustOrderLineId = _shipmentline.CustOrderLineId;
                                    //_itemdata.Source_Ref1 = _shipmentline.Source_Ref1;
                                    //_itemdata.Source_Ref2 = _shipmentline.Source_Ref2;
                                    //_itemdata.Source_RefType = _shipmentline.Source_RefType;
                                    _itemdata.Source_PartNo = _shipmentline.Source_PartNo;
                                    _itemdata.Source_PartDescr = _shipmentline.Source_PartDescr;
                                    _itemdata.Connected_SourceQty = _shipmentline.Connected_SourceQty;
                                    _itemdata.Inventory_Qty = _shipmentline.Inventory_Qty;
                                    _itemdata.Reserved_Qty = _shipmentline.Reserved_Qty;
                                    _itemdata.Picked_Qty = _shipmentline.Picked_Qty;
                                    _itemdata.Delivered_Qty = _shipmentline.Delivered_Qty;
                                    //_itemdata.Planned_ship_date = _shipmentline.Planned_ship_date;
                                    //_itemdata.Created_Date = _shipmentline.Created_Date;
                                    //_itemdata.Updated_Date = _shipmentline.Updated_Date;
                                    _itemdata.Item_Status = _shipmentline.Item_Status;
                                    //_itemdata.Planned_Delivery_Date = _shipmentline.Planned_Delivery_Date;
                                    _itemdata.triplineid = _shipmentline.triplineid;
                                    _itemdata.tripid = _shipmentline.tripid;
                                    _itemdata.lineno = _shipmentline.lineno;
                                    _itemdata.qty = _shipmentline.qty;
                                    _itemdata.uom = _shipmentline.uom;
                                    _itemdata.Customer_Name = _shipmentline.Customer_Name;
                                    //_itemdata.End_Customer_Name = _shipmentline.End_Customer_Name;
                                    //_itemdata.Customer_Code = _shipmentline.Customer_Code;
                                    //_itemdata.End_Customer_Code = _shipmentline.End_Customer_Code;
                                    _itemdata.CUSTOMERID = _shipmentline.CUSTOMERID;
                                    _itemdata.END_CUSTOMERID = _shipmentline.END_CUSTOMERID;
                                    _itemdata.Vehicle_TonnageId = _shipmentline.Vehicle_TonnageId;
                                    _itemdata.Trailer_TypeId = _shipmentline.Trailer_TypeId;
                                    _itemdata.Vehicle_Tonnage = _shipmentline.Vehicle_Tonnage;
                                    _itemdata.Trailer_Type = _shipmentline.Trailer_Type;
                                    _itemdata.DELIVERY_ORDER_ID = _shipmentline.DELIVERY_ORDER_ID;

                                    _itemdata.reject_return_Qty = _lstPartStockDetails.Where(x => (x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _shipmentline.ShipmentLineId).Sum(x => x.QUANTITY);

                                    _itemdata.qty_to_register = convert.ToInt(_lstPartStockDetails.Where(x => (x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _shipmentline.ShipmentLineId).Sum(x => x.QUANTITY)) - convert.ToInt(_lstPartStockDetails.Where(x => (x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _shipmentline.ShipmentLineId).Sum(x => x.QUANTITY));
                                    _itemdata.registered_Qty = convert.ToInt(_lstPartStockDetails.Where(x => (x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _shipmentline.ShipmentLineId).Sum(x => x.QUANTITY));
                                    _itemdata.receive_with_serial = convert.ToInt(_dbContext.SALES_PARTS.Find(_shipmentline.SalesPartId).receive_with_serials);
                                    if (_itemdata.reject_return_Qty > _itemdata.qty_to_register)
                                    {
                                        PartInventoryStockDetails _sData = _lstPartStockDetails.Where(x => x.stock_statusid == 32 || x.stock_statusid == 33).FirstOrDefault();
                                        if (_sData != null)
                                        {
                                            _itemdata.curr_partStock_statusId = _sData.stock_statusid;
                                        }
                                    }
                                    else
                                    {
                                        PartInventoryStockDetails _sData = _lstPartStockDetails.Where(x => x.stock_statusid == 24 || x.stock_statusid == 29).FirstOrDefault();
                                        if (_sData != null)
                                        {
                                            _itemdata.curr_partStock_statusId = _sData.stock_statusid;
                                        }
                                    }
                                    if (_itemdata.reject_return_Qty > 0)
                                    {
                                        if (_data.scannedpartnumber != "")
                                        {
                                            if (_data.scannedpartnumber == _itemdata.Source_PartNo)
                                            {
                                                if (_data.scannedSerialNo != "")
                                                {
                                                    if (_lstPartStockDetails.Where(x => (x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _shipmentline.ShipmentLineId && x.SERIAL == _data.scannedSerialNo).ToList().Count() > 0)
                                                    {
                                                        _lstReturnRejectItemList.Add(_itemdata);
                                                    }
                                                }
                                                else
                                                {
                                                    _lstReturnRejectItemList.Add(_itemdata);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            _lstReturnRejectItemList.Add(_itemdata);
                                        }
                                    }
                                }
                                _modal.Delivery_Items_Lines = _lstReturnRejectItemList;
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Return_Reject_Register_Items ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Return_Reject_Register_Items", "Error", "", "Error on Return_Reject_Register_Items ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Return_Reject_Register_Items stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_Return_Reject_RegisterDetails")]
        public IActionResult Get_Return_Reject_RegisterDetails(Return_Reject_Register_Items_List _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                modal_Reject_Retuen_Items _modal = new modal_Reject_Retuen_Items();
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Get_Return_Reject_RegisterDetails");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.userid) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);
                            if (convert.ToInt(_data.delivery_order_id) == 0)
                            {
                                return NotFound("Unable to get Order Details : " + _data.delivery_order_id);
                            }
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Return_Reject_RegisterDetails for Order Details : " + _data.delivery_order_id);
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                                List<MAST_SALES_PARTS_LOCATION> lstLoaction = new List<MAST_SALES_PARTS_LOCATION>();

                                foreach (Mast_Site _site in LstSites)
                                {
                                    Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                                    if (siteConfig != null)
                                    {
                                        MAST_SALES_PARTS_LOCATION _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                                        if (_arrivalLocation != null)
                                        {
                                            lstLoaction.Add(_arrivalLocation);
                                        }
                                    }
                                }
                                List<int> lstArrivalLocationID = lstLoaction.Select(x => x.PARTLOCATIONID).ToList();
                                List<ALL_LOCATION> _lstArrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstArrivalLocationID.Contains(x.PARTLOCATIONID) == true).Select(x => new ALL_LOCATION { PARTLOCATIONID = x.PARTLOCATIONID, PARTLOCATION_CODE = x.PARTLOCATION_CODE, PARTLOCATION_DESCR = x.PARTLOCATION_DESCR, is_arrival_location = 1 }).ToList();
                                List<ALL_LOCATION> _lstMainlLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Where(x => lstArrivalLocationID.Contains(x.PARTLOCATIONID) == false).Select(x => new ALL_LOCATION { PARTLOCATIONID = x.PARTLOCATIONID, PARTLOCATION_CODE = x.PARTLOCATION_CODE, PARTLOCATION_DESCR = x.PARTLOCATION_DESCR, is_arrival_location = 0 }).ToList();
                                List<ALL_LOCATION> _lstAlllLocation = _lstArrivalLocation.Concat(_lstMainlLocation).ToList();
                                _modal.lst_All_Location = _lstAlllLocation;

                                _modal.stock_quality_list = _dbContext.Mast_STOCK_TYPE.Select(x => new Stock_Quality { STOCK_TYPEID = x.STOCK_TYPEID, STOCK_TYPE_DESCRIPTION = x.STOCK_TYPE_DESCRIPTION }).ToList();

                                salesparts _salesPartdata = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                if (_salesPartdata.receive_with_serials == 1)
                                {
                                    IEnumerable<V_PartInventoryStockDetails> _lstPartDetials = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => (x.stock_statusid == 33 || x.stock_statusid == 32) && x.shipmentlineid.GetValueOrDefault() == _data.shipmentlineid).ToList();
                                    IEnumerable<PARTSTOCKDETAIL_REMARKS> _lstremarks = _dbContext.PARTSTOCKDETAIL_REMARKS.Where(x => x.module_id == 1007).ToList();
                                    IEnumerable<Reject_Return_Items_With_Remarks> _lstPartDetialsRmks = from partDetials in _lstPartDetials
                                                                                                        join partremarks in _lstremarks on partDetials.PART_STOCK_DETAIL_ID equals partremarks.partstockdetailid into gj
                                                                                                        from subRemk in gj.DefaultIfEmpty()
                                                                                                        select new Reject_Return_Items_With_Remarks
                                                                                                        {
                                                                                                            part_stock_detail_id = partDetials.PART_STOCK_DETAIL_ID,
                                                                                                            salespartid = partDetials.SalesPartId,
                                                                                                            quantity = partDetials.QUANTITY,
                                                                                                            uom = partDetials.UOM,
                                                                                                            part_number = partDetials.PART_NUMBER,
                                                                                                            partname = partDetials.PARTNAME,
                                                                                                            partlocationid = partDetials.PARTLOCATIONID,
                                                                                                            partlocation_code = partDetials.PARTLOCATION_CODE,
                                                                                                            curr_code = partDetials.CURR_CODE,
                                                                                                            siteid = partDetials.SITEID,
                                                                                                            site_code = partDetials.SITE_CODE,
                                                                                                            orderid = partDetials.OrderId,
                                                                                                            serial = partDetials.SERIAL,
                                                                                                            shipmentid = partDetials.Shipmentid,
                                                                                                            shipmentno = partDetials.shipmentno,
                                                                                                            receive_with_serials = partDetials.RECEIVE_WITH_SERIALS,
                                                                                                            picked_qty = partDetials.PICKED_QTY,
                                                                                                            shipmentlineid = partDetials.shipmentlineid,
                                                                                                            internallineid = partDetials.internallineid,
                                                                                                            customerid = partDetials.customerid,
                                                                                                            customer_name = partDetials.customer_name,
                                                                                                            expiry_days = partDetials.EXPIRY_DAYS,
                                                                                                            marking = partDetials.marking,
                                                                                                            stock_typeid = partDetials.stock_typeid,
                                                                                                            stock_type = partDetials.stock_type,
                                                                                                            partlocation_descr = partDetials.partlocation_descr,
                                                                                                            status_text = partDetials.status_text,
                                                                                                            stock_statusid = partDetials.stock_statusid,
                                                                                                            stock_status_text = partDetials.stock_status_text,
                                                                                                            remarks = subRemk != null ? (subRemk.remarks != null ? subRemk.remarks : "") : "",
                                                                                                            reject_qty = 1,
                                                                                                        };
                                    _modal.lst_Reject_Return_Items_With_Remarks = _lstPartDetialsRmks.ToList();
                                }
                                else
                                {
                                    IEnumerable<V_PartInventoryStockDetails> _lstPartDetials = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(x => (x.stock_statusid == 33 || x.stock_statusid == 32) && x.shipmentlineid.GetValueOrDefault() == _data.shipmentlineid).ToList();
                                    IEnumerable<PARTSTOCKDETAIL_REMARKS> _lstremarks = _dbContext.PARTSTOCKDETAIL_REMARKS.Where(x => x.module_id == 1007).ToList();
                                    IEnumerable<Reject_Return_Items_With_Remarks> _lstPartDetialsRmks = from partDetials in _lstPartDetials
                                                                                                        join partremarks in _lstremarks on partDetials.PART_STOCK_DETAIL_ID equals partremarks.partstockdetailid into gj
                                                                                                        from subRemk in gj.DefaultIfEmpty()
                                                                                                        select new Reject_Return_Items_With_Remarks
                                                                                                        {
                                                                                                            part_stock_detail_id = partDetials.PART_STOCK_DETAIL_ID,
                                                                                                            salespartid = partDetials.SalesPartId,
                                                                                                            quantity = partDetials.QUANTITY,
                                                                                                            uom = partDetials.UOM,
                                                                                                            part_number = partDetials.PART_NUMBER,
                                                                                                            partname = partDetials.PARTNAME,
                                                                                                            partlocationid = partDetials.PARTLOCATIONID,
                                                                                                            partlocation_code = partDetials.PARTLOCATION_CODE,
                                                                                                            curr_code = partDetials.CURR_CODE,
                                                                                                            siteid = partDetials.SITEID,
                                                                                                            site_code = partDetials.SITE_CODE,
                                                                                                            orderid = partDetials.OrderId,
                                                                                                            serial = partDetials.SERIAL,
                                                                                                            shipmentid = partDetials.Shipmentid,
                                                                                                            shipmentno = partDetials.shipmentno,
                                                                                                            receive_with_serials = partDetials.RECEIVE_WITH_SERIALS,
                                                                                                            picked_qty = partDetials.PICKED_QTY,
                                                                                                            shipmentlineid = partDetials.shipmentlineid,
                                                                                                            internallineid = partDetials.internallineid,
                                                                                                            customerid = partDetials.customerid,
                                                                                                            customer_name = partDetials.customer_name,
                                                                                                            expiry_days = partDetials.EXPIRY_DAYS,
                                                                                                            marking = partDetials.marking,
                                                                                                            stock_typeid = partDetials.stock_typeid,
                                                                                                            stock_type = partDetials.stock_type,
                                                                                                            partlocation_descr = partDetials.partlocation_descr,
                                                                                                            status_text = partDetials.status_text,
                                                                                                            stock_statusid = partDetials.stock_statusid,
                                                                                                            stock_status_text = partDetials.stock_status_text,
                                                                                                            remarks = subRemk != null ? (subRemk.remarks != null ? subRemk.remarks : "") : "",
                                                                                                            reject_qty = 1,
                                                                                                        };
                                    if (_lstPartDetialsRmks.Count() > 0)
                                    {
                                        Reject_Return_Items_With_Remarks _NonserialReturnitemdata = _lstPartDetialsRmks.First();
                                        _NonserialReturnitemdata.reject_qty = _lstPartDetialsRmks.Sum(x => x.reject_qty);
                                        List<Reject_Return_Items_With_Remarks> _itemData = new List<Reject_Return_Items_With_Remarks>();
                                        _itemData.Add(_NonserialReturnitemdata);
                                        _modal.lst_Reject_Return_Items_With_Remarks = _itemData;
                                    }
                                }

                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get data");
                }
                return Ok(_modal);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_Return_Reject_RegisterDetails ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_Return_Reject_RegisterDetails", "Error", "", "Error on Get_Return_Reject_RegisterDetails ERROR : " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_Return_Reject_RegisterDetails stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Select_PartStockDetails_for_Return_Reject_Register")]
        public IActionResult Select_PartStockDetails_for_Return_Reject_Register(Select_Items_Data_For_Return_Reject_Register _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Select_PartStockDetails_for_Return_Reject_Register");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nShipmentSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Select_PartStockDetails_for_Return_Reject_Register");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                DELIVERY_ORDERS _orders = _dbContext.DELIVERY_ORDERS.Find(_data.delivery_order_id);
                                V_SHIPMENT_LINES spLine = _dbContext.V_Shipment_Lines.Find(_data.shipmentlineid);
                                CustomerOrders _custOrder = _dbContext.Customer_Orders.Find(spLine.OrderId);
                                V_SHIPMENT _shipmentObj = _dbContext.V_Shipment.Find(spLine.ShipmentId);
                                salesparts PartDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);
                                if (_shipmentObj != null)
                                {
                                    nShipmentSiteId = _shipmentObj.SiteId.Value;
                                }
                                if (PartDetails.receive_with_serials == 1)
                                {
                                    if (_data.scannedserialno != "")
                                    {
                                        string serialNum = _data.scannedserialno;
                                        if (serialNum != "")
                                        {
                                            List<V_PartInventoryStockDetails> StockdetailSerial = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.customerid == _custOrder.CustomerId && a.shipmentlineid == convert.ToInt(_data.shipmentlineid) && (a.stock_statusid == 24 || a.stock_statusid == 29 || a.stock_statusid == 32 || a.stock_statusid == 33)).ToList();
                                            if (StockdetailSerial != null)
                                            {
                                                IEnumerable<V_PartInventoryStockDetails> _InvStkObj = StockdetailSerial.Where(x => x.SERIAL == _data.scannedserialno).ToList();
                                                if (_InvStkObj.Count() > 0)
                                                {
                                                    IEnumerable<V_PartInventoryStockDetails> _InvStkObj1 = _InvStkObj.Where(x => x.stock_statusid == 24 || x.stock_statusid == 29).ToList();
                                                    if (_InvStkObj1.Count() > 0)
                                                    {
                                                        IEnumerable<PARTSTOCKDETAIL_REMARKS> _lstremarks = _dbContext.PARTSTOCKDETAIL_REMARKS.Where(x => x.module_id == 1007).ToList();
                                                        IEnumerable<Return_Register_Inventory_Serial> _lstPartDetialsRmks = from partDetials in _InvStkObj1
                                                                                                                            join partremarks in _lstremarks on partDetials.PART_STOCK_DETAIL_ID equals partremarks.partstockdetailid into gj
                                                                                                                            from subRemk in gj.DefaultIfEmpty()
                                                                                                                            select new Return_Register_Inventory_Serial
                                                                                                                            {
                                                                                                                                part_stock_detail_id = partDetials.PART_STOCK_DETAIL_ID,
                                                                                                                                salespartid = partDetials.SalesPartId,
                                                                                                                                serial = partDetials.SERIAL,
                                                                                                                                uom = partDetials.UOM,
                                                                                                                                part_number = partDetials.PART_NUMBER,
                                                                                                                                partname = partDetials.PARTNAME,
                                                                                                                                partlocationid = partDetials.PARTLOCATIONID,
                                                                                                                                partlocation_code = partDetials.PARTLOCATION_CODE,
                                                                                                                                shipmentlineid = partDetials.shipmentlineid,
                                                                                                                                customerid = partDetials.customerid,
                                                                                                                                customer_name = partDetials.customer_name,
                                                                                                                                stock_typeid = partDetials.stock_typeid,
                                                                                                                                stock_type = partDetials.stock_type,
                                                                                                                                partlocation_descr = partDetials.partlocation_descr,
                                                                                                                                stock_status_text = partDetials.stock_status_text,
                                                                                                                                remarks = subRemk != null ? (subRemk.remarks != null ? subRemk.remarks : "") : "",
                                                                                                                                reject_qty = StockdetailSerial.Where(x => x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 33 || x.stock_statusid == 32).Sum(x => x.QUANTITY),
                                                                                                                                reserved_qty = StockdetailSerial.Where(x => x.stock_statusid == 33 || x.stock_statusid == 32).Sum(x => x.QUANTITY),
                                                                                                                            };



                                                        _dataReturn = _lstPartDetialsRmks.FirstOrDefault();
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Part already been registered.");
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("Unable to get Part Details for Serial Number : " + serialNum);
                                                }
                                            }
                                            else
                                            {
                                                throw new Exception("Unable to get part stock details for Part number '" + _data.scannedpartno + "' and Serial number '" + _data.scannedserialno + "'.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("Unable to get serial number for scanned Part number '" + _data.scannedpartno + "' and Serial number '" + _data.scannedserialno + "'.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Part number '" + _data.scannedpartno + "' require a serial number.");
                                    }
                                }
                                else
                                {
                                    IEnumerable<V_PartInventoryStockDetails> _InvStkObj = null;
                                    _InvStkObj = _dbContext.V_PART_INVENTORY_STOCK_DETAILS.Where(a => a.SITEID == nShipmentSiteId && a.SalesPartId == convert.ToInt(_data.salespartid) && a.customerid == _custOrder.CustomerId && a.shipmentlineid == convert.ToInt(_data.shipmentlineid) && (a.stock_statusid == 24 || a.stock_statusid == 29 || a.stock_statusid == 32 || a.stock_statusid == 33)).ToList();
                                    if (_InvStkObj.Count() > 0)
                                    {
                                        IEnumerable<V_PartInventoryStockDetails> _InvStkObj1 = _InvStkObj.Where(x => x.stock_statusid == 24 || x.stock_statusid == 29).ToList();
                                        if (_InvStkObj1.Count() > 0)
                                        {
                                            IEnumerable<PARTSTOCKDETAIL_REMARKS> _lstremarks = _dbContext.PARTSTOCKDETAIL_REMARKS.Where(x => x.module_id == 1007).ToList();
                                            IEnumerable<Return_Register_Inventory_NonSerial> _lstPartDetialsRmks = from partDetials in _InvStkObj1
                                                                                                                   join partremarks in _lstremarks on partDetials.PART_STOCK_DETAIL_ID equals partremarks.partstockdetailid into gj
                                                                                                                   from subRemk in gj.DefaultIfEmpty()
                                                                                                                   select new Return_Register_Inventory_NonSerial
                                                                                                                   {
                                                                                                                       salespartid = partDetials.SalesPartId,
                                                                                                                       uom = partDetials.UOM,
                                                                                                                       part_number = partDetials.PART_NUMBER,
                                                                                                                       partname = partDetials.PARTNAME,
                                                                                                                       partlocationid = partDetials.PARTLOCATIONID,
                                                                                                                       partlocation_code = partDetials.PARTLOCATION_CODE,
                                                                                                                       shipmentlineid = partDetials.shipmentlineid,
                                                                                                                       customerid = partDetials.customerid,
                                                                                                                       customer_name = partDetials.customer_name,
                                                                                                                       stock_typeid = partDetials.stock_typeid,
                                                                                                                       stock_type = partDetials.stock_type,
                                                                                                                       partlocation_descr = partDetials.partlocation_descr,
                                                                                                                       stock_status_text = partDetials.stock_status_text,
                                                                                                                       remarks = subRemk != null ? (subRemk.remarks != null ? subRemk.remarks : "") : "",
                                                                                                                       reject_qty = _InvStkObj.Where(x => x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 33 || x.stock_statusid == 32).Sum(x => x.QUANTITY),
                                                                                                                       reserved_qty = _InvStkObj.Where(x => x.stock_statusid == 33 || x.stock_statusid == 32).Sum(x => x.QUANTITY),
                                                                                                                   };



                                            _dataReturn = _lstPartDetialsRmks.FirstOrDefault();
                                        }
                                        else
                                        {
                                            throw new Exception("Part already been registered.");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("Unable to get Reject/Return Items for Part number : " + PartDetails.part_number + " Part Name : " + PartDetails.partname);
                                    }
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(_dataReturn);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Select_PartStockDetails_for_Return_Reject_Register  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Select_PartStockDetails_for_Return_Reject_Register", "Error", "", "Error Select_PartStockDetails_for_Return_Reject_Register - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Select_PartStockDetails_for_Return_Reject_Register stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Save_PartStockDetails_for_Return_Reject_Register")]
        public IActionResult Save_PartStockDetails_for_Return_Reject_Register(Save_Items_Data_For_Return_Reject_Register _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            bool result = false;
            try
            {
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Save_PartStockDetails_for_Return_Reject_Register");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);
                    string orderStatus = "";
                    int update = 0;

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nShipmentSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                List<RegisterReturnItemData> _dataRegisterReturnItemInfo = new List<RegisterReturnItemData>();
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Save_PartStockDetails_for_Return_Reject_Register");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                DELIVERY_ORDERS _deliveryOrder = _dbContext.DELIVERY_ORDERS.Find(_data.delivery_order_id);
                                salesparts _partDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);

                                if (_deliveryOrder.STATUSID == 24)
                                {
                                    orderStatus = "Rejected"; // Reject Received 
                                }
                                else if (_deliveryOrder.STATUSID == 29)
                                {
                                    orderStatus = "Returned"; // Return Received
                                }
                                else
                                {
                                    throw new Exception("Delivery Order is in Invalid Status");
                                }

                                if (convert.ToInt(_partDetails.receive_with_serials) == 0)
                                {
                                    List<PartInventoryStockDetails> lstPartDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => (x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _data.shipmentlineid).ToList();

                                    int stocktypeid = convert.ToInt(_data.stocktypeid);
                                    int locationid = convert.ToInt(_data.locationid);

                                    foreach (PartInventoryStockDetails partData in lstPartDetails)
                                    {

                                        RegisterReturnItemData _dataItem = new RegisterReturnItemData();
                                        _dataItem.id = partData.PART_STOCK_DETAIL_ID;
                                        _dataItem.stocktypeid = stocktypeid;
                                        _dataItem.locationid = locationid;
                                        _dataRegisterReturnItemInfo.Add(_dataItem);

                                    }
                                }
                                else
                                {
                                    RegisterReturnItemData _dataItem = new RegisterReturnItemData();
                                    _dataItem.id = convert.ToInt(_data.part_stock_detail_id);
                                    _dataItem.stocktypeid = convert.ToInt(_data.stocktypeid);
                                    _dataItem.locationid = convert.ToInt(_data.locationid);
                                    _dataRegisterReturnItemInfo.Add(_dataItem);
                                }

                                if (_dataRegisterReturnItemInfo.Count() > 0)
                                {
                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                    executionStrategy.Execute(() =>
                                    {
                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {
                                                for (int i = 0; i < _dataRegisterReturnItemInfo.Count(); i++)
                                                {
                                                    RegisterReturnItemData _itemData = _dataRegisterReturnItemInfo[i];
                                                    PartInventoryStockDetails partStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(_itemData.id);
                                                    if (partStockDetails != null)
                                                    {
                                                        if (_itemData.stocktypeid == 0)
                                                        {
                                                            throw new Exception("Unable to get item received Stock quality");
                                                        }
                                                        if (_itemData.locationid == 0)
                                                        {
                                                            throw new Exception("Unable to get item received Location");
                                                        }

                                                        partStockDetails.stock_typeid = _itemData.stocktypeid;
                                                        partStockDetails.qty_intransit_to_location = null;
                                                        partStockDetails.UPDATED_DATE = DateTime.Now;
                                                        if (_deliveryOrder.STATUSID == 24)
                                                        {
                                                            partStockDetails.stock_statusid = 33; // Reject Received 
                                                        }
                                                        else if (_deliveryOrder.STATUSID == 29)
                                                        {
                                                            partStockDetails.stock_statusid = 32; // Return Received
                                                        }
                                                        _dbContext.Entry(partStockDetails).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                        update = _dbContext.SaveChanges();
                                                        if (update > 0)
                                                        {
                                                            if (!Move_Return_Parts_Location(partStockDetails.PART_STOCK_DETAIL_ID, _itemData.locationid))
                                                            {
                                                                throw new Exception("Unable to Move return item.");
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Unable to get Part Stock Details for register return items");
                                                    }
                                                }
                                                dbContextTransaction.Commit();
                                                result = true;
                                                CommonFunction.SetAudit("Save_PartStockDetails_for_Return_Reject_Register", "Updated", "", "Items '" + _dataRegisterReturnItemInfo.Count() + "' received for " + orderStatus + " Order no : " + _deliveryOrder.DELIVERY_ORDER_NO, "");
                                            }
                                            catch (Exception ex)
                                            {
                                                dbContextTransaction.Rollback();
                                                LeSDM.AddLog("Error while Return Reserved Items : " + ex.GetBaseException().ToString());
                                                throw ex;
                                            }
                                        }
                                    });
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get save data for Return_Reject_Register");
                }
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Save_PartStockDetails_for_Return_Reject_Register  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Save_PartStockDetails_for_Return_Reject_Register", "Error", "", "Error Save_PartStockDetails_for_Return_Reject_Register - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Save_PartStockDetails_for_Return_Reject_Register stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Remove_PartStockDetails_for_Return_Reject_Register")]
        public IActionResult Remove_PartStockDetails_for_Return_Reject_Register(Save_Items_Data_For_Return_Reject_Register _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            bool result = false;
            try
            {
                object _dataReturn = null;
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Remove_PartStockDetails_for_Return_Reject_Register");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);
                    string orderStatus = "";
                    int update = 0;

                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            int nShipmentSiteId = 0;
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                List<RegisterReturnItemData> _dataRegisterReturnItemInfo = new List<RegisterReturnItemData>();
                                CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Remove_PartStockDetails_for_Return_Reject_Register");
                                var SiteId = GetLinkedSites(_UserData);
                                List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                                List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();

                                DELIVERY_ORDERS _deliveryOrder = _dbContext.DELIVERY_ORDERS.Find(_data.delivery_order_id);
                                salesparts _partDetails = _dbContext.SALES_PARTS.Find(_data.salespartid);

                                if (_deliveryOrder.STATUSID == 24)
                                {
                                    orderStatus = "Rejected"; // Reject Received 
                                }
                                else if (_deliveryOrder.STATUSID == 29)
                                {
                                    orderStatus = "Returned"; // Return Received
                                }
                                else
                                {
                                    throw new Exception("Delivery Order is in Invalid Status");
                                }

                                if (convert.ToInt(_partDetails.receive_with_serials) == 0)
                                {
                                    List<PartInventoryStockDetails> lstPartDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Where(x => (x.stock_statusid == 24 || x.stock_statusid == 29 || x.stock_statusid == 32 || x.stock_statusid == 33) && x.shipmentlineid == _data.shipmentlineid).ToList();

                                    int stocktypeid = convert.ToInt(_data.stocktypeid);
                                    int locationid = convert.ToInt(_data.locationid);

                                    foreach (PartInventoryStockDetails partData in lstPartDetails)
                                    {
                                        RegisterReturnItemData _dataItem = new RegisterReturnItemData();
                                        _dataItem.id = partData.PART_STOCK_DETAIL_ID;
                                        _dataItem.stocktypeid = stocktypeid;
                                        _dataItem.locationid = locationid;
                                        _dataRegisterReturnItemInfo.Add(_dataItem);

                                    }
                                }
                                else
                                {
                                    RegisterReturnItemData _dataItem = new RegisterReturnItemData();
                                    _dataItem.id = convert.ToInt(_data.part_stock_detail_id);
                                    _dataItem.stocktypeid = convert.ToInt(_data.stocktypeid);
                                    _dataItem.locationid = convert.ToInt(_data.locationid);
                                    _dataRegisterReturnItemInfo.Add(_dataItem);
                                }

                                if (_dataRegisterReturnItemInfo.Count() > 0)
                                {
                                    var executionStrategy = _dbContext.Database.CreateExecutionStrategy();
                                    executionStrategy.Execute(() =>
                                    {
                                        using (var dbContextTransaction = _dbContext.Database.BeginTransaction())
                                        {
                                            try
                                            {
                                                for (int i = 0; i < _dataRegisterReturnItemInfo.Count(); i++)
                                                {
                                                    RegisterReturnItemData _itemData = _dataRegisterReturnItemInfo[i];
                                                    PartInventoryStockDetails partStockDetails = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(_itemData.id);
                                                    if (partStockDetails != null)
                                                    {
                                                        if (_itemData.stocktypeid == 0)
                                                        {
                                                            throw new Exception("Unable to get item received Stock quality");
                                                        }
                                                        if (_itemData.locationid == 0)
                                                        {
                                                            throw new Exception("Unable to get item received Location");
                                                        }

                                                        partStockDetails.stock_typeid = _itemData.stocktypeid;
                                                        partStockDetails.qty_intransit_to_location = 1;
                                                        partStockDetails.UPDATED_DATE = DateTime.Now;
                                                        if (_deliveryOrder.STATUSID == 24)
                                                        {
                                                            partStockDetails.stock_statusid = 24; // Reject Received  removed
                                                        }
                                                        else if (_deliveryOrder.STATUSID == 29)
                                                        {
                                                            partStockDetails.stock_statusid = 29; // Return Received removed
                                                        }
                                                        _dbContext.Entry(partStockDetails).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                                                        update = _dbContext.SaveChanges();
                                                        if (update > 0)
                                                        {
                                                            if (!Move_Return_Parts_Location(partStockDetails.PART_STOCK_DETAIL_ID, _itemData.locationid))
                                                            {
                                                                throw new Exception("Unable to Move return item.");
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        throw new Exception("Unable to get Part Stock Details for register return items");
                                                    }
                                                }
                                                dbContextTransaction.Commit();
                                                result = true;
                                                CommonFunction.SetAudit("Remove_PartStockDetails_for_Return_Reject_Register", "Updated", "", "Registered Items removed '" + _dataRegisterReturnItemInfo.Count() + "' for " + orderStatus + " Order no : " + _deliveryOrder.DELIVERY_ORDER_NO, "");
                                            }
                                            catch (Exception ex)
                                            {
                                                dbContextTransaction.Rollback();
                                                LeSDM.AddLog("Error while Return Reserved Items : " + ex.GetBaseException().ToString());
                                                throw ex;
                                            }
                                        }
                                    });
                                }
                                else
                                {
                                    throw new Exception("Unable to get items to remove");
                                }
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User Id");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                else
                {
                    throw new Exception("Unable to get save data for Return_Reject_Register");
                }
                return Ok(result);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Remove_PartStockDetails_for_Return_Reject_Register  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Remove_PartStockDetails_for_Return_Reject_Register", "Error", "", "Error Remove_PartStockDetails_for_Return_Reject_Register - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Remove_PartStockDetails_for_Return_Reject_Register stopped successfully.");
            }
        }

        private bool Move_Return_Parts_Location(int parT_STOCK_DETAIL_ID, int? tolocation)
        {
            bool isPartMoved = false;
            bool IsPartMoveControl = true;
            try
            {
                PartInventoryStockDetails inventoryItem = _dbContext.PART_INVENTORY_STOCK_DETAILS.Find(parT_STOCK_DETAIL_ID);
                if (inventoryItem == null)
                {
                    throw new Exception("Unable to find Inventory Part.");
                }

                int? salespartid = inventoryItem.SalesPartId;
                var salespartno = _dbContext.SALES_PARTS.Find(salespartid);

                Mast_STOCK_TYPE _stktype = _dbContext.Mast_STOCK_TYPE.Find(inventoryItem.stock_typeid);
                if (_stktype != null)
                {
                    //IsPartMoveControl = (_stktype.Part_Movement_Control == 1) ? true : false;
                    IsPartMoveControl = true; // always be true as part can be moved to un move able stock location
                }
                if (IsPartMoveControl)
                {
                    if (tolocation.HasValue)
                    {
                        int currentLocation = inventoryItem.PARTLOCATIONID.HasValue ? inventoryItem.PARTLOCATIONID.Value : 0;
                        //if (Convert.ToInt32(inventoryItem.shipmentid) > 0)
                        //{
                        //    throw new Exception("Reserved stock cannot be moved.");
                        //}
                        //if (salespartno.receive_with_serials == 1 && (inventoryItem.SERIAL == null || convert.ToString(inventoryItem.SERIAL).Trim() == ""))
                        //{
                        //    throw new Exception("In Bulk stock without serial cannot be moved.");
                        //}

                        inventoryItem.PARTLOCATIONID = tolocation.Value;
                        inventoryItem.UPDATED_DATE = DateTime.Now;
                        inventoryItem.move_exported = 1;
                        _dbContext.Entry(inventoryItem).State = Microsoft.EntityFrameworkCore.EntityState.Modified;
                        _dbContext.SaveChanges();
                        if (currentLocation != tolocation.Value)
                        {
                            UpdatePartStock(inventoryItem.SITEID, inventoryItem.SalesPartId, inventoryItem.customerid, inventoryItem.M3);
                            isPartMoved = true;
                            //int quantityDifference = tolocation.Value > currentLocation ? 1 : -1;

                            //UpdateQuantityInHand(inventoryItem, currentLocation, 1);
                            //UpdateQuantityInHand(inventoryItem, tolocation.Value, -1);

                        }
                        else
                        {
                            isPartMoved = true;
                        }
                    }
                    else throw new Exception("Please fill in To Location.");
                }
                else
                {
                    throw new Exception("Movement is not allowed for this stock quality " + _stktype.STOCK_TYPE + " - " + _stktype.STOCK_TYPE_DESCRIPTION);
                }
            }
            catch (Exception ex)
            {
                LeSDM.AddLog("Error on updating location: " + ex.GetBaseException().ToString());
                throw ex;
            }
            return isPartMoved;
        }

        #endregion

        [HttpPost]
        [Route("Mobile_Audit_Log")]
        public IActionResult Mobile_Audit_Log(AuditData _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                if (_data != null)
                {
                    CommonFunction.setLog("=====================================================");
                    CommonFunction.setLog("Processing started for Mobile_Audit_Log");
                    CommonFunction.Set_Client_Data_on_Log_Authentication(_data, AUTHENTICATION_KEY);


                    bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                    if (value)
                    {
                        if (convert.ToInt(_data.UserId) > 0)
                        {
                            SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.UserId);
                            if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                            {
                                return NotFound("Unable to get Userdata for Userid : " + _data.UserId);
                            }
                            else
                            {
                                CommonFunction.SetAudit(_data.ModuleName, _data.Action, "", _data.Message, "");
                                return Ok(true);
                            }
                        }
                        else
                        {
                            throw new Exception("Unable to get User details.");
                        }
                    }
                    else
                    {
                        throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                    }
                }
                return Ok(true);
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Mobile_Audit_Log  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Mobile_Audit_Log", "Error", "", "Error Mobile_Audit_Log - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Mobile_Audit_Log stopped successfully.");
            }
        }

        private List<int> get_Arrival_LocationId_List(int UserId)
        {
            List<int> lst_Arrival_Location = new List<int>();
            try
            {
                SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == UserId);
                if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                {
                    throw new Exception("Unable to get Userdata for Userid : " + UserId);
                }
                else
                {
                    CommonFunction.setLog("USER Name : " + _UserData.EX_USERCODE + " Processing Get_Arrival_Location");

                    var SiteId = GetLinkedSites(_UserData);

                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));
                    List<Mast_Site> LstSites = _dbContext.Mast_Site.Where(x => lstUserSite.Contains(x.SiteId)).ToList();
                    List<MAST_SALES_PARTS_LOCATION> lstLoaction = new List<MAST_SALES_PARTS_LOCATION>();

                    foreach (Mast_Site _site in LstSites)
                    {
                        Mast_SITE_CONFIG siteConfig = (Mast_SITE_CONFIG)_dbContext.Mast_SITE_CONFIG.FirstOrDefault(x => x.ModuleId == 1021 && x.SiteId == _site.SiteId && x.SiteConfig_ParamId == 1013);
                        if (siteConfig != null)
                        {
                            MAST_SALES_PARTS_LOCATION _arrivalLocation = _dbContext.MAST_SALES_PARTS_LOCATION.Find(convert.ToInt(siteConfig.Param_Value));
                            if (_arrivalLocation != null)
                            {
                                lstLoaction.Add(_arrivalLocation);
                            }
                        }
                    }
                    lst_Arrival_Location = lstLoaction.Select(x => x.PARTLOCATIONID).ToList();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return lst_Arrival_Location;
        }

        #endregion

        #region // Get PartNo. and Serial indicator lists
        // Outbound Order List
        [HttpPost]
        [Route("Get_OutboundOrder_PartsList")]
        public IActionResult Get_OutboundOrder_PartsList([FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Get_OutboundOrder_PartsList");


                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    var lstParts = (from C in _dbContext.Customer_Order_line
                                    join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                    select new { salespartid = C.SalesPartId, salespartno = C.ProductCode, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                    return Ok(lstParts.ToList());
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
                return Ok("");
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_OutboundOrder_PartsList  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_OutboundOrder_PartsList", "Error", "", "Error Get_OutboundOrder_PartsList - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_OutboundOrder_PartsList stopped successfully.");
            }
        }

        // Outbound Order Detail
        [HttpPost]
        [Route("Get_OutboundOrder_PartsDetail")]
        public IActionResult Get_OutboundOrder_PartsDetail(PartListInfo _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Get_OutboundOrder_PartsDetail");


                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Input data : " + _dataValueStr);

                    if (_data != null && convert.ToInt(_data.shipmentid) > 0)
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        join SHLINE in _dbContext.Shipment_Lines on C.CustOrderLineId equals SHLINE.CustOrderLineId
                                        where SHLINE.ShipmentId == convert.ToInt(_data.shipmentid)
                                        select new { salespartid = C.SalesPartId, salespartno = C.ProductCode, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else
                    {
                        CommonFunction.SetAudit("Get_OutboundOrder_PartsDetail", "Error", "", "Error Get_OutboundOrder_PartsDetail - Invalid parameters", "");
                        return BadRequest("Invalid parameters");
                    }
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
                return Ok("");
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_OutboundOrder_PartsDetail  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_OutboundOrder_PartsDetail", "Error", "", "Error Get_OutboundOrder_PartsDetail - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_OutboundOrder_PartsDetail stopped successfully.");
            }
        }

        // PartList for that Location for Outbound
        [HttpPost]
        [Route("Get_PartsList_OrderLocation_OutBound")]
        public IActionResult Get_PartsList_OrderLocation_OutBound(PartListInfoOutbound _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Get_PartsList_OrderLocation_OutBound");


                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Input data : " + _dataValueStr);
                    List<V_SHIPMENT_LINES> _vLine = new List<V_SHIPMENT_LINES>();
                    List<int> lstdata;
                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);

                    if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                    {
                        return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                    }

                    var SiteId = GetLinkedSites(_UserData);
                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));

                    int?[] lst_tripShpimentid = _dbContext.V_TRIP_PLAN.Where(x => x.shipmentid != null).Select(x => x.shipmentid).Distinct().ToArray();
                    _vLine = _dbContext.V_Shipment_Lines.Where(x => (x.Picked_Qty == 0 || x.Reserved_Qty >= x.Picked_Qty || x.Connected_SourceQty >= x.Picked_Qty) && lst_tripShpimentid.Contains(x.ShipmentId) == false).ToList();

                    int?[] DistictIds1 = _vLine.Select(x => x.ShipmentId).Distinct().ToArray();
                    List<V_SHIPMENT> AllDistinctLines1 = new List<V_SHIPMENT>();
                    for (int i = 0; i < DistictIds1.Count(); i++)
                    {

                        int? EachID = DistictIds1[i];
                        V_SHIPMENT shipmentData = _dbContext.V_Shipment.FirstOrDefault(x => x.ShipmentId == EachID && x.Shipment_StatusId != 10);
                        if (shipmentData != null)
                        {
                            AllDistinctLines1.Add(shipmentData);
                        }

                    }
                    lstdata = AllDistinctLines1.Where(x => lstUserSite.Contains(convert.ToInt(x.SiteId))).Select(x => x.ShipmentId).ToList();

                    if (_data != null && convert.ToInt(_data.locationid) > 0 && convert.ToInt(_data.shipmentid) > 0)
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        join INV in _dbContext.PART_INVENTORY_STOCK on C.SalesPartId equals INV.SalesPartId
                                        join SHLINE in _dbContext.Shipment_Lines on C.CustOrderLineId equals SHLINE.CustOrderLineId
                                        where (SHLINE.ShipmentId == convert.ToInt(_data.shipmentid)) && (INV.PARTLOCATIONID == _data.locationid)

                                        select new { salespartid = C.SalesPartId, salespartno = C.ProductCode, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else if (_data != null && convert.ToInt(_data.shipmentid) > 0)
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        join INV in _dbContext.PART_INVENTORY_STOCK on P.salespartid equals INV.SalesPartId
                                        join SHLINE in _dbContext.Shipment_Lines on C.CustOrderLineId equals SHLINE.CustOrderLineId
                                        where (SHLINE.ShipmentId == convert.ToInt(_data.shipmentid))
                                        select new { salespartid = C.SalesPartId, salespartno = C.ProductCode, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else if (_data != null && convert.ToInt(_data.locationid) > 0)
                    {
                        var lstParts = (from P in _dbContext.SALES_PARTS
                                        join INV in _dbContext.PART_INVENTORY_STOCK on P.salespartid equals INV.SalesPartId
                                        where (INV.PARTLOCATIONID == _data.locationid)
                                        select new { salespartid = P.salespartid, salespartno = P.part_number, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        //join INV in _dbContext.PART_INVENTORY_STOCK on C.SalesPartId equals INV.SalesPartId
                                        join SHLINE in _dbContext.Shipment_Lines on C.CustOrderLineId equals SHLINE.CustOrderLineId
                                        //where lstdata.Contains(SHLINE.ShipmentId.GetValueOrDefault()) == true
                                        select new { salespartid = P.salespartid, salespartno = P.part_number, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    //else
                    //{
                    //    CommonFunction.SetAudit("Get_PartsList_OrderLocation_OutBound", "Error", "", "Error Get_PartsList_OrderLocation_OutBound - Invalid parameters", "");
                    //    return BadRequest("Invalid parameters");
                    //}
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
                return Ok("");
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_PartsList_OrderLocation_OutBound  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_PartsList_OrderLocation_OutBound", "Error", "", "Error Get_PartsList_OrderLocation_OutBound - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_PartsList_OrderLocation_OutBound stopped successfully.");
            }
        }

        // PartList for that Location for Inbound
        [HttpPost]
        [Route("Get_PartsList_OrderLocation_InBound")]
        public IActionResult Get_PartsList_OrderLocation_InBound(PartListInfo _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Get_PartsList_OrderLocation_InBound");


                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Input data : " + _dataValueStr);

                    if (_data != null && convert.ToInt(_data.locationid) > 0 && convert.ToInt(_data.shipmentid) > 0)
                    {
                        var lstParts = (from C in _dbContext.INTERNAL_ORDER_LINE
                                        join P in _dbContext.SALES_PARTS on C.SALESPARTID equals P.salespartid
                                        //join INV in _dbContext.PART_INVENTORY_STOCK on C.SALESPARTID equals INV.SalesPartId
                                        join INOrders in _dbContext.INTERNAL_ORDERS on C.ORDERID equals INOrders.INTERNALORDERID
                                        where (INOrders.INTERNALORDERID == convert.ToInt(_data.shipmentid))
                                        select new { salespartid = C.SALESPARTID, salespartno = C.PARTNO, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else if (_data != null && convert.ToInt(_data.shipmentid) > 0)
                    {
                        var lstParts = (from C in _dbContext.INTERNAL_ORDER_LINE
                                        join P in _dbContext.SALES_PARTS on C.SALESPARTID equals P.salespartid
                                        //join INV in _dbContext.PART_INVENTORY_STOCK on C.SALESPARTID equals INV.SalesPartId
                                        join INOrders in _dbContext.INTERNAL_ORDERS on C.ORDERID equals INOrders.INTERNALORDERID
                                        where (INOrders.INTERNALORDERID == convert.ToInt(_data.shipmentid))
                                        select new { salespartid = C.SALESPARTID, salespartno = C.PARTNO, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else if (_data != null && convert.ToInt(_data.locationid) > 0)
                    {
                        var lstParts = (from C in _dbContext.INTERNAL_ORDER_LINE
                                        join P in _dbContext.SALES_PARTS on C.SALESPARTID equals P.salespartid
                                        join INV in _dbContext.PART_INVENTORY_STOCK on C.SALESPARTID equals INV.SalesPartId
                                        join INOrders in _dbContext.INTERNAL_ORDERS on C.ORDERID equals INOrders.INTERNALORDERID
                                        where (INV.PARTLOCATIONID == _data.locationid && INV.QTY_IN_HAND >= 1)
                                        select new { salespartid = P.salespartid, salespartno = P.part_number, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else
                    {
                        var lstParts = (from C in _dbContext.INTERNAL_ORDER_LINE
                                        join P in _dbContext.SALES_PARTS on C.SALESPARTID equals P.salespartid
                                        join INOrders in _dbContext.INTERNAL_ORDERS on C.ORDERID equals INOrders.INTERNALORDERID
                                        select new { salespartid = P.salespartid, salespartno = P.part_number, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();
                        return Ok(lstParts.ToList());
                    }
                    //else
                    //{
                    //    CommonFunction.SetAudit("Get_PartsList_OrderLocation_InBound", "Error", "", "Error Get_PartsList_OrderLocation_InBound - Invalid parameters", "");
                    //    return BadRequest("Invalid parameters");
                    //}
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
                return Ok("");
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_PartsList_OrderLocation_InBound  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_PartsList_OrderLocation_InBound", "Error", "", "Error Get_PartsList_OrderLocation_InBound - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_PartsList_OrderLocation_InBound stopped successfully.");
            }
        }

        [HttpPost]
        [Route("Get_PartsList_OrderLocation_SelfCollect")]
        public IActionResult Get_PartsList_OrderLocation_SelfCollect(PartListInfoSelfCollect _data, [FromHeader] string AUTHENTICATION_KEY)
        {
            try
            {
                CommonFunction.setLog("=====================================================");
                CommonFunction.setLog("Processing started for Get_PartsList_OrderLocation_SelfCollect");


                bool value = CommonFunction.Check_AUTHENTICATION_KEY(AUTHENTICATION_KEY);
                if (value)
                {
                    string _dataValueStr = JsonConvert.SerializeObject(_data);
                    CommonFunction.setLog("Input data : " + _dataValueStr);
                    List<CustomerOrderLine> _vLine = new List<CustomerOrderLine>();
                    List<int> lstdata;
                    SM_EXTERNAL_USERS _UserData = _dbContext.SM_EXTERNAL_USERS.FirstOrDefault(x => x.EX_USERID == _data.userid);

                    if (_UserData == null && convert.ToInt(_UserData.EX_USERID) == 0)
                    {
                        return NotFound("Unable to get Userdata for Userid : " + _data.userid);
                    }

                    var SiteId = GetLinkedSites(_UserData);
                    List<int> lstUserSite = Newtonsoft.Json.JsonConvert.DeserializeObject<List<int>>(convert.ToString(SiteId));

                    int?[] DistictIds1 = _vLine.Select(x => x.OrderId).Distinct().ToArray();
                    List<V_CustomerOrders> AllDistinctLines1 = new List<V_CustomerOrders>();
                    for (int i = 0; i < DistictIds1.Count(); i++)
                    {

                        int? EachID = DistictIds1[i];
                        V_CustomerOrders _orderData = _dbContext.V_Customer_Orders.FirstOrDefault(x => x.OrderId == EachID && x.statusid != 10);
                        if (_orderData != null)
                        {
                            AllDistinctLines1.Add(_orderData);
                        }

                    }
                    lstdata = AllDistinctLines1.Where(x => lstUserSite.Contains(convert.ToInt(x.SITEID))).Select(x => x.OrderId).ToList();

                    if (_data != null && convert.ToInt(_data.locationid) > 0 && convert.ToInt(_data.orderid) > 0)
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        join INV in _dbContext.PART_INVENTORY_STOCK on C.SalesPartId equals INV.SalesPartId
                                        where (C.OrderId == convert.ToInt(_data.orderid)) && (INV.PARTLOCATIONID == _data.locationid)
                                        select new { salespartid = C.SalesPartId, salespartno = C.ProductCode, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else if (_data != null && convert.ToInt(_data.orderid) > 0)
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        join INV in _dbContext.PART_INVENTORY_STOCK on P.salespartid equals INV.SalesPartId
                                        where (C.OrderId == convert.ToInt(_data.orderid))
                                        select new { salespartid = C.SalesPartId, salespartno = C.ProductCode, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else if (_data != null && convert.ToInt(_data.locationid) > 0)
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        join INV in _dbContext.PART_INVENTORY_STOCK on P.salespartid equals INV.SalesPartId
                                        where (INV.PARTLOCATIONID == _data.locationid)
                                        select new { salespartid = P.salespartid, salespartno = P.part_number, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    else
                    {
                        var lstParts = (from C in _dbContext.Customer_Order_line
                                        join P in _dbContext.SALES_PARTS on C.SalesPartId equals P.salespartid
                                        //join INV in _dbContext.PART_INVENTORY_STOCK on C.SalesPartId equals INV.SalesPartId
                                        //join SHLINE in _dbContext.Shipment_Lines on C.CustOrderLineId equals SHLINE.CustOrderLineId
                                        //where lstdata.Contains(SHLINE.ShipmentId.GetValueOrDefault()) == true
                                        select new { salespartid = P.salespartid, salespartno = P.part_number, isserialitem = convert.ToInt(P.receive_with_serials) }).Distinct();

                        return Ok(lstParts.ToList());
                    }
                    //else
                    //{
                    //    CommonFunction.SetAudit("Get_PartsList_OrderLocation_OutBound", "Error", "", "Error Get_PartsList_OrderLocation_OutBound - Invalid parameters", "");
                    //    return BadRequest("Invalid parameters");
                    //}
                }
                else
                {
                    throw new Exception("AUTHENTICATION_KEY : " + AUTHENTICATION_KEY + " is invalid.");
                }
                return Ok("");
            }
            catch (Exception ex)
            {
                CommonFunction.setLog("Error on Get_PartsList_OrderLocation_SelfCollect  ERROR : " + ex.Message + " StackTrace : " + ex.StackTrace);
                CommonFunction.SetAudit("Get_PartsList_OrderLocation_SelfCollect", "Error", "", "Error Get_PartsList_OrderLocation_SelfCollect - " + ex.Message, "");
                return BadRequest(ex.Message);
            }
            finally
            {
                CommonFunction.setLog("Get_PartsList_OrderLocation_SelfCollect stopped successfully.");
            }
        }

        #endregion

    }

    public class TargetClassComparer : IEqualityComparer<Internal_Order_WMS>
    {
        public bool Equals(Internal_Order_WMS x, Internal_Order_WMS y)
        {
            if (ReferenceEquals(x, y))
                return true;
            if (x == null || y == null)
                return false;
            return x.internalorderid == y.internalorderid;
        }

        public int GetHashCode(Internal_Order_WMS obj)
        {
            return obj.internalorderid.GetHashCode();
        }
    }

    public class TargetClassComparer2 : IEqualityComparer<Outbound_Order_WMS>
    {
        public bool Equals(Outbound_Order_WMS x, Outbound_Order_WMS y)
        {
            if (ReferenceEquals(x, y))
                return true;
            if (x == null || y == null)
                return false;
            return x.shipmentid == y.shipmentid;
        }

        public int GetHashCode(Outbound_Order_WMS obj)
        {
            return obj.shipmentid.GetHashCode();
        }
    }

    public class TargetClassComparer3 : IEqualityComparer<SelfCollect_Order_WMS>
    {
        public bool Equals(SelfCollect_Order_WMS x, SelfCollect_Order_WMS y)
        {
            if (ReferenceEquals(x, y))
                return true;
            if (x == null || y == null)
                return false;
            return x.orderid == y.orderid;
        }

        public int GetHashCode(SelfCollect_Order_WMS obj)
        {
            return obj.orderid.GetHashCode();
        }
    }


    public class InternalOrderDataComparer : IEqualityComparer<InternalOrderData>
    {
        public bool Equals(InternalOrderData x, InternalOrderData y)
        {
            if (ReferenceEquals(x, y))
                return true;
            if (x == null || y == null)
                return false;
            return x.orderid == y.orderid;
        }

        public int GetHashCode(InternalOrderData obj)
        {
            return obj.orderid.GetHashCode();
        }
    }

    public class PartStockData
    {
        public int userid { get; set; }
        public int partstockdetailsid { get; set; }

    }

    public class Update_PartStock_Data
    {
        public int userid { get; set; }
        public int partstockdetailsid { get; set; }
        public string? marking { get; set; }
        public int? stocktypeid { get; set; }
        public string? serialno { get; set; }
        public string? batchno { get; set; }
        public string? expireDate { get; set; }
    }

    public class MoveLocationdata
    {
        public int? userid { set; get; }
        public int? locationid { set; get; }
        public int? to_locationid { set; get; }
        public List<selectedItemData>? itemdata { get; set; }

    }

    public class selectedItemData
    {
        public int? salespartid { get; set; }
        public int? partstockid { get; set; }
        public int? partlocationid { get; set; }
        public int? customerid { get; set; }
        public int? stocktypeid { get; set; }
        public string? serial { get; set; }
        public double? selected_qty { get; set; }

    }

    public class getselectedItemData
    {
        public int userid { get; set; }
        public int partlocationid { get; set; }
    }

}
